

FRONTEND
frontend[
client(
src(
compoents[
(
const Footer = ({ setActivePage }) => {
  return (
    <footer className="bg-gray-900 text-white mt-12">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Logo + About */}
          <div>
            <h3 className="text-xl font-bold mb-4 flex items-center">
              <i className="fas fa-church text-[#FF7E45] mr-2"></i>
              St. Michael's & All Angels Church <br /> Ifite-Awka
            </h3>
            <p className="mb-4">The Throne of Grace Parish</p>
            <div className="flex space-x-4">
              <button className="text-[#FF7E45] hover:text-[#FFA76A]">
                <a href="https://www.facebook.com/SMAC.Media.Team" target="_blank" rel="noopener noreferrer">
                  <i className="fab fa-facebook-f text-xl"></i>
                </a>
              </button>
              <button className="text-[#FF7E45] hover:text-[#FFA76A]">
                <a href="https://www.instagram.com/stmichaelschurch" target="_blank" rel="noopener noreferrer">
                  <i className="fab fa-instagram text-xl"></i>
                </a>
              </button>
              <button className="text-[#FF7E45] hover:text-[#FFA76A]">
                <a href="https://www.youtube.com/stmichaelschurch" target="_blank" rel="noopener noreferrer">
                  <i className="fab fa-youtube text-xl"></i>
                </a>
              </button>
              <button className="text-[#FF7E45] hover:text-[#FFA76A]">
                <a href="https://www.spotify.com/stmichaelschurch" target="_blank" rel="noopener noreferrer">
                  <i className="fab fa-spotify text-xl"></i>
                </a>
              </button>
              <button className="text-[#FF7E45] hover:text-[#FFA76A]">
                <a href="https://www.tiktok.com/@stmichaelschurch" target="_blank" rel="noopener noreferrer">
                  <i className="fab fa-tiktok text-xl"></i>
                </a>
              </button>
              <button className="text-[#FF7E45] hover:text-[#FFA76A]">
                <a href="https://www.whatsapp.com/stmichaelschurch" target="_blank" rel="noopener noreferrer">
                  <i className="fab fa-whatsapp text-xl"></i>
                </a>
              </button>
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Quick Links</h4>
            <ul className="space-y-2">
              <li>
                <button
                  onClick={() => setActivePage("events")}
                  className="hover:text-[#FF7E45]"
                >
                  Upcoming Events
                </button>
              </li>
              <li>
                <button
                  onClick={() => setActivePage("sermons")}
                  className="hover:text-[#FF7E45]"
                >
                  Latest Sermons
                </button>
              </li>
              <li>
                <button
                  onClick={() => setActivePage("blog")}
                  className="hover:text-[#FF7E45]"
                >
                  News & Announcements
                </button>
              </li>
              <li>
                <button
                  onClick={() => setActivePage("donate")}
                  className="hover:text-[#FF7E45]"
                >
                  Support Our Church
                </button>
              </li>
            </ul>
          </div>

          {/* Service Times */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Service Times</h4>
            <ul className="space-y-2">
              <li>Sunday: 9:00 AM & 11:00 AM</li>
              <li>Wednesday: 7:00 PM</li>
              <li>Prayer Meeting: Tuesday 6:30 PM</li>
              <li>Youth Group: Friday 7:00 PM</li>
            </ul>
          </div>

          {/* Contact */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Contact Us</h4>
            <ul className="space-y-2">
              <li className="flex items-center">
                <i className="fas fa-map-marker-alt text-[#FF7E45] mr-2"></i>
                123 Faith Avenue, Cityville
              </li>
              <li className="flex items-center">
                <i className="fas fa-phone text-[#FF7E45] mr-2"></i>
                (555) 123-4567
              </li>
              <li className="flex items-center">
                <i className="fas fa-envelope text-[#FF7E45] mr-2"></i>
                michaelmassifite@gmail.com
              </li>
            </ul>
          </div>
        </div>

        {/* Copyright */}
        <div className="border-t border-gray-700 mt-8 pt-8 text-center">
          <p>
            &copy; {new Date().getFullYear()} St. Micheal`s & All Angels Church Ifite-Awka. All Rights
            Reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
) footer.jsx,
(
// src/components/layouts/Header.jsx
import { useState } from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";
import useAuth from "../hooks/useAuth";

const Header = () => {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();

  const { user, logout } = useAuth();

  const handleLogout = async () => {
    await logout();
    navigate("/");
    setMobileMenuOpen(false);
  };

  const isActive = (path) => location.pathname === path ? "active" : "";

  // Safely check authentication and user properties
  const isAuthenticated = user && user.role && user.role !== "guest";
  const userRole = (user?.role || "guest").toLowerCase();
  const userId = user?.id || user?._id || null;
  const userName = user?.name || user?.firstName || "User";

  return (
    <header className="bg-white shadow-md">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          {/* Logo */}
          <Link to="/" className="flex items-center cursor-pointer">
            <i className="fas fa-church text-[#FF7E45] text-3xl mr-2"></i>
            <h1 className="text-xl md:text-2xl font-bold">
              St. Michael&apos;s & All Angels Church
            </h1>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex">
            <ul className="flex space-x-1 gap-2">
              <li><Link to="/" className={`nav-link ${isActive("/")}`}>Home</Link></li>
              <li><Link to="/events" className={`nav-link ${isActive("/events")}`}>Events</Link></li>
              <li><Link to="/sermons" className={`nav-link ${isActive("/sermons")}`}>Sermons</Link></li>
              <li><Link to="/donate" className={`nav-link ${isActive("/donate")}`}>Donate</Link></li>
              <li><Link to="/blog" className={`nav-link ${isActive("/blog")}`}>Blog</Link></li>
              <li><Link to="/ministries" className={`nav-link ${isActive("/ministries")}`}>Ministries</Link></li>
              <li><Link to="/testimonials" className={`nav-link ${isActive("/testimonials")}`}>Testimonials</Link></li>
              <li><Link to="/prayer" className={`nav-link ${isActive("/prayer")}`}>Prayer</Link></li>

              {userRole === "admin" && userId && (
                <li>
                  <Link to={`/admin/${userId}/dashboard`} className={`nav-link ${isActive(`/admin/${userId}/dashboard`)}`}>
                    Admin
                  </Link>
                </li>
              )}
              {userRole === "user" && userId && (
                <li>
                  <Link to={`/user/${userId}/dashboard`} className={`nav-link ${isActive(`/user/${userId}/dashboard`)}`}>
                    Dashboard
                  </Link>
                </li>
              )}
            </ul>
          </nav>

          {/* Right Section */}
          <div className="hidden md:block">
            {!isAuthenticated ? (
              <Link to="/login" className="btn btn-primary">
                Login
              </Link>
            ) : (
              <div className="relative group">
                <button className="flex items-center space-x-1 btn btn-outline">
                  <i className="fas fa-user"></i>
                  <span>{userName}</span>
                </button>

                {/* Dropdown */}
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg overflow-hidden z-20 
                  opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                  <div className="py-2">
                    {userId && (
                      <>
                        <Link
                          to={`/profile/${userId}`}
                          className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                          onClick={() => setMobileMenuOpen(false)}
                        >
                          Profile
                        </Link>
                        {userRole === "user" && (
                          <Link
                            to={`/my-rsvps/${userId}`}
                            className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                            onClick={() => setMobileMenuOpen(false)}
                          >
                            My RSVPs
                          </Link>
                        )}
                        <hr className="my-2" />
                      </>
                    )}
                    <button
                      onClick={handleLogout}
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      Logout
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Mobile Toggle */}
          <button
            className="md:hidden text-gray-600"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            aria-label="Toggle mobile menu"
          >
            <i className={`fas ${mobileMenuOpen ? "fa-times" : "fa-bars"} text-2xl`}></i>
          </button>
        </div>
      </div>

      {/* Mobile Navigation */}
      <div
        className={`fixed inset-0 z-50 md:hidden ${mobileMenuOpen ? "block" : "hidden"
          }`}
      >
        <div
          className="fixed inset-0 bg-gray-800 bg-opacity-75"
          onClick={() => setMobileMenuOpen(false)}
        ></div>
        <nav
          className={`fixed top-0 left-0 bottom-0 w-64 bg-white z-50 transform ${mobileMenuOpen ? "translate-x-0" : "-translate-x-full"
            } transition-transform duration-300 ease-in-out`}
        >
          <div className="p-4 border-b">
            <Link to="/" onClick={() => setMobileMenuOpen(false)}>
              <i className="fas fa-church text-[#FF7E45] text-xl mr-2"></i>
              <h2 className="font-bold text-lg">St. Michael&apos;s Church</h2>
            </Link>
          </div>
          <ul className="p-4 space-y-2">
            <li>
              <Link
                to="/"
                className="block p-2 hover:text-[#FF7E45]"
                onClick={() => setMobileMenuOpen(false)}
              >
                <i className="fas fa-home mr-2"></i>Home
              </Link>
            </li>
            <li >
              <Link
                to="/events"
                className="block p-2 hover:text-[#FF7E45]"
                onClick={() => setMobileMenuOpen(false)}
              >
                <i className="fas fa-calendar-alt mr-2"></i>Events
              </Link>
            </li>
            <li>
              <Link
                to="/sermons"
                className="block p-2 hover:text-[#FF7E45]"
                onClick={() => setMobileMenuOpen(false)}
              >
                <i className="fas fa-video mr-2"></i>Sermons
              </Link>
            </li>
            <li>
              <Link to="/donate"
                className="block p-2 hover:text-[#FF7E45]"
                onClick={() => setMobileMenuOpen(false)}>
                <i className="fas fa-dollar-sign mr-2"></i>Donate
              </Link>
            </li>
            <li>
              <Link to="/blog"
                className="block p-2 hover:text-[#FF7E45]"
                onClick={() => setMobileMenuOpen(false)}>
                <i className="fas fa-blog mr-2"></i>Blog
              </Link>
            </li>
            <li><Link to="/ministries"
              className="block p-2 hover:text-[#FF7E45]"
              onClick={() => setMobileMenuOpen(false)}>
              <i className="fas fa-people-carry mr-2"></i>Ministries
            </Link>
            </li>
            <li>
              <Link to="/testimonials"
                className="block p-2 hover:text-[#FF7E45]"
                onClick={() => setMobileMenuOpen(false)}>
                <i className="fas fa-comments mr-2"></i>Testimonials
              </Link>
            </li>
            <li>
              <Link to="/prayer" className="block p-2 hover:text-[#FF7E45]"
                onClick={() => setMobileMenuOpen(false)}>
                <i className="fas fa-praying-hands mr-2"></i>Prayer
              </Link>
            </li>

            {userRole === "admin" && userId && (
              <li>
                <Link
                  to={`/admin/${userId}/dashboard`}
                  className="block p-2 hover:text-[#FF7E45]"
                  onClick={() => setMobileMenuOpen(false)}>
                  <i className="fas fa-cog mr-2"></i>Admin Dashboard
                </Link>
              </li>
            )}

            {userRole === "user" && userId && (
              <li>
                <Link
                  to={`/user/${userId}/dashboard`}
                  className="block p-2 hover:text-[#FF7E45]"
                  onClick={() => setMobileMenuOpen(false)}>
                  <i className="fas fa-cog mr-2"></i>User Dashboard
                </Link>
              </li>
            )}

          </ul>
          <div className="p-4 border-t">
            {!isAuthenticated ? (
              <Link
                to="/login"
                className="w-full btn btn-primary flex items-start justify-start"
                onClick={() => setMobileMenuOpen(false)}
              >
                <i className="fas fa-sign-in-alt mr-2"></i>Login
              </Link>
            ) : (
              <div className="space-y-2">
                <p className="font-medium flex items-center">
                  <i className="fas fa-user-circle mr-2 text-[#FF7E45]"></i>
                  {userName}
                </p>
                {userId && (
                  <>
                    <Link
                      to={`/profile/${userId}`}
                      className="w-full btn btn-outline flex items-center justify-center hover:text-[#FF7E45]"
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      <i className="fas fa-user mr-2"></i>Profile
                    </Link>
                    {userRole === "user" && (
                      <Link
                        to={`/my-rsvps/${userId}`}
                        className="w-full btn btn-outline flex items-center justify-center hover:text-[#FF7E45]"
                        onClick={() => setMobileMenuOpen(false)}
                      >
                        <i className="fas fa-calendar-check mr-2"></i>My RSVPs
                      </Link>
                    )}
                  </>
                )}
                <button
                  className="w-full btn btn-primary flex items-center justify-center hover:text-[#e74c3c]"
                  onClick={handleLogout}
                >
                  <i className="fas fa-sign-out-alt mr-2"></i>Logout
                </button>
              </div>
            )}
          </div>
        </nav>
      </div>
    </header>
  );
};

export default Header;
) header.jsx,
(
import React, { useState, useEffect } from 'react';

const Loader = ({ 
  type = "spinner", 
  size = "medium", 
  color = "#FF7E45", 
  text = "Loading...",
  fullScreen = false,
  timeout = 0, // Timeout in milliseconds (0 = no timeout)
  onTimeout, // Callback function when timeout occurs
  timeoutMessage = "Taking longer than expected...", // Message to show after timeout
  showTimeoutMessage = true // Whether to show timeout message
}) => {
  const [hasTimedOut, setHasTimedOut] = useState(false);
  const sizeClasses = {
    small: "w-6 h-6",
    medium: "w-12 h-12",
    large: "w-16 h-16",
    xlarge: "w-24 h-24"
  };

  const spinnerStyles = {
    borderColor: `${color} transparent transparent transparent`
  };

  // Handle timeout
  useEffect(() => {
    if (timeout > 0) {
      const timer = setTimeout(() => {
        setHasTimedOut(true);
        if (onTimeout) {
          onTimeout();
        }
      }, timeout);

      return () => clearTimeout(timer);
    }
  }, [timeout, onTimeout]);

  const renderSpinner = () => {
    switch (type) {
      case "dots":
        return (
          <div className="flex space-x-2">
            {[0, 1, 2].map((i) => (
              <div
                key={i}
                className="rounded-full animate-bounce"
                style={{
                  backgroundColor: color,
                  width: size === "small" ? "8px" : 
                         size === "medium" ? "12px" : 
                         size === "large" ? "16px" : "20px",
                  height: size === "small" ? "8px" : 
                          size === "medium" ? "12px" : 
                          size === "large" ? "16px" : "20px",
                  animationDelay: `${i * 0.1}s`
                }}
              />
            ))}
          </div>
        );

      case "ring":
        return (
          <div className={`${sizeClasses[size]} border-4 rounded-full animate-spin`} style={spinnerStyles}></div>
        );

      case "pulse":
        return (
          <div 
            className="rounded-full animate-pulse"
            style={{
              backgroundColor: color,
              width: size === "small" ? "1.5rem" : 
                     size === "medium" ? "2rem" : 
                     size === "large" ? "3rem" : "4rem",
              height: size === "small" ? "1.5rem" : 
                      size === "medium" ? "2rem" : 
                      size === "large" ? "3rem" : "4rem"
            }}
          ></div>
        );

      case "progress":
        return (
          <div className="w-32 bg-gray-200 rounded-full overflow-hidden">
            <div 
              className="h-2 rounded-full animate-progress"
              style={{
                backgroundColor: color,
                width: '0%',
                animation: 'progress 1.5s ease-in-out infinite'
              }}
            ></div>
          </div>
        );

      case "church":
        return (
          <div className="animate-bounce">
            <i 
              className="fas fa-church"
              style={{
                color: color,
                fontSize: size === "small" ? "1.5rem" : 
                         size === "medium" ? "2rem" : 
                         size === "large" ? "3rem" : "4rem"
              }}
            ></i>
          </div>
        );

      case "spinner":
      default:
        return (
          <div className={`${sizeClasses[size]} border-4 rounded-full animate-spin`} style={spinnerStyles}></div>
        );
    }
  };

  const loaderContent = (
    <div className="flex flex-col items-center justify-center space-y-4">
      {renderSpinner()}
      
      {/* Show timeout message if timed out, otherwise show normal text */}
      {hasTimedOut && showTimeoutMessage ? (
        <div className="text-center">
          <p 
            className="font-medium text-orange-600 mb-2"
            style={{ color: '#e67e22' }}
          >
            ⏰ {timeoutMessage}
          </p>
          {text && (
            <p 
              className="text-sm opacity-75"
              style={{ color: color }}
            >
              {text}
            </p>
          )}
        </div>
      ) : (
        text && (
          <p 
            className="text-center font-medium"
            style={{ color: color }}
          >
            {text}
          </p>
        )
      )}
    </div>
  );

  if (fullScreen) {
    return (
      <div className="fixed inset-0 bg-white bg-opacity-90 flex items-center justify-center z-50">
        {loaderContent}
      </div>
    );
  }

  return loaderContent;
};

// Page Loader Component with Timeout
export const PageLoader = ({ 
  timeout = 10000, // 10 seconds default timeout
  onTimeout,
  customMessage 
}) => {
  const [hasTimedOut, setHasTimedOut] = useState(false);

  useEffect(() => {
    if (timeout > 0) {
      const timer = setTimeout(() => {
        setHasTimedOut(true);
        if (onTimeout) {
          onTimeout();
        }
      }, timeout);

      return () => clearTimeout(timer);
    }
  }, [timeout, onTimeout]);

  return (
    <div className="fixed inset-0 bg-gradient-to-br from-[#FF7E45] to-[#F4B942] flex items-center justify-center z-50">
      <div className="text-center">
        <div className="w-20 h-20 border-4 border-white border-t-transparent rounded-full animate-spin mb-4"></div>
        
        {hasTimedOut ? (
          <>
            <h2 className="text-xl font-semibold text-white mb-2">Still Working...</h2>
            <p className="text-white/80">
              {customMessage || "This is taking longer than expected. Please check your connection."}
            </p>
            <button 
              onClick={() => window.location.reload()}
              className="mt-4 px-4 py-2 bg-white text-[#FF7E45] rounded-lg hover:bg-gray-100 transition-colors"
            >
              Refresh Page
            </button>
          </>
        ) : (
          <>
            <h2 className="text-xl font-semibold text-white">St Michael's Church</h2>
            <p className="text-white/80 mt-2">Loading your spiritual journey...</p>
          </>
        )}
      </div>
    </div>
  );
};

// Content Loader Component (Skeleton) with Timeout
export const ContentLoader = ({ 
  type = "card", 
  count = 1,
  timeout = 0,
  onTimeout 
}) => {
  const [hasTimedOut, setHasTimedOut] = useState(false);

  useEffect(() => {
    if (timeout > 0) {
      const timer = setTimeout(() => {
        setHasTimedOut(true);
        if (onTimeout) {
          onTimeout();
        }
      }, timeout);

      return () => clearTimeout(timer);
    }
  }, [timeout, onTimeout]);

  const renderSkeleton = () => {
    if (hasTimedOut) {
      return (
        <div className="text-center py-8">
          <div className="text-gray-400 mb-2">
            <i className="fas fa-exclamation-triangle text-2xl"></i>
          </div>
          <p className="text-gray-600 text-sm">Content is taking longer to load</p>
        </div>
      );
    }

    switch (type) {
      case "card":
        return (
          <div className="bg-white rounded-lg shadow-md p-6 animate-pulse">
            <div className="h-48 bg-gray-200 rounded-md mb-4"></div>
            <div className="h-4 bg-gray-200 rounded mb-3"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
            <div className="h-10 bg-gray-200 rounded"></div>
          </div>
        );
      
      case "text":
        return (
          <div className="space-y-3 animate-pulse">
            <div className="h-4 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
            <div className="h-4 bg-gray-200 rounded w-4/6"></div>
          </div>
        );
      
      case "list":
        return (
          <div className="space-y-4 animate-pulse">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gray-200 rounded-full"></div>
                <div className="flex-1">
                  <div className="h-4 bg-gray-200 rounded mb-2"></div>
                  <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                </div>
              </div>
            ))}
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <>
      {[...Array(count)].map((_, index) => (
        <React.Fragment key={index}>
          {renderSkeleton()}
        </React.Fragment>
      ))}
    </>
  );
};

// CSS for animations (add this to your global CSS)
export const loaderStyles = `
  @keyframes progress {
    0% { width: 0%; }
    50% { width: 70%; }
    100% { width: 100%; }
  }
  
  .animate-progress {
    animation: progress 1.5s ease-in-out infinite;
  }
`;

export default Loader;
) loader.jsx,
(
import GoogleAuthButton from '../utils/googleAuth';
import FacebookAuthButton from '../utils/facebookAuth';
import { useSocialAuth } from '../contexts/SocialAuthContext';
import Loader from './Loader';

const SocialLoginButtons = ({ onSuccess, onError, loading: externalLoading }) => {
  const { isGoogleReady, isFacebookReady, loading: authLoading } = useSocialAuth();

  const handleSocialSuccess = (userData) => {
    onSuccess(userData);
  };

  const handleSocialError = (error) => {
    console.error('Social login error:', error);
    alert(error.message || error);
    onError(error.message || error);
  };

  if (authLoading || externalLoading) {
    return <Loader type="spinner" text="Initializing social login..." />;
  }

  return (
    <div className="social-login-buttons space-y-4">
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <div className="w-full border-t border-gray-300"></div>
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="px-2 bg-white text-gray-500">Or continue with</span>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {isGoogleReady && (
          <GoogleAuthButton
            onSuccess={handleSocialSuccess}
            onError={handleSocialError}
            text="Sign in with Google"
          />
        )}
        
        {isFacebookReady && (
          <FacebookAuthButton
            onSuccess={handleSocialSuccess}
            onError={handleSocialError}
            text="Sign in with Facebook"
          />
        )}
      </div>

      {(!isGoogleReady || !isFacebookReady) && (
        <div className="text-center text-sm text-gray-500">
          <p>Some social login options may be temporarily unavailable.</p>
        </div>
      )}
    </div>
  );
};

export default SocialLoginButtons;
)socialloginbuttons.jsx,
],
constants[
(
// constants/endpoints.js

// Your existing admin endpoints (updated to match actual backend)
export const ADMIN_ENDPOINTS = {
  DASHBOARD: {
    STATS: '/admin/dashboard/stats',
    ACTIVITY: '/admin/activity/recent',
  },
  USERS: {
    BASE: '/users/admin',
    CREATE: '/users/admin/create',
    UPDATE: (id) => `/users/admin/update/${id}`,
    DELETE: (id) => `/users/admin/delete/${id}`,
    ROLES: '/users/admin/roles',
  },
  DONATIONS: {
    BASE: '/donations/admin/all',
    UPDATE: (id) => `/donations/admin/update/${id}`,
    STATS: '/donations/admin/stats',
    RECENT: '/donations/admin/recent',
    EXPORT: '/donations/admin/export',
  },
  PRAYER_REQUESTS: {
    BASE: '/prayers/admin/all',
    UPDATE: (id) => `/prayers/admin/update/${id}`,
    DELETE: (id) => `/prayers/admin/delete/${id}`,
    STATS: '/prayers/admin/stats',
  },
  EVENTS: {
    BASE: '/events',
    CREATE: '/events/admin/create',
    UPDATE: (id) => `/events/admin/update/${id}`,
    DELETE: (id) => `/events/admin/delete/${id}`,
  },
  SERMONS: {
    BASE: '/sermons',
    CREATE: '/sermons/admin',
    UPDATE: (id) => `/sermons/admin/${id}`,
    DELETE: (id) => `/sermons/admin/${id}`,
    STATS: '/sermons/admin/stats',
    LIVE: '/sermons/live',
    LIVE_START: '/sermons/admin/live/start',
    LIVE_STOP: '/sermons/admin/live/stop',
  },
  BLOG: {
    BASE: '/blog/admin/all',
    CREATE: '/blog/admin/create',
    UPDATE: (id) => `/blog/admin/update/${id}`,
    DELETE: (id) => `/blog/admin/delete/${id}`,
    CATEGORIES: '/blog/admin/categories',
  },
  MINISTRIES: {
    BASE: '/ministries',
    CREATE: '/ministries/admin/create',
    UPDATE: (id) => `/ministries/admin/update/${id}`,
    DELETE: (id) => `/ministries/admin/delete/${id}`,
    CATEGORIES: '/ministries/categories',
    VOLUNTEERS: (id) => `/ministries/admin/${id}/volunteers`,
    STATS: '/ministries/admin/stats',
  },
  TESTIMONIALS: {
    ALL: '/testimonials/admin/all',
    CREATE: '/testimonials/admin/create',
    UPDATE: (id) => `/testimonials/admin/update/${id}`,
    DELETE: (id) => `/testimonials/admin/delete/${id}`,
    STATS: '/testimonials/admin/stats'
  },
  SETTINGS: {
    BASE: '/settings',
    UPDATE: '/settings/update',
    RESET: '/settings/reset',
  },
  VOLUNTEERS: {
    BASE: '/volunteers/admin/all',
    STATS: '/volunteers/admin/stats',
    BY_ID: (id) => `/volunteers/admin/${id}`,
    UPDATE_STATUS: (id) => `/volunteers/admin/${id}/status`,
  }
};

// Frontend-friendly endpoints that map to your actual backend endpoints
export const FRONTEND_ENDPOINTS = {

  // Public read endpoints (for pages)
  PUBLIC: {
    MINISTRIES: '/api/ministries',
    MINISTRIES_VOLUNTEER: '/api/ministries/volunteer-opportunities',
    MINISTRIES_USER: '/api/ministries/user/ministries',
    MINISTRIES_VOLUNTEER_ACTION: (id) => `/api/ministries/${id}/volunteer`,
    MINISTRIES_CONTACT: (id) => `/api/ministries/${id}/contact`,

    SERMONS: '/api/sermons',
    SERMONS_FEATURED: '/api/sermons/featured',
    SERMONS_LIVE: '/api/sermons/live',
    SERMONS_CATEGORIES: '/api/sermons/categories',
    SERMONS_FAVORITES: '/api/sermons/favorites',
    SERMONS_FAVORITE_ACTION: (id) => `/api/sermons/favorites/${id}`,

    EVENTS: '/api/events',
    EVENTS_UPCOMING: '/api/events/upcoming',
    USER_RSVPS: '/api/events/user/rsvps',
    USER_FAVORITES: '/api/events/user/favorites',
    EVENT_RSVP: (id) => `/api/events/${id}/rsvp`,
    EVENT_FAVORITE: (id) => `/api/events/${id}/favorite`,

    TESTIMONIALS: '/testimonials',
    TESTIMONIALS_APPROVED: '/testimonials/approved',
    TESTIMONIALS_VIDEOS: '/testimonials/videos',
    TESTIMONIALS_CATEGORIES: '/testimonials/categories',

    PRAYERS: '/api/prayers',
    PRAYERS_TEAM: '/api/prayers/team',
    PRAYERS_MEETINGS: '/api/prayers/meetings',
    PRAYER_ACTION: (id) => `/api/prayers/${id}/pray`,

    BLOG: '/api/blog/posts',
    BLOG_CATEGORIES: '/api/blog/categories',
    BLOG_FAVORITES: '/api/blog/favorites',
    BLOG_FAVORITE_ACTION: (id) => `/api/blog/favorites/${id}`,

    SERVICE_TIMES: '/api/analytics/service-times',
    CHURCH_STATS: '/api/analytics/stats',
    HERO_CONTENT: '/api/analytics/hero-content',
    LIVE_STATUS: '/api/analytics/live-status',

    DONATIONS: '/api/donations',
    DONATIONS_PAYMENT_INTENT: '/api/donations/payment-intent',

    SOCIAL_SUCCESS: '/auth/success',
    SOCIAL_FAILURE: '/login?error=auth_failed'
  },

  // Admin write endpoints (mapped to your actual backend endpoints)
  ADMIN: {
    MINISTRIES: {
      BASE: ADMIN_ENDPOINTS.MINISTRIES.BASE,
      CREATE: ADMIN_ENDPOINTS.MINISTRIES.CREATE,
      UPDATE: ADMIN_ENDPOINTS.MINISTRIES.UPDATE,
      DELETE: ADMIN_ENDPOINTS.MINISTRIES.DELETE,
      CATEGORIES: ADMIN_ENDPOINTS.MINISTRIES.CATEGORIES,
      VOLUNTEERS: ADMIN_ENDPOINTS.MINISTRIES.VOLUNTEERS,
      STATS: ADMIN_ENDPOINTS.MINISTRIES.STATS,
    },
    SERMONS: {
      CREATE: ADMIN_ENDPOINTS.SERMONS.CREATE,
      UPDATE: ADMIN_ENDPOINTS.SERMONS.UPDATE,
      DELETE: ADMIN_ENDPOINTS.SERMONS.DELETE,
      STATS: ADMIN_ENDPOINTS.SERMONS.STATS,
      LIVE: ADMIN_ENDPOINTS.SERMONS.LIVE,
      LIVE_START: ADMIN_ENDPOINTS.SERMONS.LIVE_START,
      LIVE_STOP: ADMIN_ENDPOINTS.SERMONS.LIVE_STOP,
    },
    EVENTS: {
      CREATE: ADMIN_ENDPOINTS.EVENTS.CREATE,
      UPDATE: ADMIN_ENDPOINTS.EVENTS.UPDATE,
      DELETE: ADMIN_ENDPOINTS.EVENTS.DELETE,
    },
    TESTIMONIALS: {
      CREATE: ADMIN_ENDPOINTS.TESTIMONIALS.CREATE,
      UPDATE: ADMIN_ENDPOINTS.TESTIMONIALS.UPDATE,
      DELETE: ADMIN_ENDPOINTS.TESTIMONIALS.DELETE,
      ALL: ADMIN_ENDPOINTS.TESTIMONIALS.BASE,
      STATS: ADMIN_ENDPOINTS.TESTIMONIALS.STATS,
    },
    BLOG: {
      CREATE: ADMIN_ENDPOINTS.BLOG.CREATE,
      UPDATE: ADMIN_ENDPOINTS.BLOG.UPDATE,
      DELETE: ADMIN_ENDPOINTS.BLOG.DELETE,
      CATEGORIES: ADMIN_ENDPOINTS.BLOG.CATEGORIES,
      ALL: ADMIN_ENDPOINTS.BLOG.BASE,
    },
    PRAYERS: {
      UPDATE: ADMIN_ENDPOINTS.PRAYER_REQUESTS.UPDATE,
      DELETE: ADMIN_ENDPOINTS.PRAYER_REQUESTS.DELETE,
      ALL: ADMIN_ENDPOINTS.PRAYER_REQUESTS.BASE,
      STATS: ADMIN_ENDPOINTS.PRAYER_REQUESTS.STATS,
    },
    DONATIONS: {
      BASE: ADMIN_ENDPOINTS.DONATIONS.BASE,
      UPDATE: ADMIN_ENDPOINTS.DONATIONS.UPDATE,
      STATS: ADMIN_ENDPOINTS.DONATIONS.STATS,
      RECENT: ADMIN_ENDPOINTS.DONATIONS.RECENT,
      ALL: ADMIN_ENDPOINTS.DONATIONS.BASE,
      EXPORT: ADMIN_ENDPOINTS.DONATIONS.EXPORT,
      RECEIPT: (id) => `/api/donations/receipt/${id}`,
    },
    USERS: {
      BASE: ADMIN_ENDPOINTS.USERS.BASE,
      CREATE: ADMIN_ENDPOINTS.USERS.CREATE,
      UPDATE: ADMIN_ENDPOINTS.USERS.UPDATE,
      DELETE: ADMIN_ENDPOINTS.USERS.DELETE,
      ROLES: ADMIN_ENDPOINTS.USERS.ROLES,
    },
    VOLUNTEERS: {
      ALL: ADMIN_ENDPOINTS.VOLUNTEERS.BASE,
      STATS: ADMIN_ENDPOINTS.VOLUNTEERS.STATS,
      BY_ID: ADMIN_ENDPOINTS.VOLUNTEERS.BY_ID,
      UPDATE_STATUS: ADMIN_ENDPOINTS.VOLUNTEERS.UPDATE_STATUS,
    },
    DASHBOARD: {
      STATS: ADMIN_ENDPOINTS.DASHBOARD.STATS,
      ACTIVITY: ADMIN_ENDPOINTS.DASHBOARD.ACTIVITY,
    }
  },
  /*    SOCIAL: SOCIAL_AUTH_ENDPOINTS,*/

};

// Auth endpoints
export const AUTH_ENDPOINTS = {
  LOGIN: '/auth/login',
  REGISTER: '/auth/register',
  VALIDATE_RESET_TOKEN: '/auth/validate-reset-token',
  CHANGE_PASSWORD: '/auth/change-password',
  FORGOT_PASSWORD: '/auth/forgot-password',
  RESET_PASSWORD: '/auth/reset-password',
  VERIFY_EMAIL: '/auth/verify-email',
  RESEND_VERIFICATION: '/auth/resend-verification',
  SOCIAL_LOGIN: (provider) => `/auth/${provider}`,
  ME: '/auth/me',
  LOGOUT: '/auth/logout',
};

// Payment endpoints
export const PAYMENT_ENDPOINTS = {
  CREATE_DONATION: '/donations/create',
  CREATE_PAYMENT_INTENT: '/donations/create-payment-intent',
  CONFIRM_PAYMENT: '/donations/confirm-payment',
  DONATIONS_RECEIPT: (id) => `/api/donations/receipt/${id}`,
};

// constants/endpoints.js - Add to your existing file

export const SOCIAL_AUTH_ENDPOINTS = {
  // OAuth Initiation (redirect to backend)
  GOOGLE: '/auth/social/google',
  FACEBOOK: '/auth/social/facebook',

  // Social Account Management (API calls)
  LINK_ACCOUNT: '/auth/social/link',
  UNLINK_ACCOUNT: (provider) => `/auth/social/unlink/${provider}`,
  GET_ACCOUNTS: '/auth/social/accounts',

  // Direct token validation (for client-side auth)
  VALIDATE_GOOGLE: '/auth/social/validate/google',
  VALIDATE_FACEBOOK: '/auth/social/validate/facebook',

  // Frontend Redirect URLs
  SUCCESS_REDIRECT: (token, userId) =>
    `${window.location.origin}/auth/success?token=${token}&userId=${userId}`,
  FAILURE_REDIRECT: (error) =>
    `${window.location.origin}/login?error=${error}`
};
)API.js,
],
contexts[
(
import React, { createContext, useContext, useState, useEffect } from 'react';
import { initGoogleAuth, initFacebookAuth } from '../utils/authUtils';

const SocialAuthContext = createContext();

export const useSocialAuth = () => {
  const context = useContext(SocialAuthContext);
  if (!context) {
    throw new Error('useSocialAuth must be used within a SocialAuthProvider');
  }
  return context;
};

export const SocialAuthProvider = ({ children }) => {
  const [isGoogleReady, setIsGoogleReady] = useState(false);
  const [isFacebookReady, setIsFacebookReady] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initializeAuth = async () => {
      try {
        setLoading(true);
        
        // Check if environment variables are set
        const googleClientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;
        const facebookAppId = import.meta.env.VITE_FACEBOOK_APP_ID;
        
        if (!googleClientId && !facebookAppId) {
          console.warn('No social auth environment variables found');
          setLoading(false);
          return;
        }

        // Initialize providers that have environment variables
        const promises = [];
        
        if (googleClientId) {
          promises.push(initGoogleAuth(googleClientId));
        } else {
          setIsGoogleReady(false);
        }
        
        if (facebookAppId) {
          promises.push(initFacebookAuth(facebookAppId));
        } else {
          setIsFacebookReady(false);
        }

        const results = await Promise.allSettled(promises);
        
        if (googleClientId) {
          setIsGoogleReady(results[0].status === 'fulfilled' && results[0].value);
        }
        
        if (facebookAppId) {
          setIsFacebookReady(results[facebookAppId ? 1 : 0].status === 'fulfilled' && results[facebookAppId ? 1 : 0].value);
        }
      } catch (error) {
        console.error('Failed to initialize social auth:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  const value = {
    isGoogleReady,
    isFacebookReady,
    loading
  };

  return (
    <SocialAuthContext.Provider value={value}>
      {children}
    </SocialAuthContext.Provider>
  );
};

export default SocialAuthContext;
)socialauthcontext.jsx,
],
hooks[
(
import { useEffect, useState } from 'react';
import { isAdmin, getAdminSessionTime, isAuthenticated } from '../utils/auth';

export const useAdmin = () => {
  const [isUserAdmin, setIsUserAdmin] = useState(false);
  const [sessionTime, setSessionTime] = useState(0);
  const [adminStatus, setAdminStatus] = useState(false);

  useEffect(() => {
    const checkAdminStatus = () => {
      const adminStatus = isAdmin();
      const remainingTime = getAdminSessionTime();
      const confirmAdminStatus = isAuthenticated();
      setIsUserAdmin(adminStatus);
      setSessionTime(remainingTime);
      setAdminStatus(confirmAdminStatus);
    };

    checkAdminStatus();

    // Update session time every minute
    const interval = setInterval(checkAdminStatus, 60000);

    return () => clearInterval(interval);
  }, []);

  return { isAdmin: isUserAdmin, sessionTime, adminStatus };
};
)useAdmin.js,
(
// src/hooks/useAuth.js
import { useState, useEffect, useCallback, useContext, createContext } from 'react';
import { authService } from '../services/apiService';
import {
  setAuthToken,
  getAuthToken,
  isTokenValid,
  getUserFromToken,
  checkAndRefreshAuthToken,
  clearAllAuthData,
  getTokenExpiryTime
} from '../utils/auth';

const AuthContext = createContext();

const DEFAULT_USER = { id: null, name: null, email: null, role: 'guest' };

// Auth Provider Component
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(DEFAULT_USER);
  const [token, setToken] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  const syncFromToken = useCallback(async (existingToken) => {
    if (!existingToken) {
      clearAllAuthData();
      setUser(DEFAULT_USER);
      setToken(null);
      return false;
    }

    try {
      let validToken = existingToken;

      // Refresh token if invalid or expiring soon
      if (!isTokenValid(existingToken) || getTokenExpiryTime(existingToken) < 300) {
        const refreshed = await checkAndRefreshAuthToken();
        if (!refreshed) {
          clearAllAuthData();
          setUser(DEFAULT_USER);
          setToken(null);
          return false;
        }
        validToken = getAuthToken();
      }

      const payload = getUserFromToken(validToken);
      setUser({
        id: payload?.userId || payload?.id || null,
        name: payload?.name || null,
        email: payload?.email || null,
        role: (payload?.role || 'user').trim().toLowerCase()
      });
      setToken(validToken);
      return true;
    } catch (err) {
      console.error('syncFromToken error:', err);
      clearAllAuthData();
      setUser(DEFAULT_USER);
      setToken(null);
      return false;
    }
  }, []);

  // Initialize auth on mount
  useEffect(() => {
    const initialize = async () => {
      try {
        const existingToken = getAuthToken();
        await syncFromToken(existingToken);
      } catch (err) {
        console.error('Auth initialization failed:', err);
        setError('Authentication initialization failed');
        setUser(DEFAULT_USER);
        setToken(null);
      } finally {
        setIsLoading(false);
      }
    };

    initialize();

    // Periodic token refresh every 5 minutes
    const interval = setInterval(async () => {
      const existingToken = getAuthToken();
      if (existingToken) {
        await syncFromToken(existingToken);
      }
    }, 300000);

    return () => clearInterval(interval);
  }, [syncFromToken]);

  // Login function
  const login = async (credentials) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await authService.login(credentials);
      const data = response?.data ?? response;

      if (!data?.token) {
        throw new Error(data?.message || 'Invalid login response from server');
      }

      // Store the token
      setAuthToken(data.token);

      // Extract user data
      const userData = data.user || getUserFromToken(data.token) || {};

      const updatedUser = {
        id: userData?.userId || userData?.id || data.userId || data.id || `user-${Date.now()}`,
        name: userData?.name || data.name || '',
        email: userData?.email || data.email || '',
        role: (userData?.role || data.role || 'user').trim().toLowerCase()
      };

      // UPDATE STATE AND STORAGE
      setUser(updatedUser);
      setStoredUser(updatedUser); // ← THIS IS CRITICAL!
      setToken(data.token);

      return { success: true, user: updatedUser };
    } catch (err) {
      console.error('Login failed:', err);
      const errorMessage = err.response?.data?.message || err.message || 'Login failed';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setIsLoading(false);
    }
  };

  // Logout function
  const logout = async () => {
    try {
      await authService.logout().catch(() => { });
    } finally {
      clearAllAuthData();
      setUser(DEFAULT_USER);
      setToken(null);
    }
  };

  // Manual refresh token
  const refreshToken = async () => {
    const existingToken = getAuthToken();
    if (!existingToken) return false;
    return syncFromToken(existingToken);
  };

  // Context value
  const contextValue = {
    user,
    token,
    isLoading,
    error,
    login,
    logout,
    refreshToken,
    setUser // Added setUser for external updates if needed
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use auth context
const useAuth = () => {
  const context = useContext(AuthContext);

  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }

  return context;
};

export default useAuth;
)useAuth.jsx,
(
import { useState } from 'react';

export const useForm = (initialValues) => {
  const [values, setValues] = useState(initialValues);
  
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setValues(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };
  
  const resetForm = () => setValues(initialValues);
  
  return { values, handleChange, resetForm, setValues };
};
)useForm.js
],
models[
(
// API Response Models
export class BaseApiResponse {
  constructor(data = {}) {
    this.success = data.success || false;
    this.data = data.data || null;
    this.message = data.message || '';
    this.error = data.error || null;
  }
}

export class PaginationMeta {
  constructor(data = {}) {
    this.page = data.page || 1;
    this.limit = data.limit || 10;
    this.total = data.total || 0;
    this.totalPages = data.totalPages || 0;
    this.hasNext = data.hasNext || false;
    this.hasPrev = data.hasPrev || false;
  }
}
)API.js,
(
// models/BlogPost.js
export class BlogPost {
  constructor(data = {}) {
    this._id = data._id || null;
    this.title = data.title || '';
    this.excerpt = data.excerpt || '';
    this.content = data.content || '';
    this.category = data.category || 'announcements';
    this.author = data.author || '';
    this.imageUrl = data.imageUrl || '';
    this.date = data.date || new Date();
    this.readTime = data.readTime || '5 min read';
    this.tags = data.tags || [];
    this.status = data.status || 'published';
    this.views = data.views || 0;
  }
}
)blogpost.js,
(
// models/Donation.js
export class Donation {
  constructor(data = {}) {
    this._id = data._id || null;
    this.userId = data.userId || null;
    this.amount = data.amount || 0;
    this.currency = data.currency || ['USD', 'NGN', 'EUR'];
    this.frequency = data.frequency || 'one-time';
    this.status = data.status || 'pending';
    this.stripePaymentIntentId = data.stripePaymentIntentId || null;
    this.donorName = data.donorName || '';
    this.donorEmail = data.donorEmail || '';
    this.date = data.date || new Date();
    this.receiptSent = data.receiptSent || false;
  }
}
)donation.js,
(
// models/Event.js
export class Event {
  constructor(data = {}) {
    this._id = data._id || null;
    this.title = data.title || '';
    this.description = data.description || '';
    this.startTime = data.startTime || new Date();
    this.endTime = data.endTime || new Date();
    this.location = data.location || '';
    this.category = data.category || 'service';
    this.imageUrl = data.imageUrl || '';
    this.capacity = data.capacity || 0;
    this.registered = data.registered || 0;
    this.status = data.status || 'scheduled';
  }
}
)events.js,
(
// models/Favorite.js
export class Favorite {
  constructor(data = {}) {
    this._id = data._id || null;
    this.userId = data.userId || null;
    this.itemType = data.itemType || ''; // 'sermon', 'event', 'blog', 'ministry'
    this.itemId = data.itemId || null;
    this.createdAt = data.createdAt || new Date();
  }
}
)favorites.js,
(
// models/Ministry.js
export class Ministry {
  constructor(data = {}) {
    this._id = data._id || null;
    this.name = data.name || '';
    this.description = data.description || '';
    this.icon = data.icon || 'users';
    this.imageUrl = data.imageUrl || '';
    this.leaders = data.leaders || [];
    this.programs = data.programs || [];
    this.volunteerNeeds = data.volunteerNeeds || [];
    this.contactEmail = data.contactEmail || '';
    this.status = data.status || 'active';
  }
}
)ministry.js,
(
// models/PrayerRequest.js
export class PrayerRequest {
  constructor(data = {}) {
    this._id = data._id || null;
    this.userId = data.userId || null;
    this.request = data.request || '';
    this.isPrivate = data.isPrivate || false;
    this.name = data.name || 'Anonymous';
    this.email = data.email || '';
    this.prayerCount = data.prayerCount || 0;
    this.userPrayed = data.userPrayed || false;
    this.notifyOnPray = data.notifyOnPray || false;
    this.status = data.status || 'pending';
    this.date = data.date || new Date();
  }
}
)prayerrequest.js,
(
// models/RSVP.js
export class RSVP {
  constructor(data = {}) {
    this._id = data._id || null;
    this.userId = data.userId || null;
    this.eventId = data.eventId || null;
    this.status = data.status || 'confirmed';
    this.guests = data.guests || 1;
    this.dietaryRestrictions = data.dietaryRestrictions || '';
    this.createdAt = data.createdAt || new Date();
  }
}
)rsvps.js,
(
// models/Sermon.js
export class Sermon {
  constructor(data = {}) {
    this._id = data._id || null;
    this.title = data.title || '';
    this.speaker = data.speaker || '';
    this.description = data.description || '';
    this.category = data.category || 'faith';
    this.videoUrl = data.videoUrl || '';
    this.imageUrl = data.imageUrl || '';
    this.date = data.date || new Date();
    this.duration = data.duration || '00:00';
    this.views = data.views || 0;
    this.likes = data.likes || 0;
    this.status = data.status || 'published';
  }
}
)sermon.js,
(
// models/Testimonial.js
export class Testimonial {
  constructor(data) {
    this.id = data._id || data.id;
    this.name = data.name;
    this.email = data.email;
    this.content = data.content;
    this.imageUrl = data.imageUrl;
    this.relationship = data.relationship;
    this.yearsInChurch = data.yearsInChurch;
    this.allowSharing = data.allowSharing;
    this.allowContact = data.allowContact;
    this.status = data.status;
    this.category = data.category;
    this.rating = data.rating;
    this.isVideo = data.isVideo;
    this.videoUrl = data.videoUrl;
    this.featuredAt = data.featuredAt;
    this.createdAt = data.createdAt;
  }
}
)testimonials.js,
(
// models/User.js
export class User {
  constructor(data = {}) {
    this._id = data._id || null;
    this.id = data.id || data._id || null;
    this.email = data.email || '';
    this.name = data.name || '';
    this.firstName = data.firstName || '';
    this.lastName = data.lastName || '';
    this.role = data.role || 'user';
    this.isLoggedIn = data.isLoggedIn || false;
    this.emailVerified = data.emailVerified || false;
    this.profileImage = data.profileImage || data.avatar || null;
    this.familyMembers = data.familyMembers || [];
    this.communicationPreferences = data.communicationPreferences || {
      emailNotifications: true,
      smsNotifications: false,
      newsletter: true,
      eventReminders: true,
      prayerUpdates: true
    };
    this.memberSince = data.memberSince || new Date();
    this.membershipStatus = data.membershipStatus || 'active';
    this.smallGroup = data.smallGroup || '';
    this.volunteerStats = data.volunteerStats || {
      totalHours: 0,
      completedTrainings: [],
      activeApplications: 0
    };
    this.createdAt = data.createdAt || new Date();
  }

  get fullName() {
    if (this.firstName && this.lastName) {
      return `${this.firstName} ${this.lastName}`;
    }
    return this.name;
  }

  get isAdmin() {
    return this.role === 'admin';
  }

  get isModerator() {
    return this.role === 'moderator' || this.role === 'admin';
  }

  get isUser() {
    return this.role === 'user';
  }

  get isAuthenticated() {
    return !!this.id && this.isLoggedIn;
  }
}
)user.js,
(
// models/Volunteer.js
export class Volunteer {
  constructor(data = {}) {
    this._id = data._id || null;
    this.userId = data.userId || null;
    this.ministryId = data.ministryId || null;
    this.interests = data.interests || [];
    this.availability = data.availability || [];
    this.experience = data.experience || '';
    this.message = data.message || '';
    this.status = data.status || 'pending';
    this.createdAt = data.createdAt || new Date();
  }
}
)volunteer.js,
],
pages[
(
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { apiClient } from '../utils/api';
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { useForm } from '../hooks/useForm';
import  useAuth  from '../hooks/useAuth';
import { ADMIN_ENDPOINTS } from '../constants/API';
import { useAdmin } from '../hooks/useAdmin'; // Import your useAdmin hook

/*====================================== Reusable Components ======================================*/

// StatCard Component
const StatCard = ({ title, value, change, changeType, icon, iconBgColor, iconTextColor }) => (
  <div className="bg-white rounded-lg shadow-md p-4 md:p-6">
    <div className="flex justify-between items-center">
      <div className="flex-1">
        <p className="text-xs md:text-sm text-gray-500 mb-1">{title}</p>
        <h3 className="text-xl md:text-3xl font-bold">{value}</h3>
        <p className={`text-xs ${changeType === 'increase' ? 'text-green-600' : 'text-red-600'} mt-1 md:mt-2`}>
          <i className={`fas ${changeType === 'increase' ? 'fa-arrow-up' : 'fa-arrow-down'} mr-1`}></i>
          {change}
        </p>
      </div>
      <div className={`w-8 h-8 md:w-12 md:h-12 ${iconBgColor} rounded-full flex items-center justify-center ml-2`}>
        <i className={`fas ${icon} ${iconTextColor} text-lg md:text-xl`}></i>
      </div>
    </div>
  </div>
);


// SidebarButton Component
const SidebarButton = ({ label, icon, tabName, activeTab, onClick }) => (
  <li>
    <button
      className={`w-full text-left px-4 py-2 rounded-md flex items-center ${activeTab === tabName ? 'bg-[#FF7E45] text-white' : 'hover:bg-gray-100'}`}
      onClick={() => onClick(tabName)}
      aria-current={activeTab === tabName ? 'page' : undefined}
      aria-label={`${label} tab`}
    >
      <i className={`${icon} mr-3`} aria-hidden="true"></i>
      <span>{label}</span>
    </button>
  </li>
);


// ActivityItem Component
const ActivityItem = ({ icon, bgColor, text, time }) => (
  <div className="flex items-start">
    <div className={`w-10 h-10 ${bgColor} rounded-full flex items-center justify-center mr-3 flex-shrink-0`}>
      <i className={`fas ${icon}`}></i>
    </div>
    <div>
      <p className="font-medium">{text}</p>
      <p className="text-sm text-gray-500">{time}</p>
    </div>
  </div>
);

// DataTable Component
const DataTable = ({ columns, data, onEdit, onDelete, emptyMessage, actions = true }) => {
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full">
        <thead>
          <tr className="border-b">
            {columns.map(column => (
              <th key={column.key} className="py-3 px-4 text-left">
                {column.title}
              </th>
            ))}
            {actions && <th className="py-3 px-4 text-left">Actions</th>}
          </tr>
        </thead>
        <tbody>
          {data.length > 0 ? (
            data.map(item => (
              <tr key={item._id || item.id} className="border-b">
                {columns.map(column => (
                  <td key={column.key} className="py-3 px-4">
                    {column.render ? column.render(item) : item[column.key]}
                  </td>
                ))}
                {actions && (
                  <td className="py-3 px-4">
                    <button 
                      onClick={() => onEdit(item)} 
                      className="text-gray-500 hover:text-[#FF7E45] mr-2"
                      aria-label={`Edit ${item.title || item.name}`}
                    >
                      <i className="fas fa-edit"></i>
                    </button>
                    <button 
                      onClick={() => onDelete(item)} 
                      className="text-gray-500 hover:text-red-500"
                      aria-label={`Delete ${item.title || item.name}`}
                    >
                      <i className="fas fa-trash-alt"></i>
                    </button>
                  </td>
                )}
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={actions ? columns.length + 1 : columns.length} className="py-4 text-center text-gray-500">
                {emptyMessage}
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-2xl',
    lg: 'max-w-4xl',
    xl: 'max-w-6xl'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div 
        className={`bg-white rounded-lg w-full ${sizeClasses[size]} max-h-[90vh] overflow-y-auto`}
        role="dialog"
        aria-modal="true"
        aria-labelledby="modal-title"
      >
        <div className="flex justify-between items-center p-6 border-b">
          <h2 id="modal-title" className="text-xl font-bold">{title}</h2>
          <button 
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700"
            aria-label="Close modal"
          >
            <i className="fas fa-times"></i>
          </button>
        </div>
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};

const ConfirmationModal = ({ isOpen, onClose, onConfirm, title, message }) => {
  if (!isOpen) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={title} size="sm">
      <div className="space-y-4">
        <p className="text-gray-600">{message}</p>
        <div className="flex justify-end space-x-2">
          <button onClick={onClose} className="btn btn-outline">
            Cancel
          </button>
          <button onClick={onConfirm} className="btn btn-danger">
            Confirm
          </button>
        </div>
      </div>
    </Modal>
  );
};

/* ====================================== Components for Each Tab ====================================== */

// Users Management Component
const UsersManagement = ({ users, onUpdateUser, onDeleteUser, onCreateUser }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const alert = useAlert();

  const { values, handleChange, setValues, resetForm } = useForm({
    name: '',
    email: '',
    phone: '',
    role: 'user',
    status: 'active',
    joinDate: new Date().toISOString().split('T')[0],
    address: '',
    notes: ''
  });

  useEffect(() => {
    if (selectedUser) {
      setValues({
        name: selectedUser.name || '',
        email: selectedUser.email || '',
        phone: selectedUser.phone || '',
        role: selectedUser.role || 'user',
        status: selectedUser.status || 'active',
        joinDate: selectedUser.joinDate ? new Date(selectedUser.joinDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
        address: selectedUser.address || '',
        notes: selectedUser.notes || ''
      });
    }
  }, [selectedUser, setValues]);

  const filteredUsers = users.filter(user => {
    const matchesSearch = user.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         user.email?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesRole = roleFilter === 'all' || user.role === roleFilter;
    const matchesStatus = statusFilter === 'all' || user.status === statusFilter;
    return matchesSearch && matchesRole && matchesStatus;
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedUser) {
        await onUpdateUser(selectedUser._id, values);
      } else {
        await onCreateUser(values);
      }
      setShowCreateModal(false);
      setSelectedUser(null);
      resetForm();
      alert.success(`User ${selectedUser ? 'updated' : 'created'} successfully`);
    } catch (error) {
      alert.error(`Failed to ${selectedUser ? 'update' : 'create'} user`);
    }
  };

  const userColumns = [
    { 
      key: 'user', 
      title: 'User', 
      render: (user) => (
        <div className="flex items-center">
          <div className="h-10 w-10 flex-shrink-0 bg-gray-300 rounded-full flex items-center justify-center">
            {user.name?.charAt(0)?.toUpperCase() || 'U'}
          </div>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">{user.name}</div>
            <div className="text-sm text-gray-500">Joined: {new Date(user.createdAt).toLocaleDateString()}</div>
          </div>
        </div>
      )
    },
    { key: 'email', title: 'Email' },
    { 
      key: 'role', 
      title: 'Role', 
      render: (user) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          user.role === 'admin' ? 'bg-purple-100 text-purple-800' :
          user.role === 'moderator' ? 'bg-blue-100 text-blue-800' :
          user.role === 'staff' ? 'bg-green-100 text-green-800' :
          'bg-gray-100 text-gray-800'
        }`}>
          {user.role}
        </span>
      )
    },
    { 
      key: 'status', 
      title: 'Status', 
      render: (user) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          user.status === 'active' 
            ? 'bg-green-100 text-green-800' 
            : user.status === 'inactive'
            ? 'bg-yellow-100 text-yellow-800'
            : 'bg-red-100 text-red-800'
        }`}>
          {user.status}
        </span>
      )
    },
  ];

  return (
    <div>
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
        <h2 className="text-2xl font-bold">Users Management</h2>
        <div className="flex flex-wrap gap-2">
          <input
            type="text"
            placeholder="Search users..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="form-input flex-1 min-w-[200px]"
          />
          <select
            value={roleFilter}
            onChange={(e) => setRoleFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Roles</option>
            <option value="admin">Admin</option>
            <option value="moderator">Moderator</option>
            <option value="staff">Staff</option>
            <option value="user">User</option>
            <option value="volunteer">Volunteer</option>
          </select>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Status</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="suspended">Suspended</option>
          </select>
          <button
            onClick={() => {
              setSelectedUser(null);
              resetForm();
              setShowCreateModal(true);
            }}
            className="btn btn-primary"
          >
            <i className="fas fa-plus mr-2"></i> New User
          </button>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <DataTable
          columns={userColumns}
          data={filteredUsers}
          onEdit={(user) => {
            setSelectedUser(user);
            setShowCreateModal(true);
          }}
          onDelete={(user) => onDeleteUser(user._id)}
          emptyMessage="No users found matching your criteria"
        />
      </div>

      {/* Create/Edit User Modal */}
      <Modal 
        isOpen={showCreateModal} 
        onClose={() => {
          setShowCreateModal(false);
          setSelectedUser(null);
          resetForm();
        }} 
        title={selectedUser ? 'Edit User' : 'Create New User'}
        size="lg"
      >
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Full Name*</label>
              <input
                type="text"
                name="name"
                value={values.name}
                onChange={handleChange}
                className="form-input"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Email*</label>
              <input
                type="email"
                name="email"
                value={values.email}
                onChange={handleChange}
                className="form-input"
                required
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Phone</label>
              <input
                type="tel"
                name="phone"
                value={values.phone}
                onChange={handleChange}
                className="form-input"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Join Date</label>
              <input
                type="date"
                name="joinDate"
                value={values.joinDate}
                onChange={handleChange}
                className="form-input"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Role*</label>
              <select
                name="role"
                value={values.role}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="user">User</option>
                <option value="volunteer">Volunteer</option>
                <option value="staff">Staff</option>
                <option value="moderator">Moderator</option>
                <option value="admin">Admin</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Status*</label>
              <select
                name="status"
                value={values.status}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="suspended">Suspended</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Address</label>
            <textarea
              name="address"
              value={values.address}
              onChange={handleChange}
              className="form-input"
              rows="2"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Notes</label>
            <textarea
              name="notes"
              value={values.notes}
              onChange={handleChange}
              className="form-input"
              rows="3"
            />
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button 
              type="button" 
              onClick={() => {
                setShowCreateModal(false);
                setSelectedUser(null);
                resetForm();
              }} 
              className="btn btn-outline"
            >
              Cancel
            </button>
            <button type="submit" className="btn btn-primary">
              {selectedUser ? 'Update' : 'Create'} User
            </button>
          </div>
        </form>
      </Modal>
    </div>
  );
};

// Ministries Management Component
const MinistriesManagement = ({ ministries, users, onUpdateMinistry, onDeleteMinistry, onCreateMinistry }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedMinistry, setSelectedMinistry] = useState(null);
  const [ministryCategories, setMinistryCategories] = useState([]);
  const alert = useAlert();

  const { values, handleChange, setValues, resetForm } = useForm({
    name: '',
    description: '',
    leader: '',
    coLeaders: [],
    meetingTimes: '',
    location: '',
    category: '',
    status: 'active',
    image: '',
    objectives: '',
    targetAudience: '',
    contactEmail: '',
    contactPhone: ''
  });

  useEffect(() => {
    if (selectedMinistry) {
      setValues({
        name: selectedMinistry.name || '',
        description: selectedMinistry.description || '',
        leader: selectedMinistry.leader || '',
        coLeaders: selectedMinistry.coLeaders || [],
        meetingTimes: selectedMinistry.meetingTimes || '',
        location: selectedMinistry.location || '',
        category: selectedMinistry.category || '',
        status: selectedMinistry.status || 'active',
        image: selectedMinistry.image || '',
        objectives: selectedMinistry.objectives || '',
        targetAudience: selectedMinistry.targetAudience || '',
        contactEmail: selectedMinistry.contactEmail || '',
        contactPhone: selectedMinistry.contactPhone || ''
      });
    }
  }, [selectedMinistry, setValues]);

  useEffect(() => {
    // Fetch ministry categories
    const fetchCategories = async () => {
      try {
        const response = await apiClient.get(API_ENDPOINTS.MINISTRIES.CATEGORIES);
        setMinistryCategories(response.categories || []);
      } catch (error) {
        console.error('Error fetching ministry categories:', error);
      }
    };
    fetchCategories();
  }, []);

  const filteredMinistries = ministries.filter(ministry => {  
    const matchesSearch = ministry.name?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || ministry.status === statusFilter;
    const matchesCategory = categoryFilter === 'all' || ministry.category === categoryFilter;
    return matchesSearch && matchesStatus && matchesCategory;
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedMinistry) {
        await onUpdateMinistry(selectedMinistry._id, values);
      } else {
        await onCreateMinistry(values);
      }
      setShowCreateModal(false);
      setSelectedMinistry(null);
      resetForm();
      alert.success(`Ministry ${selectedMinistry ? 'updated' : 'created'} successfully`);
    } catch (error) {
      alert.error(`Failed to ${selectedMinistry ? 'update' : 'create'} ministry`);
    }
  };

  const addCoLeader = () => {
    setValues({
      ...values,
      coLeaders: [...values.coLeaders, '']
    });
  };

  const removeCoLeader = (index) => {
    const updatedCoLeaders = [...values.coLeaders];
    updatedCoLeaders.splice(index, 1);
    setValues({ ...values, coLeaders: updatedCoLeaders });
  };

  const updateCoLeader = (index, value) => {
    const updatedCoLeaders = [...values.coLeaders];
    updatedCoLeaders[index] = value;
    setValues({ ...values, coLeaders: updatedCoLeaders });
  };

  const ministryColumns = [
    { 
      key: 'name',
      title: 'Ministry Name',
      render: (ministry) => (
        <div className="flex items-center">
          <div className="h-10 w-10 flex-shrink-0 bg-gray-300 rounded-full flex items-center justify-center">
            {ministry.name?.charAt(0)?.toUpperCase() || 'M'}
          </div>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">{ministry.name}</div>
            <div className="text-sm text-gray-500">Created: {new Date(ministry.createdAt).toLocaleDateString()}</div>
          </div>        
        </div>
      ) 
    },
    { 
      key: 'leader', 
      title: 'Leader', 
      render: (ministry) => {
        const leaderUser = users.find(u => u._id === ministry.leader);
        return leaderUser ? leaderUser.name : 'Not assigned';
      }
    }, 
    { key: 'category', title: 'Category' },
    { 
      key: 'status', 
      title: 'Status', 
      render: (ministry) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          ministry.status === 'active' 
            ? 'bg-green-100 text-green-800' 
            : ministry.status === 'inactive'
            ? 'bg-yellow-100 text-yellow-800'
            : 'bg-red-100 text-red-800'
        }`}>
          {ministry.status}
        </span>
      )
    },  
  ];

  // Filter users who can be leaders (staff, moderators, admins)
  const potentialLeaders = users.filter(user => 
    ['admin', 'moderator', 'staff', 'volunteer'].includes(user.role) && user.status === 'active'
  );

  return (
    <div>
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
        <h2 className="text-2xl font-bold">Ministries Management</h2>
        <div className="flex flex-wrap gap-2">
          <input  
            type="text"
            placeholder="Search ministries..."  
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="form-input flex-1 min-w-[200px]"
          />
          <select 
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Categories</option>
            {ministryCategories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-input"  
          >
            <option value="all">All Status</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="suspended">Suspended</option>
          </select>
          <button
            onClick={() => {
              setSelectedMinistry(null);
              resetForm();
              setShowCreateModal(true);
            }}    
            className="btn btn-primary"
          >
            <i className="fas fa-plus mr-2"></i> New Ministry
          </button>
        </div>
      </div>    
      
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <DataTable
          columns={ministryColumns}     
          data={filteredMinistries}
          onEdit={(ministry) => {
            setSelectedMinistry(ministry);
            setShowCreateModal(true);
          }}
          onDelete={(ministry) => onDeleteMinistry(ministry._id)}
          emptyMessage="No ministries found matching your criteria"
        />
      </div>

      {/* Create/Edit Ministry Modal */}
      <Modal 
        isOpen={showCreateModal} 
        onClose={() => {
          setShowCreateModal(false);
          setSelectedMinistry(null);
          resetForm();
        }} 
        title={selectedMinistry ? 'Edit Ministry' : 'Create New Ministry'}
        size="lg"
      >
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Ministry Name*</label>
              <input
                type="text"
                name="name"
                value={values.name}
                onChange={handleChange}
                className="form-input"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Category*</label>
              <select
                name="category"
                value={values.category}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="">Select a category</option>
                {ministryCategories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Description*</label>
            <textarea
              name="description"
              value={values.description}
              onChange={handleChange}
              className="form-input"
              rows="3"
              required
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Leader*</label>
              <select
                name="leader"
                value={values.leader}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="">Select a leader</option>
                {potentialLeaders.map(user => (
                  <option key={user._id} value={user._id}>{user.name} ({user.role})</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Status*</label>
              <select
                name="status"
                value={values.status}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="suspended">Suspended</option>
              </select>
            </div>
          </div>

          <div>
            <div className="flex justify-between items-center mb-2">
              <label className="block text-sm font-medium">Co-Leaders</label>
              <button
                type="button"
                onClick={addCoLeader}
                className="text-sm text-[#FF7E45] hover:text-[#F4B942]"
              >
                + Add Co-Leader
              </button>
            </div>
            {values.coLeaders.map((coLeader, index) => (
              <div key={index} className="flex mb-2">
                <select
                  value={coLeader}
                  onChange={(e) => updateCoLeader(index, e.target.value)}
                  className="form-input flex-1"
                >
                  <option value="">Select a co-leader</option>
                  {potentialLeaders.map(user => (
                    <option key={user._id} value={user._id}>{user.name} ({user.role})</option>
                  ))}
                </select>
                <button
                  type="button"
                  onClick={() => removeCoLeader(index)}
                  className="ml-2 text-red-500 hover:text-red-700"
                >
                  <i className="fas fa-times"></i>
                </button>
              </div>
            ))}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Meeting Times</label>
              <input
                type="text"
                name="meetingTimes"
                value={values.meetingTimes}
                onChange={handleChange}
                className="form-input"
                placeholder="e.g., Every Tuesday at 7 PM"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Location</label>
              <input
                type="text"
                name="location"
                value={values.location}
                onChange={handleChange}
                className="form-input"
                placeholder="e.g., Main Hall, Room 101"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Contact Email</label>
              <input
                type="email"
                name="contactEmail"
                value={values.contactEmail}
                onChange={handleChange}
                className="form-input"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Contact Phone</label>
              <input
                type="tel"
                name="contactPhone"
                value={values.contactPhone}
                onChange={handleChange}
                className="form-input"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Target Audience</label>
            <input
              type="text"
              name="targetAudience"
              value={values.targetAudience}
              onChange={handleChange}
              className="form-input"
              placeholder="e.g., Youth, Adults, Seniors"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Objectives</label>
            <textarea
              name="objectives"
              value={values.objectives}
              onChange={handleChange}
              className="form-input"
              rows="2"
              placeholder="Main goals and objectives of this ministry"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Image URL</label>
            <input
              type="url"
              name="image"
              value={values.image}
              onChange={handleChange}
              className="form-input"
              placeholder="https://example.com/ministry-image.jpg"
            />
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button 
              type="button" 
              onClick={() => {
                setShowCreateModal(false);
                setSelectedMinistry(null);
                resetForm();
              }} 
              className="btn btn-outline"
            >
              Cancel
            </button>
            <button type="submit" className="btn btn-primary">
              {selectedMinistry ? 'Update' : 'Create'} Ministry
            </button>
          </div>
        </form>
      </Modal>
    </div>
  );    
};

// Testimonials Management Component
const TestimonialsManagement = ({ testimonials, onUpdateTestimonial, onDeleteTestimonial, onCreateTestimonial }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedTestimonial, setSelectedTestimonial] = useState(null);
  const alert = useAlert();

  const { values, handleChange, setValues, resetForm } = useForm({
    author: '',
    content: '',
    status: 'pending',
    videoUrl: '',
    imageUrl: '',
    category: 'general',
    featured: false,
    date: new Date().toISOString().split('T')[0]
  });

  useEffect(() => {
    if (selectedTestimonial) {
      setValues({
        author: selectedTestimonial.author || '',
        content: selectedTestimonial.content || '',
        status: selectedTestimonial.status || 'pending',
        videoUrl: selectedTestimonial.videoUrl || '',
        imageUrl: selectedTestimonial.imageUrl || '',
        category: selectedTestimonial.category || 'general',
        featured: selectedTestimonial.featured || false,
        date: selectedTestimonial.date ? new Date(selectedTestimonial.date).toISOString().split('T')[0] : new Date().toISOString().split('T')[0]
      });
    }
  }, [selectedTestimonial, setValues]);

  const filteredTestimonials = testimonials.filter(testimonial => {  
    const matchesSearch = testimonial.author?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         testimonial.content?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || testimonial.status === statusFilter;
    return matchesSearch && matchesStatus;  
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedTestimonial) {
        await onUpdateTestimonial(selectedTestimonial._id, values);
      } else {
        await onCreateTestimonial(values);
      }
      setShowCreateModal(false);
      setSelectedTestimonial(null);
      resetForm();
      alert.success(`Testimonial ${selectedTestimonial ? 'updated' : 'created'} successfully`);
    } catch (error) {
      alert.error(`Failed to ${selectedTestimonial ? 'update' : 'create'} testimonial`);
    }
  };

  const testimonialColumns = [
    { 
      key: 'author',    
      title: 'Author',
      render: (testimonial) => (
        <div className="flex items-center">
          <div className="h-10 w-10 flex-shrink-0 bg-gray-300 rounded-full flex items-center justify-center">
            {testimonial.author?.charAt(0)?.toUpperCase() || 'T'}
          </div>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">{testimonial.author}</div>
            <div className="text-sm text-gray-500">Created: {new Date(testimonial.createdAt).toLocaleDateString()}</div>
          </div>        
        </div>
      )
    },
    { 
      key: 'content', 
      title: 'Content', 
      render: (testimonial) => (
        <p className="text-sm text-gray-700 line-clamp-2">{testimonial.content}</p>
      )   
    },
    {
      key: 'status',  
      title: 'Status',
      render: (testimonial) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${ 
          testimonial.status === 'published'  
            ? 'bg-green-100 text-green-800'
            : testimonial.status === 'pending'
            ? 'bg-yellow-100 text-yellow-800'
            : 'bg-red-100 text-red-800'
        }`}>
          {testimonial.status}    
        </span>
      )
    },
    {
      key: 'featured',
      title: 'Featured',
      render: (testimonial) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          testimonial.featured ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {testimonial.featured ? 'Yes' : 'No'}
        </span>
      )
    }
  ];  

  return (
    <div>   
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">      
        <h2 className="text-2xl font-bold">Testimonials Management</h2>
        <div className="flex flex-wrap gap-2">      
          <input
            type="text"
            placeholder="Search testimonials..."    
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="form-input flex-1 min-w-[200px]"
          />      
          <select
            value={statusFilter}    
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-input"  
          >    
            <option value="all">All Status</option> 
            <option value="published">Published</option>
            <option value="pending">Pending</option>    
            <option value="rejected">Rejected</option>
          </select>   
          <button
            onClick={() => {
              setSelectedTestimonial(null);
              resetForm();
              setShowCreateModal(true);
            }}    
            className="btn btn-primary"
          >
            <i className="fas fa-plus mr-2"></i> New Testimonial
          </button>       
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <DataTable  
          columns={testimonialColumns}
          data={filteredTestimonials}
          onEdit={(testimonial) => {
            setSelectedTestimonial(testimonial);
            setShowCreateModal(true);
          }}      
          onDelete={(testimonial) => onDeleteTestimonial(testimonial._id)}
          emptyMessage="No testimonials found matching your criteria"
        />
      </div>      

      {/* Create/Edit Testimonial Modal */}
      <Modal 
        isOpen={showCreateModal} 
        onClose={() => {
          setShowCreateModal(false);
          setSelectedTestimonial(null);
          resetForm();
        }} 
        title={selectedTestimonial ? 'Edit Testimonial' : 'Create New Testimonial'}
        size="lg"
      >
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Author Name*</label>
              <input
                type="text"
                name="author"
                value={values.author}
                onChange={handleChange}
                className="form-input"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Category</label>
              <select
                name="category"
                value={values.category}
                onChange={handleChange}
                className="form-input"
              >
                <option value="general">General</option>
                <option value="salvation">Salvation</option>
                <option value="healing">Healing</option>
                <option value="provision">Provision</option>
                <option value="relationship">Relationship</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Testimonial Content*</label>
            <textarea
              name="content"
              value={values.content}
              onChange={handleChange}
              className="form-input"
              rows="4"
              required
              placeholder="Share your story of how God has worked in your life..."
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Status*</label>
              <select
                name="status"
                value={values.status}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="pending">Pending</option>
                <option value="published">Published</option>
                <option value="rejected">Rejected</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Date</label>
              <input
                type="date"
                name="date"
                value={values.date}
                onChange={handleChange}
                className="form-input"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Video URL</label>
              <input
                type="url"
                name="videoUrl"
                value={values.videoUrl}
                onChange={handleChange}
                className="form-input"
                placeholder="https://youtube.com/embed/..."
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Image URL</label>
              <input
                type="url"
                name="imageUrl"
                value={values.imageUrl}
                onChange={handleChange}
                className="form-input"
                placeholder="https://example.com/testimonial-image.jpg"
              />
            </div>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              name="featured"
              checked={values.featured}
              onChange={(e) => handleChange({ target: { name: 'featured', value: e.target.checked } })}
              className="form-checkbox h-4 w-4 text-[#FF7E45]"
              id="featuredTestimonial"
            />
            <label htmlFor="featuredTestimonial" className="ml-2 text-sm font-medium">
              Feature this testimonial on the homepage
            </label>
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button 
              type="button" 
              onClick={() => {
                setShowCreateModal(false);
                setSelectedTestimonial(null);
                resetForm();
              }} 
              className="btn btn-outline"
            >
              Cancel
            </button>
            <button type="submit" className="btn btn-primary">
              {selectedTestimonial ? 'Update' : 'Create'} Testimonial
            </button>
          </div>
        </form>
      </Modal>
    </div>  
  );  
};    

// Blog Management Component
const BlogManagement = ({ posts, onUpdatePost, onDeletePost, onCreatePost }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [authorFilter, setAuthorFilter] = useState('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedPost, setSelectedPost] = useState(null);
  const [blogCategories, setBlogCategories] = useState([]);
  const [authors, setAuthors] = useState([]);
  const alert = useAlert();

  const { values, handleChange, setValues, resetForm } = useForm({
    title: '',
    content: '',
    excerpt: '',
    author: '',
    status: 'draft',
    category: '',
    tags: [],
    featuredImage: '',
    publishedAt: new Date().toISOString().split('T')[0],
    metaTitle: '',
    metaDescription: '',
    featured: false
  });

  useEffect(() => {
    if (selectedPost) {
      setValues({
        title: selectedPost.title || '',
        content: selectedPost.content || '',
        excerpt: selectedPost.excerpt || '',
        author: selectedPost.author || '',
        status: selectedPost.status || 'draft',
        category: selectedPost.category || '',
        tags: selectedPost.tags || [],
        featuredImage: selectedPost.featuredImage || '',
        publishedAt: selectedPost.publishedAt ? new Date(selectedPost.publishedAt).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
        metaTitle: selectedPost.metaTitle || '',
        metaDescription: selectedPost.metaDescription || '',
        featured: selectedPost.featured || false
      });
    }
  }, [selectedPost, setValues]);

  useEffect(() => {
    // Fetch blog categories
    const fetchCategories = async () => {
      try {
        const response = await apiClient.get(API_ENDPOINTS.BLOG.CATEGORIES);
        setBlogCategories(response.categories || []);
      } catch (error) {
        console.error('Error fetching blog categories:', error);
      }
    };
    
    // Fetch potential authors (users with appropriate roles)
    const fetchAuthors = async () => {
      try {
        const response = await apiClient.get(API_ENDPOINTS.USERS.BASE);
        const authorUsers = response.users.filter(user => 
          ['admin', 'moderator', 'staff'].includes(user.role) && user.status === 'active'
        );
        setAuthors(authorUsers);
      } catch (error) {
        console.error('Error fetching authors:', error);
      }
    };
    
    fetchCategories();
    fetchAuthors();
  }, []);

  const filteredPosts = posts.filter(post => {
    const matchesSearch = post.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.content?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || post.status === statusFilter;
    const matchesCategory = categoryFilter === 'all' || post.category === categoryFilter;
    const matchesAuthor = authorFilter === 'all' || post.author === authorFilter;
    return matchesSearch && matchesStatus && matchesCategory && matchesAuthor;
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (selectedPost) {
        await onUpdatePost(selectedPost._id, values);
      } else {
        await onCreatePost(values);
      }
      setShowCreateModal(false);
      setSelectedPost(null);
      resetForm();
      alert.success(`Blog post ${selectedPost ? 'updated' : 'created'} successfully`);
    } catch (error) {
      alert.error(`Failed to ${selectedPost ? 'update' : 'create'} blog post`);
    }
  };

  const addTag = () => {
    setValues({
      ...values,
      tags: [...values.tags, '']
    });
  };

  const removeTag = (index) => {
    const updatedTags = [...values.tags];
    updatedTags.splice(index, 1);
    setValues({ ...values, tags: updatedTags });
  };

  const updateTag = (index, value) => {
    const updatedTags = [...values.tags];
    updatedTags[index] = value;
    setValues({ ...values, tags: updatedTags });
  };

  const postColumns = [
    {
      key: 'title',
      title: 'Title',
      render: (post) => (
        <div>
          <div className="text-sm font-medium text-gray-900">{post.title}</div>
          <div className="text-sm text-gray-500">By {post.authorName} on {new Date(post.publishedAt || post.createdAt).toLocaleDateString()}</div>
        </div>
      )
    },  
    { key: 'category', title: 'Category' },
    {
      key: 'status',
      title: 'Status',    
      render: (post) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${ 
          post.status === 'published'
            ? 'bg-green-100 text-green-800'
            : post.status === 'draft'   
            ? 'bg-yellow-100 text-yellow-800'
            : 'bg-red-100 text-red-800'
        }`}>
          {post.status}   
        </span>
      )
    },
    {
      key: 'featured',
      title: 'Featured',
      render: (post) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          post.featured ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {post.featured ? 'Yes' : 'No'}
        </span>
      )
    }
  ];

  return (
    <div>
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
        <h2 className="text-2xl font-bold">Blog Management</h2>
        <div className="flex flex-wrap gap-2">
          <input  
            type="text"
            placeholder="Search posts..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="form-input flex-1 min-w-[200px]"
          />
          <select
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value)}
            className="form-input"  
          >
            <option value="all">All Categories</option>     
            {blogCategories.map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-input"  
          >
            <option value="all">All Status</option>     
            <option value="published">Published</option>
            <option value="draft">Draft</option>    
            <option value="archived">Archived</option>
          </select>
          <select
            value={authorFilter}
            onChange={(e) => setAuthorFilter(e.target.value)}
            className="form-input"  
          >
            <option value="all">All Authors</option>     
            {authors.map(author => (
              <option key={author._id} value={author._id}>{author.name}</option>
            ))}
          </select>
          <button
            onClick={() => {
              setSelectedPost(null);
              resetForm();
              setShowCreateModal(true);
            }}
            className="btn btn-primary"
          >   
            <i className="fas fa-plus mr-2"></i> New Post
          </button>   
        </div>
      </div>  
      
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <DataTable      
          columns={postColumns}
          data={filteredPosts}
          onEdit={(post) => {
            setSelectedPost(post);
            setShowCreateModal(true);
          }}      
          onDelete={(post) => onDeletePost(post._id)}
          emptyMessage="No blog posts found matching your criteria"   
        />
      </div>  

      {/* Create/Edit Blog Post Modal */}
      <Modal 
        isOpen={showCreateModal} 
        onClose={() => {
          setShowCreateModal(false);
          setSelectedPost(null);
          resetForm();
        }} 
        title={selectedPost ? 'Edit Blog Post' : 'Create New Blog Post'}
        size="xl"
      >
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Title*</label>
            <input
              type="text"
              name="title"
              value={values.title}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Author*</label>
              <select
                name="author"
                value={values.author}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="">Select an author</option>
                {authors.map(author => (
                  <option key={author._id} value={author._id}>{author.name}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Category*</label>
              <select
                name="category"
                value={values.category}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="">Select a category</option>
                {blogCategories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Status*</label>
              <select
                name="status"
                value={values.status}
                onChange={handleChange}
                className="form-input"
                required
              >
                <option value="draft">Draft</option>
                <option value="published">Published</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Publish Date</label>
              <input
                type="date"
                name="publishedAt"
                value={values.publishedAt}
                onChange={handleChange}
                className="form-input"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Excerpt</label>
            <textarea
              name="excerpt"
              value={values.excerpt}
              onChange={handleChange}
              className="form-input"
              rows="2"
              placeholder="Brief summary of the post (displayed in listings)"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Content*</label>
            <textarea
              name="content"
              value={values.content}
              onChange={handleChange}
              className="form-input"
              rows="8"
              required
              placeholder="Write your blog post content here..."
            />
          </div>

          <div>
            <div className="flex justify-between items-center mb-2">
              <label className="block text-sm font-medium">Tags</label>
              <button
                type="button"
                onClick={addTag}
                className="text-sm text-[#FF7E45] hover:text-[#F4B942]"
              >
                + Add Tag
              </button>
            </div>
            {values.tags.map((tag, index) => (
              <div key={index} className="flex mb-2">
                <input
                  type="text"
                  placeholder="Tag"
                  value={tag}
                  onChange={(e) => updateTag(index, e.target.value)}
                  className="form-input flex-1"
                />
                <button
                  type="button"
                  onClick={() => removeTag(index)}
                  className="ml-2 text-red-500 hover:text-red-700"
                >
                  <i className="fas fa-times"></i>
                </button>
              </div>
            ))}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Featured Image URL</label>
              <input
                type="url"
                name="featuredImage"
                value={values.featuredImage}
                onChange={handleChange}
                className="form-input"
                placeholder="https://example.com/featured-image.jpg"
              />
            </div>
            <div className="flex items-center">
              <input
                type="checkbox"
                name="featured"
                checked={values.featured}
                onChange={(e) => handleChange({ target: { name: 'featured', value: e.target.checked } })}
                className="form-checkbox h-4 w-4 text-[#FF7E45]"
                id="featuredPost"
              />
              <label htmlFor="featuredPost" className="ml-2 text-sm font-medium">
                Feature this post
              </label>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Meta Title (SEO)</label>
            <input
              type="text"
              name="metaTitle"
              value={values.metaTitle}
              onChange={handleChange}
              className="form-input"
              placeholder="Optional: Custom title for search engines"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Meta Description (SEO)</label>
            <textarea
              name="metaDescription"
              value={values.metaDescription}
              onChange={handleChange}
              className="form-input"
              rows="2"
              placeholder="Optional: Custom description for search engines"
            />
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button 
              type="button" 
              onClick={() => {
                setShowCreateModal(false);
                setSelectedPost(null);
                resetForm();
              }} 
              className="btn btn-outline"
            >
              Cancel
            </button>
            <button type="submit" className="btn btn-primary">
              {selectedPost ? 'Update' : 'Create'} Post
            </button>
          </div>
        </form>
      </Modal>
    </div>  
  );
};

// Donations Management Component
const DonationsManagement = ({ donations, onUpdateDonation }) => {
  const [statusFilter, setStatusFilter] = useState('all');
  const [dateFilter, setDateFilter] = useState('all');
  const [methodFilter, setMethodFilter] = useState('all');

  const filteredDonations = donations.filter(donation => {
    const matchesStatus = statusFilter === 'all' || donation.status === statusFilter;
    const matchesMethod = methodFilter === 'all' || donation.paymentMethod === methodFilter;
    
    let matchesDate = true;
    if (dateFilter === 'today') {
      const today = new Date().toDateString();
      matchesDate = new Date(donation.createdAt).toDateString() === today;
    } else if (dateFilter === 'week') {
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      matchesDate = new Date(donation.createdAt) >= weekAgo;
    } else if (dateFilter === 'month') {
      const monthAgo = new Date();
      monthAgo.setMonth(monthAgo.getMonth() - 1);
      matchesDate = new Date(donation.createdAt) >= monthAgo;
    } else if (dateFilter === 'year') {
      const yearAgo = new Date();
      yearAgo.setFullYear(yearAgo.getFullYear() - 1);
      matchesDate = new Date(donation.createdAt) >= yearAgo;
    }
    
    return matchesStatus && matchesMethod && matchesDate;
  });

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  const donationColumns = [
    { 
      key: 'donor', 
      title: 'Donor', 
      render: (donation) => (
        <div>
          <div className="text-sm font-medium text-gray-900">{donation.donorName || 'Anonymous'}</div>
          <div className="text-sm text-gray-500">{donation.donorEmail || 'No email provided'}</div>
        </div>
      )
    },
    { 
      key: 'amount', 
      title: 'Amount', 
      render: (donation) => formatCurrency(donation.amount)
    },
    { 
      key: 'date', 
      title: 'Date', 
      render: (donation) => new Date(donation.createdAt).toLocaleDateString()
    },
    { 
      key: 'method', 
      title: 'Method', 
      render: (donation) => donation.paymentMethod ? donation.paymentMethod.charAt(0).toUpperCase() + donation.paymentMethod.slice(1) : 'Unknown'
    },
    { 
      key: 'type', 
      title: 'Type', 
      render: (donation) => donation.recurring ? 'Recurring' : 'One-time'
    },
    { 
      key: 'status', 
      title: 'Status', 
      render: (donation) => (
        <select
          value={donation.status}
          onChange={(e) => onUpdateDonation(donation._id, { status: e.target.value })}
          className="form-input text-sm"
        >
          <option value="pending">Pending</option>
          <option value="completed">Completed</option>
          <option value="failed">Failed</option>
          <option value="refunded">Refunded</option>
        </select>
      )
    },
  ];

  const totalAmount = filteredDonations.reduce((sum, donation) => sum + donation.amount, 0);

  return (
    <div>
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
        <h2 className="text-2xl font-bold">Donations Management</h2>
        <div className="flex flex-wrap gap-2">
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Status</option>
            <option value="pending">Pending</option>
            <option value="completed">Completed</option>
            <option value="failed">Failed</option>
            <option value="refunded">Refunded</option>
          </select>
          <select
            value={methodFilter}
            onChange={(e) => setMethodFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Methods</option>
            <option value="credit_card">Credit Card</option>
            <option value="paypal">PayPal</option>
            <option value="bank_transfer">Bank Transfer</option>
            <option value="cash">Cash</option>
            <option value="check">Check</option>
          </select>
          <select
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Time</option>
            <option value="today">Today</option>
            <option value="week">This Week</option>
            <option value="month">This Month</option>
            <option value="year">This Year</option>
          </select>
          <button className="btn btn-primary">
            <i className="fas fa-download mr-2"></i> Export
          </button>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md p-4 mb-6">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-lg font-semibold">Total: {formatCurrency(totalAmount)}</h3>
            <p className="text-sm text-gray-500">{filteredDonations.length} donations</p>
          </div>
          <div className="text-right">
            <p className="text-sm text-gray-500">Recurring donations</p>
            <p className="font-semibold">
              {formatCurrency(filteredDonations.filter(d => d.recurring).reduce((sum, d) => sum + d.amount, 0))}
            </p>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <DataTable
          columns={donationColumns}
          data={filteredDonations}
          onEdit={() => {}}
          onDelete={() => {}}
          emptyMessage="No donations found matching your criteria"
        />
      </div>
    </div>
  );
};

// Prayer Requests Management Component
const PrayerRequestsManagement = ({ prayerRequests, onUpdatePrayerRequest, onDeletePrayerRequest }) => {
  const [statusFilter, setStatusFilter] = useState('all');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [privacyFilter, setPrivacyFilter] = useState('all');

  const filteredPrayerRequests = prayerRequests.filter(request => {
    const matchesStatus = statusFilter === 'all' || request.status === statusFilter;
    const matchesCategory = categoryFilter === 'all' || request.category === categoryFilter;
    const matchesPrivacy = privacyFilter === 'all' || 
      (privacyFilter === 'public' && request.isPublic) || 
      (privacyFilter === 'private' && !request.isPublic);
    return matchesStatus && matchesCategory && matchesPrivacy;
  });

  const prayerColumns = [
    { 
      key: 'name', 
      title: 'Name', 
      render: (request) => (
        <div>
          <div className="text-sm font-medium text-gray-900">{request.name || 'Anonymous'}</div>
          <div className="text-sm text-gray-500">{request.email || 'No email provided'}</div>
        </div>
      )
    },
    { 
      key: 'request', 
      title: 'Request', 
      render: (request) => (
        <div className="text-sm text-gray-900 line-clamp-2">{request.request}</div>
      )
    },
    { key: 'category', title: 'Category' },
    { 
      key: 'privacy', 
      title: 'Privacy', 
      render: (request) => (
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
          request.isPublic ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {request.isPublic ? 'Public' : 'Private'}
        </span>
      )
    },
    { key: 'prayerCount', title: 'Prayers' },
    { 
      key: 'status', 
      title: 'Status', 
      render: (request) => (
        <select
          value={request.status}
          onChange={(e) => onUpdatePrayerRequest(request._id, { status: e.target.value })}
          className="form-input text-sm"
        >
          <option value="pending">Pending</option>
          <option value="approved">Approved</option>
          <option value="answered">Answered</option>
          <option value="rejected">Rejected</option>
        </select>
      )
    },
  ];

  return (
    <div>
      <div className="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
        <h2 className="text-2xl font-bold">Prayer Requests Management</h2>
        <div className="flex flex-wrap gap-2">
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Status</option>
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="answered">Answered</option>
            <option value="rejected">Rejected</option>
          </select>
          <select
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Categories</option>
            <option value="healing">Healing</option>
            <option value="guidance">Guidance</option>
            <option value="financial">Financial</option>
            <option value="relationship">Relationship</option>
            <option value="thanksgiving">Thanksgiving</option>
            <option value="other">Other</option>
          </select>
          <select
            value={privacyFilter}
            onChange={(e) => setPrivacyFilter(e.target.value)}
            className="form-input"
          >
            <option value="all">All Privacy</option>
            <option value="public">Public</option>
            <option value="private">Private</option>
          </select>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <DataTable
          columns={prayerColumns}
          data={filteredPrayerRequests}
          onEdit={() => {}}
          onDelete={(request) => onDeletePrayerRequest(request._id)}
          emptyMessage="No prayer requests found matching your criteria"
        />
      </div>
    </div>
  );
};

// Event Form Modal Component
const EventFormModal = ({ isOpen, onClose, onSubmit, eventData = {}, users }) => {
  const { values, handleChange, setValues } = useForm({
    title: '',
    description: '',
    startTime: '',
    endTime: '',
    location: '',
    address: {},
    category: 'service',
    imageUrl: '',
    capacity: 0,
    requiresRSVP: false,
    price: 0,
    leaders: [],
    tags: [],
    ...eventData
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(values);
  };

  const addLeader = () => {
    setValues({
      ...values,
      leaders: [...values.leaders, { userId: '', role: '' }]
    });
  };

  const removeLeader = (index) => {
    const updatedLeaders = [...values.leaders];
    updatedLeaders.splice(index, 1);
    setValues({ ...values, leaders: updatedLeaders });
  };

  const updateLeader = (index, field, value) => {
    const updatedLeaders = [...values.leaders];
    updatedLeaders[index][field] = value;
    setValues({ ...values, leaders: updatedLeaders });
  };

  const addTag = () => {
    setValues({
      ...values,
      tags: [...values.tags, '']
    });
  };

  const removeTag = (index) => {
    const updatedTags = [...values.tags];
    updatedTags.splice(index, 1);
    setValues({ ...values, tags: updatedTags });
  };

  const updateTag = (index, value) => {
    const updatedTags = [...values.tags];
    updatedTags[index] = value;
    setValues({ ...values, tags: updatedTags });
  };

  useEffect(() => {
    if (isOpen) {
      document.querySelector('.form-input')?.focus();
    }
  }, [isOpen]);

  if (!isOpen) return null;

  // Filter users who can be leaders (staff, moderators, admins, volunteers)
  const potentialLeaders = users.filter(user => 
    ['admin', 'moderator', 'staff', 'volunteer'].includes(user.role) && user.status === 'active'
  );

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={eventData._id ? 'Edit Event' : 'Create Event'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Event Title*</label>
            <input
              type="text"
              name="title"
              value={values.title}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Category*</label>
            <select
              name="category"
              value={values.category}
              onChange={handleChange}
              className="form-input"
              required
            >
              <option value="service">Service</option>
              <option value="bible-study">Bible Study</option>
              <option value="prayer">Prayer Meeting</option>
              <option value="youth">Youth</option>
              <option value="children">Children</option>
              <option value="men">Men</option>
              <option value="women">Women</option>
              <option value="fellowship">Fellowship</option>
              <option value="outreach">Outreach</option>
              <option value="training">Training</option>
            </select>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Start Time*</label>
            <input
              type="datetime-local"
              name="startTime"
              value={values.startTime}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">End Time*</label>
            <input
              type="datetime-local"
              name="endTime"
              value={values.endTime}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Location*</label>
          <input
            type="text"
            name="location"
            value={values.location}
            onChange={handleChange}
            className="form-input"
            required
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Capacity</label>
            <input
              type="number"
              name="capacity"
              value={values.capacity}
              onChange={handleChange}
              className="form-input"
              min="0"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Price ($)</label>
            <input
              type="number"
              name="price"
              value={values.price}
              onChange={handleChange}
              className="form-input"
              min="0"
              step="0.01"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Description*</label>
          <textarea
            name="description"
            value={values.description}
            onChange={handleChange}
            className="form-input"
            rows="3"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Image URL</label>
          <input
            type="url"
            name="imageUrl"
            value={values.imageUrl}
            onChange={handleChange}
            className="form-input"
            placeholder="https://example.com/image.jpg"
          />
        </div>

        <div className="flex items-center">
          <input
            type="checkbox"
            name="requiresRSVP"
            checked={values.requiresRSVP}
            onChange={handleChange}
            className="form-checkbox h-4 w-4 text-[#FF7E45]"
            id="requiresRSVP"
          />
          <label htmlFor="requiresRSVP" className="ml-2 text-sm font-medium">
            Requires RSVP
          </label>
        </div>

        <div>
          <div className="flex justify-between items-center mb-2">
            <label className="block text-sm font-medium">Event Leaders</label>
            <button
              type="button"
              onClick={addLeader}
              className="text-sm text-[#FF7E45] hover:text-[#F4B942]"
            >
              + Add Leader
            </button>
          </div>
          {values.leaders.map((leader, index) => (
            <div key={index} className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-2">
              <select
                value={leader.userId}
                onChange={(e) => updateLeader(index, 'userId', e.target.value)}
                className="form-input"
              >
                <option value="">Select a leader</option>
                {potentialLeaders.map(user => (
                  <option key={user._id} value={user._id}>{user.name} ({user.role})</option>
                ))}
              </select>
              <div className="flex">
                <input
                  type="text"
                  placeholder="Role"
                  value={leader.role}
                  onChange={(e) => updateLeader(index, 'role', e.target.value)}
                  className="form-input flex-1"
                />
                <button
                  type="button"
                  onClick={() => removeLeader(index)}
                  className="ml-2 text-red-500 hover:text-red-700"
                >
                  <i className="fas fa-times"></i>
                </button>
              </div>
            </div>
          ))}
        </div>

        <div>
          <div className="flex justify-between items-center mb-2">
            <label className="block text-sm font-medium">Tags</label>
            <button
              type="button"
              onClick={addTag}
              className="text-sm text-[#FF7E45] hover:text-[#F4B942]"
            >
              + Add Tag
            </button>
          </div>
          {values.tags.map((tag, index) => (
            <div key={index} className="flex mb-2">
              <input
                type="text"
                placeholder="Tag"
                value={tag}
                onChange={(e) => updateTag(index, e.target.value)}
                className="form-input flex-1"
              />
              <button
                type="button"
                onClick={() => removeTag(index)}
                className="ml-2 text-red-500 hover:text-red-700"
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
          ))}
        </div>

        <div className="flex justify-end space-x-2 pt-4">
          <button type="button" onClick={onClose} className="btn btn-outline">
            Cancel
          </button>
          <button type="submit" className="btn btn-primary">
            {eventData._id ? 'Update' : 'Create'} Event
          </button>
        </div>
      </form>
    </Modal>
  );
};

// Sermon Form Modal Component
const SermonFormModal = ({ isOpen, onClose, onSubmit, sermonData = {}, users }) => {
  const { values, handleChange, setValues } = useForm({
    title: '',
    speaker: '',
    description: '',
    scripture: '',
    category: 'sunday-service',
    date: '',
    duration: '00:00',
    videoUrl: '',
    audioUrl: '',
    imageUrl: '',
    isLive: false,
    liveStreamUrl: '',
    tags: [],
    series: '',
    seriesPart: '',
    ...sermonData
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(values);
  };

  const addTag = () => {
    setValues({
      ...values,
      tags: [...values.tags, '']
    });
  };

  const removeTag = (index) => {
    const updatedTags = [...values.tags];
    updatedTags.splice(index, 1);
    setValues({ ...values, tags: updatedTags });
  };

  const updateTag = (index, value) => {
    const updatedTags = [...values.tags];
    updatedTags[index] = value;
    setValues({ ...values, tags: updatedTags });
  };

  useEffect(() => {
    if (isOpen) {
      document.querySelector('.form-input')?.focus();
    }
  }, [isOpen]);

  if (!isOpen) return null;

  // Filter users who can be speakers (staff, moderators, admins, volunteers)
  const potentialSpeakers = users.filter(user => 
    ['admin', 'moderator', 'staff', 'volunteer'].includes(user.role) && user.status === 'active'
  );

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={sermonData._id ? 'Edit Sermon' : 'Create Sermon'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Sermon Title*</label>
            <input
              type="text"
              name="title"
              value={values.title}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Speaker*</label>
            <select
              name="speaker"
              value={values.speaker}
              onChange={handleChange}
              className="form-input"
              required
            >
              <option value="">Select a speaker</option>
              {potentialSpeakers.map(user => (
                <option key={user._id} value={user._id}>{user.name} ({user.role})</option>
              ))}
            </select>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Date*</label>
            <input
              type="date"
              name="date"
              value={values.date}
              onChange={handleChange}
              className="form-input"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Duration</label>
            <input
              type="text"
              name="duration"
              value={values.duration}
              onChange={handleChange}
              className="form-input"
              placeholder="00:00"
            />
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Category*</label>
            <select
              name="category"
              value={values.category}
              onChange={handleChange}
              className="form-input"
              required
            >
              <option value="sunday-service">Sunday Service</option>
              <option value="bible-study">Bible Study</option>
              <option value="prayer-meeting">Prayer Meeting</option>
              <option value="youth">Youth Service</option>
              <option value="special">Special Event</option>
              <option value="faith">Faith</option>
              <option value="hope">Hope</option>
              <option value="love">Love</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Scripture Reference</label>
            <input
              type="text"
              name="scripture"
              value={values.scripture}
              onChange={handleChange}
              className="form-input"
              placeholder="e.g., John 3:16"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Description*</label>
          <textarea
            name="description"
            value={values.description}
            onChange={handleChange}
            className="form-input"
            rows="3"
            required
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Series</label>
            <input
              type="text"
              name="series"
              value={values.series}
              onChange={handleChange}
              className="form-input"
              placeholder="Series name"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Series Part</label>
            <input
              type="number"
              name="seriesPart"
              value={values.seriesPart}
              onChange={handleChange}
              className="form-input"
              min="1"
              placeholder="Part number"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">Image URL</label>
          <input
            type="url"
            name="imageUrl"
            value={values.imageUrl}
            onChange={handleChange}
            className="form-input"
            placeholder="https://example.com/image.jpg"
          />
        </div>

        <div className="border-t pt-4">
          <h3 className="font-medium mb-3">Media Options</h3>
          
          <div className="flex items-center mb-3">
            <input
              type="checkbox"
              name="isLive"
              checked={values.isLive}
              onChange={handleChange}
              className="form-checkbox h-4 w-4 text-[#FF7E45]"
              id="isLiveCheckbox"
            />
            <label htmlFor="isLiveCheckbox" className="ml-2 text-sm font-medium">
              This is a live stream
            </label>
          </div>

          {values.isLive ? (
            <div>
              <label className="block text-sm font-medium mb-1">Live Stream URL*</label>
              <input
                type="url"
                name="liveStreamUrl"
                value={values.liveStreamUrl}
                onChange={handleChange}
                className="form-input"
                placeholder="https://youtube.com/live/..."
                required={values.isLive}
              />
              <p className="text-xs text-gray-500 mt-1">
                Paste the live stream URL (YouTube, Facebook, Vimeo, etc.)
              </p>
            </div>
          ) : (
            <>
              <div>
                <label className="block text-sm font-medium mb-1">Video URL</label>
                <input
                  type="url"
                  name="videoUrl"
                  value={values.videoUrl}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="https://youtube.com/..."
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Audio URL</label>
                <input
                  type="url"
                  name="audioUrl"
                  value={values.audioUrl}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="https://audiofile.com/..."
                />
              </div>
            </>
          )}
        </div>

        <div>
          <div className="flex justify-between items-center mb-2">
            <label className="block text-sm font-medium">Tags</label>
            <button
              type="button"
              onClick={addTag}
              className="text-sm text-[#FF7E45] hover:text-[#F4B942]"
            >
              + Add Tag
            </button>
          </div>
          {values.tags.map((tag, index) => (
            <div key={index} className="flex mb-2">
              <input
                type="text"
                placeholder="Tag"
                value={tag}
                onChange={(e) => updateTag(index, e.target.value)}
                className="form-input flex-1"
              />
              <button
                type="button"
                onClick={() => removeTag(index)}
                className="ml-2 text-red-500 hover:text-red-700"
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
          ))}
        </div>

        <div className="flex justify-end space-x-2 pt-4">
          <button type="button" onClick={onClose} className="btn btn-outline">
            Cancel
          </button>
          <button type="submit" className="btn btn-primary">
            {sermonData._id ? 'Update' : 'Create'} Sermon
          </button>
        </div>
      </form>
    </Modal>
  );
};

// Live Stream Control Component
const LiveStreamControl = ({ isLive, onStartLive, onStopLive, liveStats }) => {
  return (
    <div className="bg-white rounded-lg shadow-md p-6 mb-6">
      <h3 className="text-xl font-bold mb-4">Live Stream Control</h3>
      
      {isLive ? (
        <div className="space-y-4">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse mr-2"></div>
            <span className="font-medium text-red-600">Live Stream Active</span>
          </div>
          
          {liveStats && (
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-600">Viewers:</span>
                <span className="font-medium ml-2">{liveStats.viewers || 0}</span>
              </div>
              <div>
                <span className="text-gray-600">Duration:</span>
                <span className="font-medium ml-2">{liveStats.duration || '0:00'}</span>
              </div>
            </div>
          )}
          
          <button
            onClick={onStopLive}
            className="btn btn-danger"
          >
            <i className="fas fa-stop mr-2"></i> End Live Stream
          </button>
          
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <p className="text-sm text-blue-700">
              <i className="fas fa-info-circle mr-1"></i>
              Your live stream is currently active and visible to members and guests.
            </p>
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-gray-400 rounded-full mr-2"></div>
            <span className="font-medium text-gray-600">No Active Live Stream</span>
          </div>
          
          <button
            onClick={onStartLive}
            className="btn btn-primary"
          >
            <i className="fas fa-broadcast-tower mr-2"></i> Start Live Stream
          </button>
          
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
            <p className="text-sm text-yellow-700">
              <i className="fas fa-exclamation-triangle mr-1"></i>
              Make sure your streaming software is configured before starting.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

// Settings Form Component
const SettingsForm = ({ settings, onUpdateSettings }) => {
  const { values, handleChange, setValues } = useForm({
    churchName: settings.churchName || '',
    churchAddress: settings.churchAddress || {},
    contactEmail: settings.contactEmail || '',
    contactPhone: settings.contactPhone || '',
    pastorName: settings.pastorName || '',
    serviceTimes: settings.serviceTimes || [],
    socialMedia: settings.socialMedia || {},
    liveStreamUrl: settings.liveStreamUrl || '',
    givingOptions: settings.givingOptions || {},
    emailSettings: settings.emailSettings || {},
    sermonSettings: settings.sermonSettings || {},
    eventSettings: settings.eventSettings || {},
    prayerRequestSettings: settings.prayerRequestSettings || {},
    testimonialSettings: settings.testimonialSettings || {},
    blogSettings: settings.blogSettings || {},
    ministrySettings: settings.ministrySettings || {},
    ...settings
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onUpdateSettings(values);
  };

  const addServiceTime = () => {
    setValues({
      ...values,
      serviceTimes: [...values.serviceTimes, { day: '', time: '', description: '' }]
    });
  };

  const removeServiceTime = (index) => {
    const updatedServiceTimes = [...values.serviceTimes];
    updatedServiceTimes.splice(index, 1);
    setValues({ ...values, serviceTimes: updatedServiceTimes });
  };

  const updateServiceTime = (index, field, value) => {
    const updatedServiceTimes = [...values.serviceTimes];
    updatedServiceTimes[index][field] = value;
    setValues({ ...values, serviceTimes: updatedServiceTimes });
  };

  const updateAddress = (field, value) => {
    setValues({
      ...values,
      churchAddress: {
        ...values.churchAddress,
        [field]: value
      }
    });
  };

  const updateSocialMedia = (platform, value) => {
    setValues({
      ...values,
      socialMedia: {
        ...values.socialMedia,
        [platform]: value
      }
    });
  };

  const updateGivingOptions = (field, value) => {
    setValues({
      ...values,
      givingOptions: {
        ...values.givingOptions,
        [field]: value
      }
    });
  };

  const updateEmailSettings = (field, value) => {
    setValues({
      ...values,
      emailSettings: {
        ...values.emailSettings,
        [field]: value
      }
    });
  };

  const updateSermonSettings = (field, value) => {
    setValues({
      ...values,
      sermonSettings: {
        ...values.sermonSettings,
        [field]: value
      }
    });
  };

  const updateEventSettings = (field, value) => {
    setValues({
      ...values,
      eventSettings: {
        ...values.eventSettings,
        [field]: value
      }
    });
  };

  const updatePrayerRequestSettings = (field, value) => {
    setValues({
      ...values,
      prayerRequestSettings: {
        ...values.prayerRequestSettings,
        [field]: value
      }
    });
  };

  const updateTestimonialSettings = (field, value) => {
    setValues({
      ...values,
      testimonialSettings: {
        ...values.testimonialSettings,
        [field]: value
      }
    });
  };

  const updateBlogSettings = (field, value) => {
    setValues({
      ...values,
      blogSettings: {
        ...values.blogSettings,
        [field]: value
      }
    });
  };

  const updateMinistrySettings = (field, value) => {
    setValues({
      ...values,
      ministrySettings: {
        ...values.ministrySettings,
        [field]: value
      }
    });
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-2xl font-bold mb-6">System Settings</h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Church Information */}
        <div>
          <h3 className="text-lg font-semibold mb-4">Church Information</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Church Name*</label>
              <input
                type="text"
                name="churchName"
                value={values.churchName}
                onChange={handleChange}
                className="form-input"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Pastor Name</label>
              <input
                type="text"
                name="pastorName"
                value={values.pastorName}
                onChange={handleChange}
                className="form-input"
              />
            </div>
          </div>

          <div className="mt-4">
            <label className="block text-sm font-medium mb-1">Church Address</label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input
                type="text"
                placeholder="Street"
                value={values.churchAddress.street || ''}
                onChange={(e) => updateAddress('street', e.target.value)}
                className="form-input"
              />
              <input
                type="text"
                placeholder="City"
                value={values.churchAddress.city || ''}
                onChange={(e) => updateAddress('city', e.target.value)}
                className="form-input"
              />
              <input
                type="text"
                placeholder="State"
                value={values.churchAddress.state || ''}
                onChange={(e) => updateAddress('state', e.target.value)}
                className="form-input"
              />
              <input
                type="text"
                placeholder="ZIP Code"
                value={values.churchAddress.zipCode || ''}
                onChange={(e) => updateAddress('zipCode', e.target.value)}
                className="form-input"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium mb-1">Contact Email</label>
              <input
                type="email"
                name="contactEmail"
                value={values.contactEmail}
                onChange={handleChange}
                className="form-input"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Contact Phone</label>
              <input
                type="tel"
                name="contactPhone"
                value={values.contactPhone}
                onChange={handleChange}
                className="form-input"
              />
            </div>
          </div>
        </div>

        {/* Service Times */}
        <div>
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold">Service Times</h3>
            <button
              type="button"
              onClick={addServiceTime}
              className="text-sm text-[#FF7E45] hover:text-[#F4B942]"
            >
              + Add Service Time
            </button>
          </div>
          {values.serviceTimes.map((service, index) => (
            <div key={index} className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-2">
              <input
                type="text"
                placeholder="Day (e.g., Sunday)"
                value={service.day}
                onChange={(e) => updateServiceTime(index, 'day', e.target.value)}
                className="form-input"
              />
              <input
                type="text"
                placeholder="Time (e.g., 10:00 AM)"
                value={service.time}
                onChange={(e) => updateServiceTime(index, 'time', e.target.value)}
                className="form-input"
              />
              <div className="flex">
                <input
                  type="text"
                  placeholder="Description"
                  value={service.description}
                  onChange={(e) => updateServiceTime(index, 'description', e.target.value)}
                  className="form-input flex-1"
                />
                <button
                  type="button"
                  onClick={() => removeServiceTime(index)}
                  className="ml-2 text-red-500 hover:text-red-700"
                >
                  <i className="fas fa-times"></i>
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Social Media */}
        <div>
          <h3 className="text-lg font-semibold mb-4">Social Media</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center">
              <i className="fab fa-facebook text-blue-600 mr-2 w-5"></i>
              <input
                type="url"
                placeholder="Facebook URL"
                value={values.socialMedia.facebook || ''}
                onChange={(e) => updateSocialMedia('facebook', e.target.value)}
                className="form-input flex-1"
              />
            </div>
            <div className="flex items-center">
              <i className="fab fa-instagram text-pink-600 mr-2 w-5"></i>
              <input
                type="url"
                placeholder="Instagram URL"
                value={values.socialMedia.instagram || ''}
                onChange={(e) => updateSocialMedia('instagram', e.target.value)}
                className="form-input flex-1"
              />
            </div>
            <div className="flex items-center">
              <i className="fab fa-twitter text-blue-400 mr-2 w-5"></i>
              <input
                type="url"
                placeholder="Twitter URL"
                value={values.socialMedia.twitter || ''}
                onChange={(e) => updateSocialMedia('twitter', e.target.value)}
                className="form-input flex-1"
              />
            </div>
            <div className="flex items-center">
              <i className="fab fa-youtube text-red-600 mr-2 w-5"></i>
              <input
                type="url"
                placeholder="YouTube URL"
                value={values.socialMedia.youtube || ''}
                onChange={(e) => updateSocialMedia('youtube', e.target.value)}
                className="form-input flex-1"
              />
            </div>
          </div>
        </div>

        {/* Live Stream */}
        <div>
          <h3 className="text-lg font-semibold mb-4">Live Stream</h3>
          <div>
            <label className="block text-sm font-medium mb-1">Live Stream URL</label>
            <input
              type="url"
              name="liveStreamUrl"
              value={values.liveStreamUrl}
              onChange={handleChange}
              className="form-input"
              placeholder="https://youtube.com/live/..."
            />
          </div>
        </div>

        {/* Giving Options */}
        <div>
          <h3 className="text-lg font-semibold mb-4">Giving Options</h3>
          <div className="flex items-center mb-4">
            <input
              type="checkbox"
              name="enableOnlineGiving"
              checked={values.givingOptions.enableOnlineGiving || false}
              onChange={(e) => updateGivingOptions('enableOnlineGiving', e.target.checked)}
              className="form-checkbox h-4 w-4 text-[#FF7E45]"
              id="enableOnlineGiving"
            />
            <label htmlFor="enableOnlineGiving" className="ml-2 text-sm font-medium">
              Enable Online Giving
            </label>
          </div>
          {values.givingOptions.enableOnlineGiving && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Stripe Publishable Key</label>
                <input
                  type="text"
                  value={values.givingOptions.stripePublishableKey || ''}
                  onChange={(e) => updateGivingOptions('stripePublishableKey', e.target.value)}
                  className="form-input"
                  placeholder="pk_test_..."
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Stripe Secret Key</label>
                <input
                  type="password"
                  value={values.givingOptions.stripeSecretKey || ''}
                  onChange={(e) => updateGivingOptions('stripeSecretKey', e.target.value)}
                  className="form-input"
                  placeholder="sk_test_..."
                />
              </div>
            </div>
          )}
        </div>

        {/* Email Settings */}
        <div>
          <h3 className="text-lg font-semibold mb-4">Email Settings</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">SMTP Host</label>
              <input
                type="text"
                value={values.emailSettings.host || ''}
                onChange={(e) => updateEmailSettings('host', e.target.value)}
                className="form-input"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">SMTP Port</label>
              <input
                type="number"
                value={values.emailSettings.port || ''}
                onChange={(e) => updateEmailSettings('port', parseInt(e.target.value) || '')}
                className="form-input"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">SMTP Username</label>
              <input
                type="text"
                value={values.emailSettings.auth?.user || ''}
                onChange={(e) => updateEmailSettings('auth', {...values.emailSettings.auth, user: e.target.value})}
                className="form-input"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">SMTP Password</label>
              <input
                type="password"
                value={values.emailSettings.auth?.pass || ''}
                onChange={(e) => updateEmailSettings('auth', {...values.emailSettings.auth, pass: e.target.value})}
                className="form-input"
              />
            </div>
            <div className="flex items-center">
              <input
                type="checkbox"
                checked={values.emailSettings.secure || false}
                onChange={(e) => updateEmailSettings('secure', e.target.checked)}
                className="form-checkbox h-4 w-4 text-[#FF7E45]"
                id="secureSMTP"
              />
              <label htmlFor="secureSMTP" className="ml-2 text-sm font-medium">
                Use SSL/TLS
              </label>
              </div>
            </div>
          </div>

          {/* Module Settings */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Module Settings</h3>
            
            {/* Sermon Settings */}
            <div className="mb-4">
              <h4 className="font-medium mb-2">Sermon Settings</h4>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={values.sermonSettings.autoPublish || false}
                  onChange={(e) => updateSermonSettings('autoPublish', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="autoPublishSermons"
                />
                <label htmlFor="autoPublishSermons" className="ml-2 text-sm font-medium">
                  Auto-publish new sermons
                </label>
              </div>
            </div>

            {/* Blog Settings */}
            <div className="mb-4">
              <h4 className="font-medium mb-2">Blog Settings</h4>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={values.blogSettings.enableComments || false}
                  onChange={(e) => updateBlogSettings('enableComments', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="enableBlogComments"
                />
                <label htmlFor="enableBlogComments" className="ml-2 text-sm font-medium">
                  Enable blog comments
                </label>
              </div>
              <div className="flex items-center mt-2">
                <input
                  type="checkbox"
                  checked={values.blogSettings.requireApproval || false}
                  onChange={(e) => updateBlogSettings('requireApproval', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="requireBlogApproval"
                />
                <label htmlFor="requireBlogApproval" className="ml-2 text-sm font-medium">
                  Require blog post approval
                </label>
              </div>
            </div>

            {/* Ministry Settings */}
            <div className="mb-4">
              <h4 className="font-medium mb-2">Ministry Settings</h4>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={values.ministrySettings.enableVolunteerSignup || false}
                  onChange={(e) => updateMinistrySettings('enableVolunteerSignup', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="enableVolunteerSignup"
                />
                <label htmlFor="enableVolunteerSignup" className="ml-2 text-sm font-medium">
                  Enable volunteer signup
                </label>
              </div>
              <div className="flex items-center mt-2">
                <input
                  type="checkbox"
                  checked={values.ministrySettings.showLeaders || true}
                  onChange={(e) => updateMinistrySettings('showLeaders', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="showMinistryLeaders"
                />
                <label htmlFor="showMinistryLeaders" className="ml-2 text-sm font-medium">
                  Show ministry leaders publicly
                </label>
              </div>
            </div>

            {/* Event Settings */}
            <div className="mb-4">
              <h4 className="font-medium mb-2">Event Settings</h4>
              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  checked={values.eventSettings.requireApproval || false}
                  onChange={(e) => updateEventSettings('requireApproval', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="requireEventApproval"
                />
                <label htmlFor="requireEventApproval" className="ml-2 text-sm font-medium">
                  Require event approval
                </label>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={values.eventSettings.allowPublicRSVP || true}
                  onChange={(e) => updateEventSettings('allowPublicRSVP', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="allowPublicRSVP"
                />
                <label htmlFor="allowPublicRSVP" className="ml-2 text-sm font-medium">
                  Allow public RSVP
                </label>
              </div>
            </div>

            {/* Prayer Request Settings */}
            <div className="mb-4">
              <h4 className="font-medium mb-2">Prayer Request Settings</h4>
              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  checked={values.prayerRequestSettings.requireApproval || true}
                  onChange={(e) => updatePrayerRequestSettings('requireApproval', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="requirePrayerApproval"
                />
                <label htmlFor="requirePrayerApproval" className="ml-2 text-sm font-medium">
                  Require prayer request approval
                </label>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={values.prayerRequestSettings.allowAnonymous || true}
                  onChange={(e) => updatePrayerRequestSettings('allowAnonymous', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="allowAnonymousPrayer"
                />
                <label htmlFor="allowAnonymousPrayer" className="ml-2 text-sm font-medium">
                  Allow anonymous prayer requests
                </label>
              </div>
            </div>

            {/* Testimonial Settings */}
            <div>
              <h4 className="font-medium mb-2">Testimonial Settings</h4>
              <div className="flex items-center mb-2">
                <input
                  type="checkbox"
                  checked={values.testimonialSettings.requireApproval || true}
                  onChange={(e) => updateTestimonialSettings('requireApproval', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="requireTestimonialApproval"
                />
                <label htmlFor="requireTestimonialApproval" className="ml-2 text-sm font-medium">
                  Require testimonial approval
                </label>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={values.testimonialSettings.allowVideo || true}
                  onChange={(e) => updateTestimonialSettings('allowVideo', e.target.checked)}
                  className="form-checkbox h-4 w-4 text-[#FF7E45]"
                  id="allowVideoTestimonials"
                />
                <label htmlFor="allowVideoTestimonials" className="ml-2 text-sm font-medium">
                  Allow video testimonials
                </label>
              </div>
            </div>
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <button type="button" onClick={() => setValues(settings)} className="btn btn-outline">
              Reset
            </button>
            <button type="submit" className="btn btn-primary">
              Save Settings
            </button>
          </div>
        </form>
      </div>
    );
  };

// Main AdminPage Component
const AdminPage = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [stats, setStats] = useState({});
  const [recentActivity, setRecentActivity] = useState([]);
  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [sermons, setSermons] = useState([]);
  const [users, setUsers] = useState([]);
  const [donations, setDonations] = useState([]);
  const [prayerRequests, setPrayerRequests] = useState([]);
  const [testimonials, setTestimonials] = useState([]);
  const [ministries, setMinistries] = useState([]);
  const [blogPosts, setBlogPosts] = useState([]);
  const [settings, setSettings] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEventModalOpen, setIsEventModalOpen] = useState(false);
  const [isSermonModalOpen, setIsSermonModalOpen] = useState(false);
  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [selectedSermon, setSelectedSermon] = useState(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deleteType, setDeleteType] = useState('');
  const [deleteItem, setDeleteItem] = useState(null);
  const [liveStreamStatus, setLiveStreamStatus] = useState(false);
  const [liveStats, setLiveStats] = useState(null);
  const [isUserAdmin, setIsUserAdmin] = useState(false);
  const [accessChecked, setAccessChecked] = useState(false);
  
  const { user } = useAuth();
  const alert = useAlert();
  const navigate = useNavigate();

  useEffect(() => {
    document.title = "SMC: - Admin | St. Micheal`s & All Angels Church | Ifite-Awka";
    checkAdminAccess();
  }, []);

  const checkAdminAccess = () => {
  // Ensure user is logged in
  if (!user) {
    alert.error("Please log in to access admin features");
    navigate("/login");
    return false;
  }

  // Normalize role
  const role = (user?.role || "guest").toLowerCase();

  // Allow only admins and moderators
  if (role !== "admin" && role !== "moderator") {
    alert.error("Admin or Moderator privileges required");
    navigate("/login");
    return false;
  }

  // Mark access as checked
  setIsUserAdmin(true);
  setAccessChecked(true);

  // Load dashboard data
  fetchDashboardData();
  checkLiveStreamStatus();
  fetchSettings();

  // Start periodic live stream check
  const liveStreamInterval = setInterval(checkLiveStreamStatus, 30000);

  // Cleanup interval when component unmounts
  return () => clearInterval(liveStreamInterval);
};


  const fetchDashboardData = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Axios automatically throws errors for non-2xx responses
      // So we use try/catch instead of Promise.allSettled
      try {
        const [
          statsResponse, 
          activityResponse, 
          usersResponse,
          donationsResponse,
          prayerResponse,
          blogResponse,
          ministriesResponse,
          testimonialsResponse,
          eventsResponse,
          sermonsResponse
        ] = await Promise.all([
          apiClient.get(ADMIN_ENDPOINTS.DASHBOARD.STATS),
          apiClient.get(ADMIN_ENDPOINTS.DASHBOARD.ACTIVITY),
          apiClient.get(ADMIN_ENDPOINTS.USERS.BASE),
          apiClient.get(ADMIN_ENDPOINTS.DONATIONS.BASE),
          apiClient.get(ADMIN_ENDPOINTS.PRAYER_REQUESTS.BASE),
          apiClient.get(ADMIN_ENDPOINTS.BLOG.BASE),
          apiClient.get(ADMIN_ENDPOINTS.MINISTRIES.BASE),
          apiClient.get(ADMIN_ENDPOINTS.TESTIMONIALS.BASE),
          apiClient.get(ADMIN_ENDPOINTS.EVENTS.BASE),
          apiClient.get(ADMIN_ENDPOINTS.SERMONS.BASE)
        ]);

        setStats(statsResponse);
        setRecentActivity(activityResponse);
        setUsers(usersResponse.users || usersResponse);
        setDonations(donationsResponse.donations || donationsResponse);
        setPrayerRequests(prayerResponse.prayers || prayerResponse);
        setBlogPosts(blogResponse.posts || blogResponse);
        setMinistries(ministriesResponse.ministries || ministriesResponse);
        setTestimonials(testimonialsResponse.testimonials || testimonialsResponse);
        setUpcomingEvents(eventsResponse.events || eventsResponse);
        setSermons(sermonsResponse.sermons || sermonsResponse);

      } catch (error) {
        console.error('Error fetching dashboard data:', error);
        // Axios error response is available in error.response
        const errorMessage = error.response?.data?.message || 'Failed to load dashboard data. Please try again.';
        setError(errorMessage);
        alert.error(errorMessage);
      }

    } catch (error) {
      console.error('Unexpected error:', error);
      setError('An unexpected error occurred');
      alert.error('An unexpected error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  // Settings Handlers
  const fetchSettings = async () => {
    try {
      const response = await apiClient.get(ADMIN_ENDPOINTS.SETTINGS.BASE);
      setSettings(response.settings || response);
    } catch (error) {
      console.error('Error fetching settings:', error);
      const errorMessage = error.response?.data?.message || 'Failed to load settings';
      alert.error(errorMessage);
    }
  };

  const handleUpdateSettings = async (settingsData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.SETTINGS.UPDATE, settingsData);
      setSettings(response.settings || response);
      alert.success('Settings updated successfully');
      return { success: true, message: 'Settings updated successfully' };
    } catch (error) {
      console.error('Error updating settings:', error);
      const errorMessage = error.response?.data?.message || 'Failed to update settings';
      alert.error(errorMessage);
      return { success: false, message: errorMessage };
    }
  };

  const handleResetSettings = async () => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.SETTINGS.RESET);
      setSettings(response.settings || response);
      alert.success('Settings reset successfully');
      return { success: true, message: 'Settings reset successfully' };
    } catch (error) {
      console.error('Error resetting settings:', error);
      const errorMessage = error.response?.data?.message || 'Failed to reset settings';
      alert.error(errorMessage);
      return { success: false, message: errorMessage };
    }
  };

  // Live Stream Handlers
  const checkLiveStreamStatus = async () => {
    try {
      const response = await apiClient.get(ADMIN_ENDPOINTS.SERMONS.LIVE);
      setLiveStreamStatus(response.isLive || false);
      setLiveStats(response.stats || null);
    } catch (error) {
      console.error('Error checking live stream status:', error);
      setLiveStreamStatus(false);
    }
  };

  const handleStartLiveStream = async () => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.SERMONS.LIVE_START);
      setLiveStreamStatus(true);
      alert.success('Live stream started successfully');
      return { success: true, message: 'Live stream started successfully' };
    } catch (error) {
      console.error('Error starting live stream:', error);
      const errorMessage = error.response?.data?.message || 'Failed to start live stream';
      alert.error(errorMessage);
      return { success: false, message: errorMessage };
    }
  };

  const handleStopLiveStream = async () => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.SERMONS.LIVE_STOP);
      setLiveStreamStatus(false);
      setLiveStats(null);
      alert.success('Live stream ended successfully');
      return { success: true, message: 'Live stream ended successfully' };
    } catch (error) {
      console.error('Error stopping live stream:', error);
      const errorMessage = error.response?.data?.message || 'Failed to stop live stream';
      alert.error(errorMessage);
      return { success: false, message: errorMessage };
    }
  };

  // User Management Handlers
  const handleCreateUser = async (userData) => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.USERS.CREATE, userData);
      setUsers(prev => [...prev, response.user]);
      return { success: true, message: 'User created successfully' };
    } catch (error) {
      console.error('Error creating user:', error);
      const errorMessage = error.response?.data?.message || 'Failed to create user';
      return { success: false, message: errorMessage };
    }
  };

  const handleUpdateUser = async (userId, userData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.USERS.UPDATE(userId), userData);
      setUsers(prev => prev.map(user => user._id === userId ? response.user : user));
      return { success: true, message: 'User updated successfully' };
    } catch (error) {
      console.error('Error updating user:', error);
      const errorMessage = error.response?.data?.message || 'Failed to update user';
      return { success: false, message: errorMessage };
    }
  };

  const handleDeleteUser = async (userId) => {
    try {
      await apiClient.delete(ADMIN_ENDPOINTS.USERS.DELETE(userId));
      setUsers(prev => prev.filter(user => user._id !== userId));
      return { success: true, message: 'User deleted successfully' };
    } catch (error) {
      console.error('Error deleting user:', error);
      const errorMessage = error.response?.data?.message || 'Failed to delete user';
      return { success: false, message: errorMessage };
    }
  };

  // Ministry Management Handlers
  const handleCreateMinistry = async (ministryData) => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.MINISTRIES.CREATE, ministryData);
      setMinistries(prev => [...prev, response.ministry]);
      return { success: true, message: 'Ministry created successfully' };
    } catch (error) {
      console.error('Error creating ministry:', error);
      return { success: false, message: error.message || 'Failed to create ministry' };
    }
  };

  const handleUpdateMinistry = async (ministryId, ministryData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.MINISTRIES.UPDATE(ministryId), ministryData);
      setMinistries(prev => prev.map(ministry => ministry._id === ministryId ? response.ministry : ministry));
      return { success: true, message: 'Ministry updated successfully' };
    } catch (error) {
      console.error('Error updating ministry:', error);
      return { success: false, message: error.message || 'Failed to update ministry' };
    }
  };

  const handleDeleteMinistry = async (ministryId) => {
    try {
      await apiClient.delete(ADMIN_ENDPOINTS.MINISTRIES.DELETE(ministryId));
      setMinistries(prev => prev.filter(ministry => ministry._id !== ministryId));
      return { success: true, message: 'Ministry deleted successfully' };
    } catch (error) {
      console.error('Error deleting ministry:', error);
      return { success: false, message: error.message || 'Failed to delete ministry' };
    }
  };

  // Testimonial Management Handlers
  const handleCreateTestimonial = async (testimonialData) => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.TESTIMONIALS.CREATE, testimonialData);
      setTestimonials(prev => [...prev, response.testimonial]);
      return { success: true, message: 'Testimonial created successfully' };
    } catch (error) {
      console.error('Error creating testimonial:', error);
      return { success: false, message: error.message || 'Failed to create testimonial' };
    }
  };

  const handleUpdateTestimonial = async (testimonialId, testimonialData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.TESTIMONIALS.UPDATE(testimonialId), testimonialData);
      setTestimonials(prev => prev.map(testimonial => testimonial._id === testimonialId ? response.testimonial : testimonial));
      return { success: true, message: 'Testimonial updated successfully' };
    } catch (error) {
      console.error('Error updating testimonial:', error);
      return { success: false, message: error.message || 'Failed to update testimonial' };
    }
  };

  const handleDeleteTestimonial = async (testimonialId) => {
    try {
      await apiClient.delete(ADMIN_ENDPOINTS.TESTIMONIALS.DELETE(testimonialId));
      setTestimonials(prev => prev.filter(testimonial => testimonial._id !== testimonialId));
      return { success: true, message: 'Testimonial deleted successfully' };
    } catch (error) {
      console.error('Error deleting testimonial:', error);
      return { success: false, message: error.message || 'Failed to delete testimonial' };
    }
  };

  // Blog Management Handlers
  const handleCreateBlogPost = async (blogData) => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.BLOG.CREATE, blogData);
      setBlogPosts(prev => [...prev, response.post]);
      return { success: true, message: 'Blog post created successfully' };
    } catch (error) {
      console.error('Error creating blog post:', error);
      return { success: false, message: error.message || 'Failed to create blog post' };
    }
  };

  const handleUpdateBlogPost = async (blogId, blogData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.BLOG.UPDATE(blogId), blogData);
      setBlogPosts(prev => prev.map(post => post._id === blogId ? response.post : post));
      return { success: true, message: 'Blog post updated successfully' };
    } catch (error) {
      console.error('Error updating blog post:', error);
      return { success: false, message: error.message || 'Failed to update blog post' };
    }
  };

  const handleDeleteBlogPost = async (blogId) => {
    try {
      await apiClient.delete(ADMIN_ENDPOINTS.BLOG.DELETE(blogId));
      setBlogPosts(prev => prev.filter(post => post._id !== blogId));
      return { success: true, message: 'Blog post deleted successfully' };
    } catch (error) {
      console.error('Error deleting blog post:', error);
      return { success: false, message: error.message || 'Failed to delete blog post' };
    }
  };

  // Event Management Handlers
  const handleCreateEvent = async (eventData) => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.EVENTS.CREATE, eventData);
      setUpcomingEvents(prev => [...prev, response.event]);
      return { success: true, message: 'Event created successfully' };
    } catch (error) {
      console.error('Error creating event:', error);
      return { success: false, message: error.message || 'Failed to create event' };
    }
  };

  const handleUpdateEvent = async (eventId, eventData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.EVENTS.UPDATE(eventId), eventData);
      setUpcomingEvents(prev => prev.map(event => event._id === eventId ? response.event : event));
      return { success: true, message: 'Event updated successfully' };
    } catch (error) {
      console.error('Error updating event:', error);
      return { success: false, message: error.message || 'Failed to update event' };
    }
  };

  const handleDeleteEvent = async (eventId) => {
    try {
      await apiClient.delete(ADMIN_ENDPOINTS.EVENTS.DELETE(eventId));
      setUpcomingEvents(prev => prev.filter(event => event._id !== eventId));
      return { success: true, message: 'Event deleted successfully' };
    } catch (error) {
      console.error('Error deleting event:', error);
      return { success: false, message: error.message || 'Failed to delete event' };
    }
  };

  // Sermon Management Handlers
  const handleCreateSermon = async (sermonData) => {
    try {
      const response = await apiClient.post(ADMIN_ENDPOINTS.SERMONS.CREATE, sermonData);
      setSermons(prev => [...prev, response.sermon]);
      return { success: true, message: 'Sermon created successfully' };
    } catch (error) {
      console.error('Error creating sermon:', error);
      return { success: false, message: error.message || 'Failed to create sermon' };
    }
  };

  const handleUpdateSermon = async (sermonId, sermonData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.SERMONS.UPDATE(sermonId), sermonData);
      setSermons(prev => prev.map(sermon => sermon._id === sermonId ? response.sermon : sermon));
      return { success: true, message: 'Sermon updated successfully' };
    } catch (error) {
      console.error('Error updating sermon:', error);
      return { success: false, message: error.message || 'Failed to update sermon' };
    }
  };

  const handleDeleteSermon = async (sermonId) => {
    try {
      await apiClient.delete(ADMIN_ENDPOINTS.SERMONS.DELETE(sermonId));
      setSermons(prev => prev.filter(sermon => sermon._id !== sermonId));
      return { success: true, message: 'Sermon deleted successfully' };
    } catch (error) {
      console.error('Error deleting sermon:', error);
      return { success: false, message: error.message || 'Failed to delete sermon' };
    }
  };

  // Donation Management Handlers
  const handleUpdateDonation = async (donationId, donationData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.DONATIONS.UPDATE(donationId), donationData);
      setDonations(prev => prev.map(donation => donation._id === donationId ? response.donation : donation));
      return { success: true, message: 'Donation updated successfully' };
    } catch (error) {
      console.error('Error updating donation:', error);
      return { success: false, message: error.message || 'Failed to update donation' };
    }
  };

  // Prayer Request Management Handlers
  const handleUpdatePrayerRequest = async (prayerId, prayerData) => {
    try {
      const response = await apiClient.put(ADMIN_ENDPOINTS.PRAYER_REQUESTS.UPDATE(prayerId), prayerData);
      setPrayerRequests(prev => prev.map(prayer => prayer._id === prayerId ? response.prayer : prayer));
      return { success: true, message: 'Prayer request updated successfully' };
    } catch (error) {
      console.error('Error updating prayer request:', error);
      return { success: false, message: error.message || 'Failed to update prayer request' };
    }
  };

  const handleDeletePrayerRequest = async (prayerId) => {
    try {
      await apiClient.delete(ADMIN_ENDPOINTS.PRAYER_REQUESTS.DELETE(prayerId));
      setPrayerRequests(prev => prev.filter(prayer => prayer._id !== prayerId));
      return { success: true, message: 'Prayer request deleted successfully' };
    } catch (error) {
      console.error('Error deleting prayer request:', error);
      return { success: false, message: error.message || 'Failed to delete prayer request' };
    }
  };

  /* =============== Modal Handlers ================== */

  // Event Modal
  const openEventModal = (event = null) => {
    setSelectedEvent(event);
    setIsEventModalOpen(true);
  };

  const closeEventModal = () => {
    setSelectedEvent(null);
    setIsEventModalOpen(false);
  };


  // Sermon Modal
  const openSermonModal = (sermon = null) => {
    setSelectedSermon(sermon);
    setIsSermonModalOpen(true);
  };

  const closeSermonModal = () => {
    setSelectedSermon(null);
    setIsSermonModalOpen(false);
  };


  // Setting Modal
  const openSettingsModal = () => {
    setIsSettingsModalOpen(true);
  };

  const closeSettingsModal = () => {
    setIsSettingsModalOpen(false);
  };


  // Delete Modal
  const openDeleteModal = (item, type) => {
    setDeleteItem(item);
    setDeleteType(type);
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setDeleteItem(null);
    setDeleteType('');
    setIsDeleteModalOpen(false);
  };

  const handleConfirmDelete = async () => {
    try {
      let result;
      switch (deleteType) {
        case 'user':
          result = await handleDeleteUser(deleteItem._id);
          break;
        case 'ministry':
          result = await handleDeleteMinistry(deleteItem._id);
          break;
        case 'testimonial':
          result = await handleDeleteTestimonial(deleteItem._id);
          break;
        case 'blog':
          result = await handleDeleteBlogPost(deleteItem._id);
          break;
        case 'event':
          result = await handleDeleteEvent(deleteItem._id);
          break;
        case 'sermon':
          result = await handleDeleteSermon(deleteItem._id);
          break;
        case 'prayer':
          result = await handleDeletePrayerRequest(deleteItem._id);
          break;
        default:
          result = { success: false, message: 'Unknown item type' };
      }

      if (result.success) {
        alert.success(result.message);
      } else {
        alert.error(result.message);
      }
    } catch (error) {
      alert.error('An error occurred during deletion');
    } finally {
      closeDeleteModal();
    }
  };

  const handleEventSubmit = async (eventData) => {
    try {
      let result;
      if (selectedEvent) {
        result = await handleUpdateEvent(selectedEvent._id, eventData);
      } else {
        result = await handleCreateEvent(eventData);
      }

      if (result.success) {
        alert.success(result.message);
        closeEventModal();
      } else {
        alert.error(result.message);
      }
    } catch (error) {
      alert.error('An error occurred while saving the event');
    }
  };

  const handleSermonSubmit = async (sermonData) => {
    try {
      let result;
      if (selectedSermon) {
        result = await handleUpdateSermon(selectedSermon._id, sermonData);
      } else {
        result = await handleCreateSermon(sermonData);
      }

      if (result.success) {
        alert.success(result.message);
        closeSermonModal();
      } else {
        alert.error(result.message);
      }
    } catch (error) {
      alert.error('An error occurred while saving the sermon');
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const formatTime = (timeString) => {
    if (!timeString) return 'N/A';
    return new Date(`2000-01-01T${timeString}`).toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (isLoading) {
    return <Loader type="spinner" text="Loading admin dashboard..." fullScreen />;
  }

   if (!accessChecked) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader type="spinner" text="Checking admin access..." fullScreen />
      </div>
    );
  }

  if (!isUserAdmin) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="max-w-md w-full bg-white rounded-lg shadow-md p-6 text-center">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <i className="fas fa-exclamation-triangle text-red-600 text-2xl"></i>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h2>
          <p className="text-gray-600 mb-4">Admin privileges are required to access this page.</p>
          <button
            onClick={() => navigate('/')}
            className="btn btn-primary"
          >
            Return to Homepage
          </button>
        </div>
      </div>
    );
  }


  if (error) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-4xl mx-auto text-center">
            <div className="bg-red-50 border border-red-200 rounded-lg p-6">
              <i className="fas fa-exclamation-triangle text-red-500 text-2xl mb-3"></i>
              <h2 className="text-xl font-semibold text-red-800 mb-2">Error</h2>
              <p className="text-red-600">{error}</p>
              <button
                onClick={fetchDashboardData}
                className="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
              >
                Try Again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const navItems = [
    { label: 'Overview', icon: 'fas fa-tachometer-alt', tabName: 'overview' },
    { label: 'Users', icon: 'fas fa-users', tabName: 'users' },
    { label: 'Ministries', icon: 'fas fa-hands-helping', tabName: 'ministries' },
    { label: 'Testimonials', icon: 'far fa-comment-dots', tabName: 'testimonials' },
    { label: 'Blog', icon: 'far fa-newspaper', tabName: 'blog' },
    { label: 'Events', icon: 'far fa-calendar-alt', tabName: 'events' },
    { label: 'Sermons', icon: 'fas fa-microphone-alt', tabName: 'sermons' },
    { label: 'Donations', icon: 'fas fa-hand-holding-usd', tabName: 'donations' },
    { label: 'Prayer Requests', icon: 'fas fa-praying-hands', tabName: 'prayer' },
    { label: 'Live Stream', icon: 'fas fa-broadcast-tower', tabName: 'live' },
    { label: 'Settings', icon: 'fas fa-cog', tabName: 'settings' },
  ];

  const eventColumns = [
    { key: 'title', title: 'Event' },
    { key: 'date', title: 'Date', render: (event) => formatDate(event.startTime) },
    { key: 'time', title: 'Time', render: (event) => formatTime(event.startTime) },
    { key: 'location', title: 'Location' },
    { key: 'rsvps', title: 'RSVPs', render: (event) => event.rsvpCount || 0 },
    { 
      key: 'status', 
      title: 'Status', 
      render: (event) => (
        <span className={`text-xs px-2 py-1 rounded ${event.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>
          {event.status || 'Unknown'}
        </span>
      )
    }
  ];

  const sermonColumns = [
    { key: 'title', title: 'Title' },
    { key: 'speaker', title: 'Speaker', render: (sermon) => sermon.speakerName || sermon.speaker },
    { key: 'date', title: 'Date', render: (sermon) => formatDate(sermon.date) },
    { key: 'scripture', title: 'Scripture' },
    { 
      key: 'type', 
      title: 'Type', 
      render: (sermon) => (
        <span className={`text-xs px-2 py-1 rounded ${sermon.isLive ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-800'}`}>
          {sermon.isLive ? 'Live' : 'Recorded'}
        </span>
      )
    }
  ];

  return (
    <div className="page">
      <section className="bg-gradient-to-r from-[#333] to-[#555] py-8 px-4">
        <div className="container mx-auto">
          <h1 className="text-3xl font-bold text-white">Admin Dashboard</h1>
        </div>
      </section>

      <section className="py-8">
        <div className="container mx-auto px-4">
          <div className="flex flex-col lg:flex-row">
            <div className="lg:w-1/5 mb-6 lg:mb-0">
              <div className="bg-white rounded-lg shadow-md p-4">
                <nav>
                  <ul className="space-y-1">
                    {navItems.map(item => (
                      <SidebarButton
                        key={item.tabName}
                        label={item.label}
                        icon={item.icon}
                        tabName={item.tabName}
                        activeTab={activeTab}
                        onClick={setActiveTab}
                      />
                    ))}
                  </ul>
                </nav>
              </div>
            </div>

            <div className="lg:w-4/5 lg:pl-8">
              {activeTab === 'overview' && (
                <div>
                  <div className="mb-6">
                    <h2 className="text-2xl font-bold mb-4">Dashboard Overview</h2>
                    <p className="text-gray-600 mb-4">Welcome to the admin dashboard. Here's a summary of your church's activity.</p>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <StatCard
                      title="Total Members"
                      value={stats.totalMembers || '0'}
                      change={stats.membersChange || '0% from last month'}
                      changeType={stats.membersChangeType || 'increase'}
                      icon="fa-users"
                      iconBgColor="bg-blue-100"
                      iconTextColor="text-blue-500"
                    />
                    <StatCard
                      title="Weekly Attendance"
                      value={stats.weeklyAttendance || '0'}
                      change={stats.attendanceChange || '0% from last week'}
                      changeType={stats.attendanceChangeType || 'increase'}
                      icon="fa-user-check"
                      iconBgColor="bg-green-100"
                      iconTextColor="text-green-500"
                    />
                    <StatCard
                      title="Online Viewers"
                      value={stats.onlineViewers || '0'}
                      change={stats.viewersChange || '0% from last week'}
                      changeType={stats.viewersChangeType || 'increase'}
                      icon="fa-video"
                      iconBgColor="bg-purple-100"
                      iconTextColor="text-purple-500"
                    />
                    <StatCard
                      title="Weekly Giving"
                      value={stats.weeklyGiving ? `$${stats.weeklyGiving.toLocaleString()}` : '$0'}
                      change={stats.givingChange || '0% from last week'}
                      changeType={stats.givingChangeType || 'increase'}
                      icon="fa-hand-holding-usd"
                      iconBgColor="bg-yellow-100"
                      iconTextColor="text-yellow-500"
                    />
                  </div>

                  {liveStreamStatus && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse mr-2"></div>
                        <span className="font-medium text-red-700">Live Stream is Active</span>
                        <button 
                          onClick={() => setActiveTab('live')}
                          className="ml-auto text-red-600 hover:text-red-800 text-sm font-medium"
                        >
                          Manage Live Stream <i className="fas fa-arrow-right ml-1"></i>
                        </button>
                      </div>
                    </div>
                  )}

                  <div className="bg-white rounded-lg shadow-md p-6 mb-8">
                    <h3 className="text-xl font-bold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.length > 0 ? (
                        recentActivity.map((activity, index) => (
                          <ActivityItem
                            key={index}
                            icon={activity.icon || 'fa-info-circle'}
                            bgColor={activity.bgColor || 'bg-gray-100'}
                            text={activity.text || 'Unknown activity'}
                            time={activity.time || 'Unknown time'}
                          />
                        ))
                      ) : (
                        <p className="text-gray-500">No recent activity</p>
                      )}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                    <div className="bg-white rounded-lg shadow-md p-6">
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="font-semibold">Prayer Requests</h4>
                        <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                          <i className="fas fa-praying-hands text-blue-500"></i>
                        </div>
                      </div>
                      <p className="text-3xl font-bold">{stats.prayerRequests || 0}</p>
                      <p className="text-sm text-gray-500">Pending: {stats.pendingPrayers || 0}</p>
                    </div>
                    
                    <div className="bg-white rounded-lg shadow-md p-6">
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="font-semibold">Events</h4>
                        <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                          <i className="far fa-calendar-alt text-green-500"></i>
                        </div>
                      </div>
                      <p className="text-3xl font-bold">{stats.upcomingEvents || 0}</p>
                      <p className="text-sm text-gray-500">This week: {stats.thisWeekEvents || 0}</p>
                    </div>
                    
                    <div className="bg-white rounded-lg shadow-md p-6">
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="font-semibold">Sermons</h4>
                        <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
                          <i className="fas fa-microphone-alt text-purple-500"></i>
                        </div>
                      </div>
                      <p className="text-3xl font-bold">{stats.totalSermons || 0}</p>
                      <p className="text-sm text-gray-500">This month: {stats.monthSermons || 0}</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-white rounded-lg shadow-md p-6">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-xl font-bold">Upcoming Events</h3>
                        <button
                          className="text-[#FF7E45] hover:text-[#F4B942]"
                          onClick={() => openEventModal()}
                        >
                          <i className="fas fa-plus mr-1"></i> Add Event
                        </button>
                      </div>
                      <DataTable
                        columns={eventColumns}
                        data={upcomingEvents.slice(0, 5)}
                        onEdit={openEventModal}
                        onDelete={(event) => openDeleteModal(event, 'event')}
                        emptyMessage="No upcoming events"
                      />
                    </div>

                    <div className="bg-white rounded-lg shadow-md p-6">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-xl font-bold">Recent Sermons</h3>
                        <button
                          className="text-[#FF7E45] hover:text-[#F4B942]"
                          onClick={() => openSermonModal()}
                        >
                          <i className="fas fa-plus mr-1"></i> Add Sermon
                        </button>
                      </div>
                      <DataTable
                        columns={sermonColumns}
                        data={sermons.slice(0, 5)}
                        onEdit={openSermonModal}
                        onDelete={(sermon) => openDeleteModal(sermon, 'sermon')}
                        emptyMessage="No sermons available"
                      />
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'users' && (
                <UsersManagement 
                  users={users} 
                  onUpdateUser={handleUpdateUser}
                  onDeleteUser={(user) => openDeleteModal(user, 'user')}
                  onCreateUser={handleCreateUser}
                />
              )}

              {activeTab === 'ministries' && (
                <MinistriesManagement 
                  ministries={ministries}
                  users={users}
                  onUpdateMinistry={handleUpdateMinistry}
                  onDeleteMinistry={(ministry) => openDeleteModal(ministry, 'ministry')}
                  onCreateMinistry={handleCreateMinistry}
                />
              )}

              {activeTab === 'testimonials' && (
                <TestimonialsManagement 
                  testimonials={testimonials}
                  onUpdateTestimonial={handleUpdateTestimonial}
                  onDeleteTestimonial={(testimonial) => openDeleteModal(testimonial, 'testimonial')}
                  onCreateTestimonial={handleCreateTestimonial}
                />
              )}

              {activeTab === 'blog' && (
                <BlogManagement 
                  posts={blogPosts}
                  onUpdatePost={handleUpdateBlogPost}
                  onDeletePost={(post) => openDeleteModal(post, 'blog')}
                  onCreatePost={handleCreateBlogPost}
                />
              )}

              {activeTab === 'events' && (
                <div>
                  <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold">Events Management</h2>
                    <button 
                      className="btn btn-primary"
                      onClick={() => openEventModal()}
                    >
                      <i className="fas fa-plus mr-2"></i> Add New Event
                    </button>
                  </div>
                  <div className="bg-white rounded-lg shadow-md p-6">
                    <DataTable
                      columns={eventColumns}
                      data={upcomingEvents}
                      onEdit={openEventModal}
                      onDelete={(event) => openDeleteModal(event, 'event')}
                      emptyMessage="No events available. Add your first event to get started."
                    />
                  </div>
                </div>
              )}

              {activeTab === 'sermons' && (
                <div>
                  <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold">Sermons Management</h2>
                    <button 
                      className="btn btn-primary"
                      onClick={() => openSermonModal()}
                    >
                      <i className="fas fa-plus mr-2"></i> Add New Sermon
                    </button>
                  </div>
                  <div className="bg-white rounded-lg shadow-md p-6">
                    <DataTable
                      columns={sermonColumns}
                      data={sermons}
                      onEdit={openSermonModal}
                      onDelete={(sermon) => openDeleteModal(sermon, 'sermon')}
                      emptyMessage="No sermons available. Add your first sermon to get started."
                    />
                  </div>
                </div>
              )}

              {activeTab === 'donations' && (
                <DonationsManagement 
                  donations={donations}
                  onUpdateDonation={handleUpdateDonation}
                />
              )}

              {activeTab === 'prayer' && (
                <PrayerRequestsManagement 
                  prayerRequests={prayerRequests}
                  onUpdatePrayerRequest={handleUpdatePrayerRequest}
                  onDeletePrayerRequest={(prayer) => openDeleteModal(prayer, 'prayer')}
                />
              )}

              {activeTab === 'live' && (
                <div>
                  <div className="mb-6">
                    <h2 className="text-2xl font-bold mb-2">Live Stream Management</h2>
                    <p className="text-gray-600">Manage your church's live streaming services.</p>
                  </div>

                  <LiveStreamControl
                    isLive={liveStreamStatus}
                    onStartLive={handleStartLiveStream}
                    onStopLive={handleStopLiveStream}
                    liveStats={liveStats}
                  />

                  <div className="bg-white rounded-lg shadow-md p-6">
                    <h3 className="text-xl font-bold mb-4">Quick Sermon Creation</h3>
                    <p className="text-gray-600 mb-4">
                      Create a sermon record for your live stream to make it available in the archive later.
                    </p>
                    <button 
                      className="btn btn-primary"
                      onClick={() => openSermonModal({
                        isLive: true,
                        date: new Date().toISOString().split('T')[0],
                        title: 'Live Service - ' + new Date().toLocaleDateString()
                      })}
                    >
                      <i className="fas fa-plus mr-2"></i> Create Live Sermon Record
                    </button>
                  </div>
                </div>
              )}

             <div>
              <button>
                 {activeTab === 'settings' && (
                <SettingsForm 
                  settings={settings}
                  onUpdateSettings={handleUpdateSettings}
                  onResetSettings={handleResetSettings}
                />
              )}
                </button>
                </div>
            </div>
          </div>
        </div>
      </section>

      <EventFormModal
        isOpen={isEventModalOpen}
        onClose={closeEventModal}
        onSubmit={handleEventSubmit}
        eventData={selectedEvent || {}}
        users={users}
      />

      <SermonFormModal
        isOpen={isSermonModalOpen}
        onClose={closeSermonModal}
        onSubmit={handleSermonSubmit}
        sermonData={selectedSermon || {}}
        users={users}
      />

      <Modal 
        isOpen={isSettingsModalOpen} 
        onClose={closeSettingsModal} 
        title="System Settings"
        size="xl"
      >
        <SettingsForm 
          settings={settings}
          onUpdateSettings={handleUpdateSettings}
          onResetSettings={handleResetSettings}
        />
      </Modal>

      <ConfirmationModal
        isOpen={isDeleteModalOpen}
        onClose={closeDeleteModal}
        onConfirm={handleConfirmDelete}
        title="Confirm Delete"
        message={`Are you sure you want to delete this ${deleteType}? This action cannot be undone.`}
      />
    </div>
  );
};

export default AdminPage;
) adminpage.jsx,
(
import { useState, useEffect } from "react";
import { blogService } from '../services/apiService';
import { useAlert } from '../utils/Alert';
import useAuth from "../hooks/useAuth";
import { BlogPost } from '../models/BlogPost';

const BlogPage = () => {
  const { user } = useAuth();
  const [activeCategory, setActiveCategory] = useState("all");
  const [posts, setPosts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showEditModal, setShowEditModal] = useState(false);
  const [currentPost, setCurrentPost] = useState(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [error, setError] = useState(null);
  const [favoritePosts, setFavoritePosts] = useState(new Set());
  const [categories, setCategories] = useState([]);
  const [tagInput, setTagInput] = useState('');

  const isAdmin = user?.role === "admin";
  const isAuthenticated = user?.isLoggedIn;
  const alert = useAlert();

  useEffect(() => {
    document.title = "SMC: - News | St. Micheal`s & All Angels Church | Ifite-Awka";
    fetchBlogPosts();
    fetchCategories();
    if (isAuthenticated) {
      fetchUserFavorites();
    }
  }, [isAuthenticated]);

  const fetchBlogPosts = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await blogService.getAll();
      if (response.success) {
        setPosts(response.data.map(post => new BlogPost(post)));
      } else {
        throw new Error(response.message || 'Failed to fetch posts');
      }
    } catch (error) {
      console.error('Error fetching blog posts:', error);
      setError('Failed to load blog posts. Please try again later.');
      alert.error('Failed to load blog posts. Please try again later.');
      // Fallback to sample data
      setPosts([
        new BlogPost({
          id: 1,
          title: "Summer Camp Registration Now Open",
          excerpt: "Register your children for our annual summer camp experience. Limited spots available!",
          content: "Full article content would go here...",
          category: "events",
          date: "2025-06-01",
          imageUrl: "https://cdn.pixabay.com/photo/2017/08/06/12/06/people-2591874_1280.jpg",
          author: "Youth Ministry Team",
          status: "published",
          readTime: "5 min read",
          tags: ["summer", "camp", "youth"]
        }),
        // ... other sample posts
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await blogService.getCategories();
      if (response.success) {
        setCategories(["all", ...response.data]);
      }
    } catch (error) {
      console.error('Error fetching categories:', error);
      setCategories(["all", "announcements", "events", "community", "missions"]);
    }
  };

  const fetchUserFavorites = async () => {
    try {
      const response = await blogService.getFavorites();
      if (response.success) {
        setFavoritePosts(new Set(response.data.map(fav => fav.postId)));
      }
    } catch (error) {
      console.error('Error fetching favorites:', error);
    }
  };

  const handleAddToFavorites = async (postId) => {
    if (!isAuthenticated) {
      alert.info('Please log in to add to favorites');
      return;
    }

    try {
      if (favoritePosts.has(postId)) {
        const response = await blogService.removeFavorite(postId);
        if (response.success) {
          setFavoritePosts(prev => {
            const newSet = new Set(prev);
            newSet.delete(postId);
            return newSet;
          });
          alert.success('Removed from favorites!');
        }
      } else {
        const response = await blogService.addFavorite(postId);
        if (response.success) {
          setFavoritePosts(prev => new Set(prev).add(postId));
          alert.success('Added to favorites!');
        }
      }
    } catch (error) {
      console.error('Error updating favorites:', error);
      alert.error('Failed to update favorites');
    }
  };

  const handleEditPost = (post) => {
    setCurrentPost(post);
    setShowEditModal(true);
  };

  const handleDeletePost = async (postId) => {
    alert.info('Are you sure you want to delete this post? This action cannot be undone.', {
      duration: 0,
      dismissible: true,
      position: 'top-center',
      onClose: async (confirmed) => {
        if (confirmed) {
          try {
            const response = await blogService.delete(postId);
            if (response.success) {
              setPosts(posts.filter(post => post.id !== postId));
              alert.success('Post deleted successfully');
            }
          } catch (error) {
            console.error('Error deleting post:', error);
            if (error.response?.status === 403) {
              alert.error('Permission denied. Only admins can delete posts.');
            } else {
              alert.error('Failed to delete post');
            }
          }
        }
      }
    });
  };

  const handleSavePost = async (postData) => {
    try {
      let response;
      if (postData.id) {
        response = await blogService.update(postData.id, postData);
      } else {
        response = await blogService.create({
          ...postData,
          date: new Date().toISOString().split('T')[0],
          status: 'published',
          readTime: '5 min read'
        });
      }

      if (response.success) {
        const savedPost = new BlogPost(response.data);
        if (postData.id) {
          setPosts(posts.map(post => post.id === postData.id ? savedPost : post));
          alert.success('Post updated successfully');
        } else {
          setPosts([...posts, savedPost]);
          alert.success('Post created successfully');
        }
        setShowEditModal(false);
        setShowCreateModal(false);
        setCurrentPost(null);
      }
    } catch (error) {
      console.error('Error saving post:', error);
      if (error.response?.status === 403) {
        alert.error('Permission denied. Only admins can create/edit posts.');
      } else {
        alert.error('Failed to save post');
      }
    }
  };

  const handleNewsletterSubscribe = async (e) => {
    e.preventDefault();
    const email = e.target.email.value;

    try {
      const response = await blogService.subscribeNewsletter(email);
      if (response.success) {
        alert.success('Successfully subscribed to newsletter!');
        e.target.reset();
      }
    } catch (error) {
      console.error('Error subscribing to newsletter:', error);
      alert.error('Failed to subscribe. Please try again.');
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Filter posts based on selected category
  const filteredPosts = activeCategory === "all"
    ? posts
    : posts.filter((post) => post.category === activeCategory);

  return (
    <div className="page">
      {/* Header */}
      <section className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] py-12 px-4">
        <div className="container mx-auto text-center text-white">
          <h1 className="text-4xl font-bold mb-4">Church News & Blog</h1>
          <p className="text-xl max-w-2xl mx-auto">
            Stay updated with announcements, stories, and insights
          </p>

          {/* Admin Controls */}
          {isAdmin && (
            <div className="mt-6">
              <button
                onClick={() => {
                  setCurrentPost({
                    title: '',
                    excerpt: '',
                    content: '',
                    category: 'announcements',
                    imageUrl: '',
                    author: user.name || '',
                    tags: []
                  });
                  setShowCreateModal(true);
                }}
                className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
              >
                <i className="fas fa-plus mr-2"></i>Create New Post
              </button>
            </div>
          )}
        </div>
      </section>

      {/* Error Message */}
      {error && (
        <div className="container mx-auto px-4 py-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}

      {/* Blog Content */}
      <section className="py-12">
        <div className="container mx-auto px-4">
          {/* Category Filter */}
          <div className="mb-8 flex flex-wrap justify-center gap-2">
            {categories.map((category) => (
              <button
                key={category}
                className={`px-4 py-2 rounded-full transition-colors ${activeCategory === category
                  ? "bg-[#FF7E45] text-white"
                  : "bg-gray-100 hover:bg-gray-200"
                  }`}
                onClick={() => setActiveCategory(category)}
              >
                {category === "all"
                  ? "All Posts"
                  : category.charAt(0).toUpperCase() + category.slice(1)}
              </button>
            ))}
          </div>

          {isLoading ? (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#FF7E45] mx-auto"></div>
              <p className="mt-4 text-gray-600">Loading blog posts...</p>
            </div>
          ) : (
            <>
              {/* Featured Post */}
              {filteredPosts.length > 0 && (
                <div className="mb-12">
                  <div className="bg-white rounded-lg shadow-md overflow-hidden">
                    <div className="flex flex-col md:flex-row">
                      <div className="md:w-1/2 relative">
                        <img
                          src={filteredPosts[0].imageUrl}
                          alt={filteredPosts[0].title}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            e.target.src = 'https://cdn.pixabay.com/photo/2017/08/06/12/06/people-2591874_1280.jpg';
                          }}
                        />
                        {isAdmin && (
                          <div className="absolute top-4 right-4 flex space-x-2">
                            <button
                              onClick={() => handleEditPost(filteredPosts[0])}
                              className="bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 transition-colors"
                            >
                              <i className="fas fa-edit"></i>
                            </button>
                            <button
                              onClick={() => handleDeletePost(filteredPosts[0].id)}
                              className="bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors"
                            >
                              <i className="fas fa-trash"></i>
                            </button>
                          </div>
                        )}
                      </div>
                      <div className="md:w-1/2 p-6 md:p-8 flex flex-col justify-center">
                        <div className="flex items-center text-sm text-gray-500 mb-3">
                          <span className="uppercase bg-gray-100 text-gray-600 px-2 py-1 rounded">
                            {filteredPosts[0].category}
                          </span>
                          <span className="mx-3">•</span>
                          <span>{formatDate(filteredPosts[0].date)}</span>
                          <span className="mx-3">•</span>
                          <span>{filteredPosts[0].readTime}</span>
                        </div>
                        <h2 className="text-3xl font-bold mb-4">
                          {filteredPosts[0].title}
                        </h2>
                        <p className="text-gray-600 mb-6">
                          {filteredPosts[0].excerpt}
                        </p>
                        <div className="flex items-center justify-between mb-6">
                          <div className="flex items-center">
                            <div className="w-10 h-10 bg-gray-200 rounded-full mr-3 flex items-center justify-center">
                              <i className="fas fa-user text-gray-400"></i>
                            </div>
                            <span className="text-sm text-gray-700">
                              {filteredPosts[0].author}
                            </span>
                          </div>
                          {isAuthenticated && (
                            <button
                              onClick={() => handleAddToFavorites(filteredPosts[0].id)}
                              className={`transition-colors ${favoritePosts.has(filteredPosts[0].id)
                                ? "text-[#FF7E45]"
                                : "text-gray-400 hover:text-[#FF7E45]"
                                }`}
                            >
                              <i className={`${favoritePosts.has(filteredPosts[0].id)
                                ? "fas fa-heart"
                                : "far fa-heart"
                                }`}></i>
                            </button>
                          )}
                        </div>
                        <button className="btn btn-primary self-start">
                          Read Full Article
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Blog Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {filteredPosts.slice(1).map((post) => (
                  <div key={post.id} className="blog-card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                    <div className="h-48 overflow-hidden relative">
                      <img
                        src={post.imageUrl}
                        alt={post.title}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          e.target.src = 'https://cdn.pixabay.com/photo/2017/08/06/12/06/people-2591874_1280.jpg';
                        }}
                      />
                      {isAdmin && (
                        <div className="absolute top-2 right-2 flex space-x-1">
                          <button
                            onClick={() => handleEditPost(post)}
                            className="bg-blue-500 text-white p-1 rounded"
                          >
                            <i className="fas fa-edit text-sm"></i>
                          </button>
                          <button
                            onClick={() => handleDeletePost(post.id)}
                            className="bg-red-500 text-white p-1 rounded"
                          >
                            <i className="fas fa-trash text-sm"></i>
                          </button>
                        </div>
                      )}
                    </div>
                    <div className="p-6">
                      <div className="flex items-center text-sm text-gray-500 mb-3">
                        <span className="uppercase bg-gray-100 text-gray-600 px-2 py-1 rounded">
                          {post.category}
                        </span>
                        <span className="mx-3">•</span>
                        <span>{formatDate(post.date)}</span>
                      </div>
                      <h3 className="text-xl font-bold mb-3">{post.title}</h3>
                      <p className="text-gray-600 mb-4">{post.excerpt}</p>

                      {/* Tags */}
                      <div className="flex flex-wrap gap-1 mb-4">
                        {post.tags?.map(tag => (
                          <span key={tag} className="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">
                            #{tag}
                          </span>
                        ))}
                      </div>

                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <div className="w-8 h-8 bg-gray-200 rounded-full mr-2 flex items-center justify-center">
                            <i className="fas fa-user text-gray-400 text-xs"></i>
                          </div>
                          <span className="text-sm text-gray-700">{post.author}</span>
                        </div>
                        <div className="flex items-center space-x-3">
                          {isAuthenticated && (
                            <button
                              onClick={() => handleAddToFavorites(post.id)}
                              className={`transition-colors ${favoritePosts.has(post.id)
                                ? "text-[#FF7E45]"
                                : "text-gray-400 hover:text-[#FF7E45]"
                                }`}
                            >
                              <i className={`${favoritePosts.has(post.id)
                                ? "fas fa-heart"
                                : "far fa-heart"
                                }`}></i>
                            </button>
                          )}
                          <button className="text-[#FF7E45] hover:text-[#F4B942] transition-colors">
                            Read More
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {filteredPosts.length === 0 && (
                <div className="text-center py-12">
                  <i className="fas fa-newspaper text-4xl text-gray-400 mb-4"></i>
                  <p className="text-gray-600">No posts found in this category.</p>
                  {isAdmin && (
                    <button
                      onClick={() => setShowCreateModal(true)}
                      className="mt-4 bg-[#FF7E45] text-white px-6 py-2 rounded-lg hover:bg-[#FFA76A] transition-colors"
                    >
                      Create Your First Post
                    </button>
                  )}
                </div>
              )}
            </>
          )}

          {/* Newsletter Signup */}
          <div className="mt-16 bg-[#F9F7F4] rounded-lg border text-gray-600 border-gray-200 shadow-ms p-8 bg-gradient-to-r from-[#FF7E45]/80 to-[#FFA76A]/60 text-center">
            <h3 className="text-2xl font-bold mb-3">
              Subscribe to Our Newsletter
            </h3>
            <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
              Get weekly updates, sermon notes, and church announcements
              delivered to your inbox.
            </p>
            <form onSubmit={handleNewsletterSubscribe} className="max-w-md mx-auto flex flex-col sm:flex-row gap-3">
              <input
                type="email"
                name="email"
                className="form-input flex-grow p-2 rounded-lg border-focus:ring-2 border-focus:ring-[#FF7E45]"
                placeholder="Your email address"
                required
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
              />
              <button
                type="submit"
                className="btn btn-primary whitespace-nowrap hover:bg-[#FFA76A] hover:text-white p-2 rounded-lg"
              >
                Subscribe <i className="fas fa-paper-plane ml-2"></i>
              </button>
            </form>
          </div>
        </div>
      </section>

      {/* Edit/Create Post Modal */}
      {(showEditModal || showCreateModal) && (
        <BlogPostModal
          post={currentPost}
          onSave={handleSavePost}
          onClose={() => {
            setShowEditModal(false);
            setShowCreateModal(false);
            setCurrentPost(null);
          }}
          isEdit={showEditModal}
          tagInput={tagInput}
          setTagInput={setTagInput}
        />
      )}
    </div>
  );
};

// Blog Post Modal Component
const BlogPostModal = ({ post, onSave, onClose, isEdit, tagInput, setTagInput }) => {
  const [formData, setFormData] = useState(post || {
    title: '',
    excerpt: '',
    content: '',
    category: 'announcements',
    imageUrl: '',
    author: '',
    tags: []
  });
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};
    if (!formData.title.trim()) newErrors.title = 'Title is required';
    if (!formData.excerpt.trim()) newErrors.excerpt = 'Excerpt is required';
    if (!formData.content.trim()) newErrors.content = 'Content is required';
    if (!formData.imageUrl.trim()) newErrors.imageUrl = 'Image URL is required';
    if (!formData.author.trim()) newErrors.author = 'Author is required';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm()) {
      onSave(formData);
    }
  };

  useEffect(() => {
    if (post) {
      setFormData(post);
    }
  }, [post]);

  const handleAddTag = () => {
    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {
      setFormData({
        ...formData,
        tags: [...formData.tags, tagInput.trim()]
      });
      setTagInput('');
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter(tag => tag !== tagToRemove)
    });
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddTag();
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <h2 className="text-2xl font-bold mb-6">
            {isEdit ? 'Edit Blog Post' : 'Create New Blog Post'}
          </h2>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium mb-2">Title *</label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Category *</label>
                <select
                  value={formData.category}
                  onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                >
                  <option value="announcements">Announcements</option>
                  <option value="events">Events</option>
                  <option value="community">Community</option>
                  <option value="missions">Missions</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Excerpt *</label>
              <textarea
                value={formData.excerpt}
                onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}
                rows="3"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Content *</label>
              <textarea
                value={formData.content}
                onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                rows="6"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Image URL *</label>
              <input
                type="url"
                value={formData.imageUrl}
                onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Author</label>
              <input
                type="text"
                value={formData.author}
                onChange={(e) => setFormData({ ...formData, author: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Tags</label>
              <div className="flex flex-wrap gap-2 mb-2">
                {formData.tags.map(tag => (
                  <span key={tag} className="bg-gray-100 text-gray-600 px-2 py-1 rounded flex items-center">
                    #{tag}
                    <button
                      type="button"
                      onClick={() => handleRemoveTag(tag)}
                      className="ml-2 text-red-500 hover:text-red-700"
                    >
                      <i className="fas fa-times"></i>
                    </button>
                  </span>
                ))}
              </div>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={tagInput}
                  onChange={(e) => setTagInput(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Add a tag..."
                  className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                />
                <button
                  type="button"
                  onClick={handleAddTag}
                  className="bg-[#FF7E45] text-white px-4 rounded-lg hover:bg-[#FFA76A]"
                >
                  Add
                </button>
              </div>
            </div>

            <div className="flex justify-end space-x-3">
              <button
                type="button"
                onClick={onClose}
                className="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-6 py-2 bg-[#FF7E45] text-white rounded-lg hover:bg-[#FFA76A] transition-colors"
              >
                {isEdit ? 'Update' : 'Create'} Post
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default BlogPage;
)blogpage.jsx,
(
import { useState, useEffect } from "react";
import { loadStripe } from '@stripe/stripe-js';
import {
  PaymentElement,
  Elements,
  useStripe,
  useElements
} from '@stripe/react-stripe-js';
import { donationService } from '../services/apiService';
import useAuth from '../hooks/useAuth';
import Loader from '../components/Loader';
import { useAlert } from "../utils/Alert";
import { Donation } from '../models/Donation';

// Initialize Stripe with error handling
const stripePromise = (() => {
  try {
    const stripeKey = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || "pk_test_51S4Wi6ChmgWsJLauutuaPwfQHKs4rIvaErdDw4t03Jqd3H3amLPN50aYEetNjTgz68vY9CiHXHMc3ws7hnwLzwta00C9tLMWbo";
    if (!stripeKey) {
      console.error('Stripe publishable key is missing');
      return null;
    }
    return loadStripe(stripeKey);
  } catch (error) {
    console.error('Failed to initialize Stripe:', error);
    return null;
  }
})();

// Card Payment Form Component
const CardPaymentForm = ({
  onSubmit,
  isProcessing,
  setIsProcessing,   // ✅ consistent naming
  billingAddress,
  onBillingAddressChange
}) => {
  const stripe = useStripe();
  const elements = useElements();
  const [message, setMessage] = useState(null);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    return () => setIsMounted(false);
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!stripe || !elements || isMounted) return;

    setIsProcessing(true);

    const { error, paymentIntent } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        return_url: `${window.location.origin}/donate?success=true`,
        payment_method_data: {
          billing_details: { address: billingAddress }
        }
      },
      redirect: "if_required"
    });

    if (error) {
      setMessage(error.message);
    } else if (paymentIntent?.status === "succeeded") {
      onSubmit(paymentIntent);
    } else {
      setMessage("Unexpected state");
    }

    setIsProcessing(false);
  };

  if (!isMounted) {
    return <div>Loading payment form...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* ✅ This renders card input fields */}
      <PaymentElement />

      {/* Billing Information */}
      <div className="p-4 bg-gray-50 border border-gray-200 rounded-md">
        <h3 className="font-medium text-gray-800 mb-3">Billing Information</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { label: "Address Line 1 *", name: "line1", required: true },
            { label: "Address Line 2", name: "line2" },
            { label: "City *", name: "city", required: true },
            { label: "State *", name: "state", required: true },
            { label: "Postal Code *", name: "postal_code", required: true },
            { label: "Country *", name: "country", required: true }
          ].map(({ label, name, required }) => (
            <div key={name}>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {label}
              </label>
              <input
                type="text"
                name={name}
                required={required}
                className="form-input border rounded-md w-full py-2 px-3 border-gray-300"
                value={billingAddress[name] || ""}
                onChange={(e) =>
                  onBillingAddressChange({
                    ...billingAddress,
                    [name]: e.target.value
                  })
                }
              />
            </div>
          ))}
        </div>
      </div>

      <button
        type="submit"
        disabled={!stripe || isProcessing}
        className="w-full bg-[#FF7E45] text-white py-3 px-4 rounded-md hover:bg-[#F4B942] transition-colors disabled:opacity-50"
      >
        {isProcessing ? "Processing..." : "Donate Now"}
      </button>

      {message && <div className="text-red-500 text-sm mt-2">{message}</div>}

      {/* Stripe branding */}
      <div className="text-xs text-gray-500 text-center flex flex-col items-center">
        <div className="flex justify-center gap-4 w-full">
          <span className="flex items-center">
            <i className="fas fa-lock mr-1 text-green-500"></i>
            Your payment information is encrypted and secure
          </span>
          <div className="border border-[#635BFF] rounded-md px-3 py-1 inline-flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="80" viewBox="0 0 300 40">
              <text
                x="50%"
                y="50%"
                textAnchor="middle"
                dominantBaseline="middle"
                fontSize="33"
                fontFamily="Arial, sans-serif"
                fill="#635BFF"
                fontWeight="bold"
              >
                Powered by Stripe
              </text>
            </svg>
          </div>
        </div>
      </div>
    </form>
  );
};

// Bank Transfer Form Component
const BankTransferForm = ({
  onSubmit,
  isProcessing,
  bankDetails,
  onBankDetailsChange
}) => {
  const [bankInfo, setBankInfo] = useState(bankDetails);

  const handleChange = (e) => {
    const { name, value } = e.target;
    const updated = { ...bankInfo, [name]: value };
    setBankInfo(updated);
    onBankDetailsChange(updated); // ✅ properly update parent
  };

  const handleSubmit = (e) => {
    e.preventDefault(); // Prevent default here
    onSubmit(e); // Pass the event to the parent
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="p-4 bg-green-50 border border-green-200 rounded-md">
        <h3 className="font-medium text-green-800 mb-3">Bank Transfer Information</h3>
        <div className="space-y-3">
          {[
            { label: "Bank Name *", name: "bankName", placeholder: "e.g., Chase Bank" },
            { label: "Account Number *", name: "accountNumber", placeholder: "Your account number" },
            { label: "Transaction Number *", name: "transactionNumber", placeholder: "Your transaction number" },
            { label: "Account Holder Name *", name: "accountName", placeholder: "Name on account" }
          ].map(({ label, name, placeholder }) => (
            <div key={name}>
              <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
              <input
                type="text"
                name={name}
                value={bankInfo[name]}
                onChange={handleChange}
                placeholder={placeholder}
                required
                className="form-input border rounded-md w-full py-2 px-3 border-gray-300"
              />
            </div>
          ))}
        </div>
      </div>

      <button
        type="submit"
        disabled={isProcessing}
        className="w-full bg-[#FF7E45] text-white py-3 px-4 rounded-md hover:bg-[#F4B942] transition-colors disabled:opacity-50"
      >
        {isProcessing ? "Processing..." : "Confirm Bank Transfer"}
      </button>
    </form>
  );
};

const DonatePage = () => {
  const { user } = useAuth();
  const [donationAmount, setDonationAmount] = useState("");
  const [customAmount, setCustomAmount] = useState("");
  const [currency, setCurrency] = useState("USD", "NGN", "EUR");
  const [donationFrequency, setDonationFrequency] = useState("one-time");
  const [paymentMethod, setPaymentMethod] = useState("card");
  const [isProcessing, setIsProcessing] = useState(false);
  const [isLoadingPaymentIntent, setIsLoadingPaymentIntent] = useState(false);
  const [showThankYou, setShowThankYou] = useState(false);
  const [donationStats, setDonationStats] = useState(null);
  const [recentDonations, setRecentDonations] = useState([]);
  const [userDonations, setUserDonations] = useState([]);
  const [showAdminPanel, setShowAdminPanel] = useState(false);
  const [guestEmail, setGuestEmail] = useState("");
  const [guestName, setGuestName] = useState("");
  const [isAnonymous, setIsAnonymous] = useState(false);
  const [donationPurpose, setDonationPurpose] = useState("");
  const [billingAddress, setBillingAddress] = useState({
    line1: "",
    line2: "",
    city: "",
    state: "",
    postal_code: "",
    country: ""
  });
  const [bankDetails, setBankDetails] = useState({
    bankName: "",
    accountNumber: "",
    routingNumber: "",
    accountName: ""
  });
  const [isLoading, setIsLoading] = useState(false);
  const [clientSecret, setClientSecret] = useState("");

  const isAdmin = user?.role === "admin";
  const isRegularUser = user?.isLoggedIn && user?.role === "user";
  const alert = useAlert();

  useEffect(() => {
    if (!stripePromise) {
      alert.error("Payment system failed to load. Please refresh the page.");
    }
  }, [alert]);

  // Load data based on user role
  useEffect(() => {
    document.title = "SMC: - Donation | St. Micheal`s & All Angels Church | Ifite-Awka";
    if (isAdmin) {
      fetchDonationStats();
      fetchRecentDonations();
      fetchAllDonations();
    } else if (isRegularUser) {
      fetchUserDonations();
    }
  }, [isAdmin, isRegularUser]);

  // Check for success or cancel parameters in URL
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('success') === 'true') {
      setShowThankYou(true);
      alert.success("Thank you for your donation! Your payment was successful.");
      window.history.replaceState({}, document.title, window.location.pathname);
    } else if (urlParams.get('canceled') === 'true') {
      alert.info("Donation process was canceled.");
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }, []);

  useEffect(() => {
    const createPaymentIntent = async () => {
      console.log("Payment method:", paymentMethod, "Amount:", donationAmount);

      if (paymentMethod === "card" && donationAmount > 0) {
        setIsLoadingPaymentIntent(true);
        try {
          console.log("Creating payment intent for amount:", donationAmount);
          const res = await donationService.createPaymentIntent({
            amount: parseFloat(donationAmount),
            currency: "usd"
          });

          console.log("Full payment intent response:", res);

          // Check different possible response structures
          if (res.data?.clientSecret) {
            // If response is { data: { clientSecret: '...' } }
            setClientSecret(res.data.clientSecret);
            console.log("Client secret set from res.data.clientSecret");
          } else if (res.clientSecret) {
            // If response is { clientSecret: '...' }
            setClientSecret(res.clientSecret);
            console.log("Client secret set from res.clientSecret");
          } else if (res.data) {
            // If the entire response is the data object
            setClientSecret(res.data);
            console.log("Client secret set from res.data");
          } else {
            console.error("No client secret found in response structure:", res);
            alert.error("Payment system error: No client secret received");
          }
        } catch (err) {
          console.error("Error creating payment intent:", err);
          alert.error("Failed to initialize payment. Please try again.");
        } finally {
          setIsLoadingPaymentIntent(false);
        }
      } else {
        console.log("Resetting client secret - conditions not met");
        setClientSecret("");
      }
    };

    createPaymentIntent();
  }, [donationAmount, paymentMethod]);

  const fetchUserDonations = async () => {
    try {
      setIsLoading(true);
      const response = await donationService.getUserDonations();
      if (response.success) {
        setUserDonations(response.data.map(donation => new Donation(donation)));
      }
    } catch (error) {
      console.error('Error fetching user donations:', error);
      if (error.response?.status === 401) {
        alert.info('Please log in to view your donation history');
      } else {
        alert.error('Failed to load donation history');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const fetchDonationStats = async () => {
    try {
      setIsLoading(true);
      const response = await donationService.getStats();
      if (response.success) {
        setDonationStats(response.data);
      }
    } catch (error) {
      console.error('Error fetching donation stats:', error);
      if (error.response?.status === 403) {
        alert.error('Access denied. Admin privileges required.');
      } else {
        alert.error('Failed to load donation statistics');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const fetchRecentDonations = async () => {
    try {
      setIsLoading(true);
      const response = await donationService.getRecent();
      if (response.success) {
        setRecentDonations(response.data.map(donation => new Donation(donation)));
      }
    } catch (error) {
      console.error('Error fetching recent donations:', error);
      if (error.response?.status === 403) {
        alert.error('Access denied. Admin privileges required.');
      } else {
        alert.error('Failed to load recent donations');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const fetchAllDonations = async () => {
    try {
      const response = await donationService.getAll();
      if (response.success) {
        // Handle all donations data for admin
      }
    } catch (error) {
      console.error('Error fetching all donations:', error);
    }
  };

  const validateForm = () => {
    const errors = {};

    if (!donationAmount || parseFloat(donationAmount) <= 0) {
      errors.amount = "Please enter a valid donation amount";
    }

    if (!user?.isLoggedIn) {
      if (!guestEmail) {
        errors.email = "Email is required";
      } else if (!/\S+@\S+\.\S+/.test(guestEmail)) {
        errors.email = "Email address is invalid";
      }

      if (!guestName && !isAnonymous) {
        errors.name = "Name is required unless donating anonymously";
      }
    }

    if (paymentMethod === "card") {
      if (!billingAddress.line1 || !billingAddress.city || !billingAddress.state ||
        !billingAddress.postal_code || !billingAddress.country) {
        errors.billing = "Complete billing address is required for card payments";
      }
    } else if (paymentMethod === "bank") {
      if (!bankDetails.bankName || !bankDetails.accountNumber ||
        !bankDetails.routingNumber || !bankDetails.accountName) {
        errors.bank = "Complete bank details are required for bank transfers";
      }
    }

    return {
      isValid: Object.keys(errors).length === 0,
      errors
    };
  };

  const handleDonation = async (e) => {
    if (e && typeof e.preventDefault === 'function') {
      e.preventDefault();
    }

    // If payment method is card, return early (card payments are handled by Stripe)
    if (paymentMethod === "card") {
      return;
    }

    const validation = validateForm();
    if (!validation.isValid) {
      Object.values(validation.errors).forEach(error => {
        alert.error(error);
      });
      return;
    }

    setIsProcessing(true);

    try {
      const donationData = {
        amount: parseFloat(donationAmount),
        frequency: donationFrequency,
        paymentMethod,
        purpose: donationPurpose,
        isAnonymous,
        billingAddress: paymentMethod === "card" ? billingAddress : undefined,
        bankDetails: paymentMethod === "bank" ? bankDetails : undefined
      };

      if (!user?.isLoggedIn) {
        donationData.email = guestEmail;
        donationData.name = isAnonymous ? "Anonymous" : guestName;
      }

      const response = await donationService.create(donationData);

      if (response.success) {
        setShowThankYou(true);
        alert.success("Thank you for your donation!");

        // Reset form
        setDonationAmount("");
        setCustomAmount("");
        setDonationPurpose("");
        setBillingAddress({
          line1: "", line2: "", city: "", state: "", postal_code: "", country: ""
        });
        setBankDetails({
          bankName: "", accountNumber: "", routingNumber: "", accountName: ""
        });

        // Refresh user donations if logged in
        if (user?.isLoggedIn) {
          fetchUserDonations();
        }
      } else {
        alert.error(response.message || "Failed to process donation");
      }
    } catch (error) {
      console.error('Donation error:', error);
      alert.error("An error occurred while processing your donation");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleUpdateStatus = async (donationId, status) => {
    try {
      const response = await donationService.update(donationId, { status });
      if (response.success) {
        alert.success('Donation status updated successfully');
        fetchRecentDonations();
        fetchAllDonations();
      }
    } catch (error) {
      console.error('Error updating donation status:', error);
      alert.error('Failed to update donation status');
    }
  };

  const viewDonationDetails = (donationId) => {
    // In a real implementation, this would open a modal or navigate to a details page
    alert.info('Donation details feature would open here');
  };

  const handleAmountSelect = (amount) => {
    const sanitizedAmount = amount.toString().replace(/[^0-9.]/g, '');
    setDonationAmount(sanitizedAmount);
    setCustomAmount("");
  };

  const handleCustomAmountChange = (e) => {
    const value = e.target.value.replace(/[^0-9.]/g, '');
    const decimalCount = (value.match(/\./g) || []).length;

    if (decimalCount <= 1 && (value === '' || !isNaN(value))) {
      setCustomAmount(value);
      if (value) {
        setDonationAmount(value);
      }
    }
  };

  const exportDonations = async (format = 'csv') => {
    try {
      await donationService.exportDonations(format);
      alert.success(`Donations exported successfully as ${format.toUpperCase()}`);
    } catch (error) {
      console.error('Export error:', error);
      alert.error('Failed to export donations. Please try again.');
    }
  };

  const downloadReceipt = async (donationId) => {
    try {
      await donationService.downloadReceipt(donationId);
      alert.success('Receipt downloaded successfully');
    } catch (error) {
      console.error('Error downloading receipt:', error);
      alert.error('Failed to download receipt. Please try again.');
    }
  };

  const formatCurrency = (amount, currency = "USD", locale = "en-US") => {
    try {
      return new Intl.NumberFormat(locale, {
        style: "currency",
        currency,
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      }).format(amount);
    } catch (error) {
      console.error("Currency formatting error:", error);
      return amount;
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const resetForm = () => {
    setShowThankYou(false);
    setDonationAmount("");
    setCustomAmount("");
    setDonationFrequency("one-time");
    setPaymentMethod("card");
    setDonationPurpose("");
    setGuestEmail("");
    setGuestName("");
    setIsAnonymous(false);
    setBillingAddress({
      line1: "", line2: "", city: "", state: "", postal_code: "", country: ""
    });
    setBankDetails({
      bankName: "", accountNumber: "", routingNumber: "", accountName: ""
    });
  };

  if (isLoading) {
    return <Loader type="spinner" text="Loading ..." />;
  }

  return (
    <div className="page">
      {/* Header */}
      <section className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] py-12 px-4">
        <div className="container mx-auto text-center text-white">
          <h1 className="text-4xl font-bold mb-4">Support Our Church</h1>
          <p className="text-xl max-w-2xl mx-auto">
            Your generosity makes our ministry possible
          </p>
        </div>
      </section>

      {/* Donation Form Section */}
      <DonationFormSection
        user={user}
        clientSecret={clientSecret}  // ✅ pass down
        stripePromise={stripePromise}
        donationAmount={donationAmount}
        customAmount={customAmount}
        donationFrequency={donationFrequency}
        paymentMethod={paymentMethod}
        isAnonymous={isAnonymous}
        isLoadingPaymentIntent={isLoadingPaymentIntent}
        donationPurpose={donationPurpose}
        CardPaymentForm={CardPaymentForm}
        billingAddress={billingAddress}
        bankDetails={bankDetails}
        guestEmail={guestEmail}
        guestName={guestName}
        currency={currency}
        setCurrency={setCurrency}
        formatCurrency={formatCurrency}
        isProcessing={isProcessing}
        setIsProcessing={setIsProcessing}  // ✅ consistent naming
        showThankYou={showThankYou}
        onAmountSelect={handleAmountSelect}
        onCustomAmountChange={handleCustomAmountChange}
        onFrequencyChange={setDonationFrequency}
        onPaymentMethodChange={setPaymentMethod}
        onAnonymousChange={setIsAnonymous}
        onDonationPurposeChange={setDonationPurpose}
        onBillingAddressChange={setBillingAddress}
        onBankDetailsChange={setBankDetails}
        onGuestEmailChange={setGuestEmail}
        onGuestNameChange={setGuestName}
        onSubmit={handleDonation}
        onReset={resetForm}
      />

      {/* User Donations Section */}
      {isRegularUser && userDonations.length > 0 && (
        <UserDonationsSection
          userDonations={userDonations}
          formatCurrency={formatCurrency}
          formatDate={formatDate}
          onDownloadReceipt={downloadReceipt}
        />
      )}

      {/* Admin Panel Toggle */}
      {isAdmin && (
        <div className="container mx-auto px-4 mb-6">
          <button
            onClick={() => setShowAdminPanel(!showAdminPanel)}
            className="bg-gray-800 text-white px-4 py-2 rounded-md hover:bg-gray-700"
          >
            {showAdminPanel ? 'Hide Admin Panel' : 'Show Admin Panel'}
          </button>
        </div>
      )}

      {/* Admin Panel */}
      {isAdmin && showAdminPanel && (
        <AdminPanel
          donationStats={donationStats}
          recentDonations={recentDonations}
          formatCurrency={formatCurrency}
          formatDate={formatDate}
          onExportDonations={exportDonations}
          onUpdateStatus={handleUpdateStatus}
          onDownloadReceipt={downloadReceipt}
          onViewDetails={viewDonationDetails}
          fetchAllDonations={fetchAllDonations}
        />
      )}
    </div>
  );
};

// User Donations Section Component
const UserDonationsSection = ({
  userDonations,
  formatCurrency,
  formatDate,
  onDownloadReceipt
}) => (
  <section className="bg-gray-50 py-8">
    <div className="container mx-auto px-4">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold mb-6 flex items-center">
          <i className="fas fa-receipt mr-2 text-[#FF7E45]"></i>
          Your Donation History
        </h2>
        <div className="overflow-x-auto">
          <table className="w-full table-auto">
            <thead>
              <tr className="bg-gray-100">
                <th className="px-4 py-2 text-left">Amount</th>
                <th className="px-4 py-2 text-left">Date</th>
                <th className="px-4 py-2 text-left">Type</th>
                <th className="px-4 py-2 text-left">Purpose</th>
                <th className="px-4 py-2 text-left">Status</th>
                <th className="px-4 py-2 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {userDonations.map((donation, index) => (
                <tr key={index} className="border-b">
                  <td className="px-4 py-2 font-semibold">{formatCurrency(donation.amount)}</td>
                  <td className="px-4 py-2">{formatDate(donation.date)}</td>
                  <td className="px-4 py-2 capitalize">{donation.frequency}</td>
                  <td className="px-4 py-2">{donation.purpose || "General"}</td>
                  <td className="px-4 py-2">
                    <span className={`px-2 py-1 rounded-full text-xs ${donation.status === 'succeeded'
                      ? 'bg-green-100 text-green-800'
                      : donation.status === 'pending'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-red-100 text-red-800'
                      }`}>
                      {donation.status}
                    </span>
                  </td>
                  <td className="px-4 py-2">
                    {donation.status === 'succeeded' && (
                      <button
                        onClick={() => onDownloadReceipt(donation.id)}
                        className="text-[#FF7E45] hover:text-[#F4B942] text-sm"
                      >
                        <i className="fas fa-download mr-1"></i>Receipt
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </section>
);

// Updated AdminPanel component with correct props
const AdminPanel = ({
  donationStats,
  recentDonations,
  formatCurrency,
  formatDate,
  onExportDonations,
  onUpdateStatus,
  onDownloadReceipt,
  onViewDetails,
  fetchAllDonations
}) => (
  <section className="bg-gray-50 py-8">
    <div className="container mx-auto px-4">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold mb-6">Donation Analytics</h2>

        {donationStats && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-blue-800">Total Donations</h3>
              <p className="text-2xl font-bold">{formatCurrency(donationStats.totalAmount)}</p>
              <p className="text-sm text-gray-600">{donationStats.totalCount} donations</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-green-800">This Month</h3>
              <p className="text-2xl font-bold">{formatCurrency(donationStats.monthlyAmount)}</p>
              <p className="text-sm text-gray-600">{donationStats.monthlyCount} donations</p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <h3 className="text-lg font-semibold text-purple-800">Recurring</h3>
              <p className="text-2xl font-bold">{formatCurrency(donationStats.recurringAmount)}</p>
              <p className="text-sm text-gray-600">{donationStats.recurringCount} active</p>
            </div>
          </div>
        )}

        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-semibold">Recent Donations</h3>
          <div className="flex space-x-2">
            <button
              onClick={() => onExportDonations('csv')}
              className="bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded text-sm"
            >
              Export CSV
            </button>
            <button
              onClick={() => onExportDonations('excel')}
              className="bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded text-sm"
            >
              Export Excel
            </button>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full table-auto">
            <thead>
              <tr className="bg-gray-100">
                <th className="px-4 py-2 text-left">Donor</th>
                <th className="px-4 py-2 text-left">Amount</th>
                <th className="px-4 py-2 text-left">Date</th>
                <th className="px-4 py-2 text-left">Method</th>
                <th className="px-4 py-2 text-left">Status</th>
                <th className="px-4 py-2 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {recentDonations.map((donation, index) => (
                <tr key={index} className="border-b">
                  <td className="px-4 py-2">
                    {donation.isAnonymous ? 'Anonymous' : donation.donorName}
                  </td>
                  <td className="px-4 py-2 font-semibold">{formatCurrency(donation.amount)}</td>
                  <td className="px-4 py-2">{formatDate(donation.date)}</td>
                  <td className="px-4 py-2 capitalize">{donation.paymentMethod}</td>
                  <td className="px-4 py-2">
                    <select
                      value={donation.status}
                      onChange={(e) => onUpdateStatus(donation.id, e.target.value)}
                      className={`px-2 py-1 rounded-full text-xs ${donation.status === 'succeeded'
                        ? 'bg-green-100 text-green-800'
                        : donation.status === 'pending'
                          ? 'bg-yellow-100 text-yellow-800'
                          : 'bg-red-100 text-red-800'
                        }`}
                    >
                      <option value="pending">Pending</option>
                      <option value="succeeded">Succeeded</option>
                      <option value="failed">Failed</option>
                    </select>
                  </td>
                  <td className="px-4 py-2 flex space-x-2">
                    <button
                      onClick={() => onViewDetails(donation.id)}
                      className="text-blue-500 hover:text-blue-700 text-sm"
                    >
                      <i className="fas fa-eye mr-1"></i>View
                    </button>
                    {donation.status === 'succeeded' && (
                      <button
                        onClick={() => onDownloadReceipt(donation.id)}
                        className="text-green-500 hover:text-green-700 text-sm"
                      >
                        <i className="fas fa-download mr-1"></i>Receipt
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 text-center">
          <button
            onClick={fetchAllDonations}
            className="bg-[#FF7E45] text-white px-4 py-2 rounded-md hover:bg-[#F4B942]"
          >
            View All Donations
          </button>
        </div>
      </div>
    </div>
  </section>
);

// Donation Form Section Component with all new fields
const DonationFormSection = ({
  user,
  clientSecret,
  stripePromise,
  donationAmount,
  customAmount,
  donationFrequency,
  paymentMethod,
  isAnonymous,
  isLoadingPaymentIntent,
  donationPurpose,
  CardPaymentForm,
  billingAddress,
  bankDetails,
  formatCurrency,
  guestEmail,
  guestName,
  isProcessing,
  setIsProcessing,
  showThankYou,
  onAmountSelect,
  currency,
  setCurrency,
  onCustomAmountChange,
  onFrequencyChange,
  onPaymentMethodChange,
  onAnonymousChange,
  onDonationPurposeChange,
  onBillingAddressChange,
  onBankDetailsChange,  // ✅ fixed
  onGuestEmailChange,
  onGuestNameChange,
  onSubmit,
  onReset
}) => (
  <section className="py-12">
    <div className="container mx-auto px-4">
      <div className="max-w-4xl mx-auto">
        {!showThankYou ? (
          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            <div className="flex flex-col md:flex-row">
              {/* Left Column - Why Give */}
              <div className="md:w-1/2 bg-[#F9F7F4] p-6 md:p-8">
                <h2 className="text-2xl font-bold mb-4">Why Give?</h2>
                <p className="mb-4">Your donations help us:</p>
                <ul className="space-y-3 mb-6">
                  <li className="flex items-start">
                    <i className="fas fa-church text-[#FF7E45] mt-1 mr-3"></i>
                    <span>Maintain our church facilities</span>
                  </li>
                  <li className="flex items-start">
                    <i className="fas fa-hands-helping text-[#FF7E45] mt-1 mr-3"></i>
                    <span>Support local and global missions</span>
                  </li>
                  <li className="flex items-start">
                    <i className="fas fa-graduation-cap text-[#FF7E45] mt-1 mr-3"></i>
                    <span>Provide educational resources</span>
                  </li>
                  <li className="flex items-start">
                    <i className="fas fa-users text-[#FF7E45] mt-1 mr-3"></i>
                    <span>Fund community outreach programs</span>
                  </li>
                  <li className="flex items-start">
                    <i className="fas fa-hands text-[#FF7E45] mt-1 mr-3"></i>
                    <span>Care for those in need</span>
                  </li>
                </ul>

                <div className="bg-white p-4 rounded-lg border border-gray-200">
                  <h3 className="font-semibold mb-2">Tax Deductible</h3>
                  <p className="text-sm text-gray-600">
                    St. Michael's Church is a 501(c)(3) organization. Your donations are tax-deductible to the extent allowed by law.
                  </p>
                </div>
              </div>

              {/* Right Column - Donation Form */}
              <div className="md:w-1/2 p-6 md:p-8">
                <h2 className="text-2xl font-bold mb-6">Make a Donation</h2>

                {/* Amount Selection */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Donation Amount
                  </label>
                  <div className="grid grid-cols-3 gap-2 mb-2">
                    {[25, 50, 100, 250, 500, 1000].map(amount => (
                      <button
                        key={amount}
                        type="button"
                        onClick={() => onAmountSelect(amount)}
                        className={`py-2 px-3 rounded-md border ${donationAmount === amount.toString()
                          ? 'bg-[#FF7E45] text-white border-[#FF7E45]'
                          : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                          }`}
                      >
                        {formatCurrency(amount, currency)}
                      </button>
                    ))}
                  </div>
                  <div className="mt-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Or enter custom amount
                    </label>

                    <div className="flex gap-2">
                      {/* Currency Selector */}
                      <select
                        value={currency}
                        onChange={(e) => setCurrency(e.target.value)}
                        className="border rounded-md py-2 px-3 text-gray-700 bg-white shadow-sm"
                      >
                        <option value="USD">USD ($)</option>
                        <option value="NGN">NGN (₦)</option>
                        <option value="EUR">EUR (€)</option>
                      </select>

                      {/* Custom Amount Input */}
                      <div className="relative flex-1">
                        <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">
                          {currency === "USD"
                            ? "$"
                            : currency === "NGN"
                              ? "₦"
                              : currency === "EUR"
                                ? "€"
                                : "£"}
                        </span>
                        <input
                          type="number"
                          value={customAmount}
                          onChange={(e) => onCustomAmountChange(e)}
                          className="pl-7 form-input border rounded-md w-full py-2 px-3 border-gray-300"
                          placeholder="Enter amount"
                        />
                      </div>
                    </div>

                    {/* Show formatted preview below input */}
                    {customAmount && (
                      <p className="text-xs text-gray-500 mt-1">
                        {formatCurrency(customAmount, currency, currency === "NGN" ? "en-NG" : "en-US")}
                      </p>
                    )}
                  </div>

                </div>

                {/* Frequency Selection */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Frequency
                  </label>
                  <div className="flex space-x-4">
                    <label className="inline-flex items-center">
                      <input
                        type="radio"
                        name="frequency"
                        value="one-time"
                        checked={donationFrequency === "one-time"}
                        onChange={() => onFrequencyChange("one-time")}
                        className="form-radio h-4 w-4 text-[#FF7E45]"
                      />
                      <span className="ml-2">One-time</span>
                    </label>
                    <label className="inline-flex items-center">
                      <input
                        type="radio"
                        name="frequency"
                        value="monthly"
                        checked={donationFrequency === "monthly"}
                        onChange={() => onFrequencyChange("monthly")}
                        className="form-radio h-4 w-4 text-[#FF7E45]"
                      />
                      <span className="ml-2">Monthly</span>
                    </label>
                  </div>
                </div>

                {/* Purpose Selection */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Donation Purpose (Optional)
                  </label>
                  <select
                    value={donationPurpose}
                    onChange={(e) => onDonationPurposeChange(e.target.value)}
                    className="form-select border rounded-md w-full py-2 px-3 border-gray-300"
                  >
                    <option value="">General Fund</option>
                    <option value="building">Building Fund</option>
                    <option value="missions">Missions</option>
                    <option value="youth">Youth Ministry</option>
                    <option value="outreach">Community Outreach</option>
                    <option value="other">Other</option>
                  </select>
                </div>

                {/* Guest Information for non-logged in users */}
                {!user?.isLoggedIn && (
                  <div className="mb-6 p-4 bg-gray-50 rounded-md">
                    <h3 className="font-medium text-gray-800 mb-3">Your Information</h3>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Email Address *
                        </label>
                        <input
                          type="email"
                          value={guestEmail}
                          onChange={(e) => onGuestEmailChange(e.target.value)}
                          className="form-input border rounded-md w-full py-2 px-3 border-gray-300"
                          placeholder="your@email.com"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Full Name {!isAnonymous ? '*' : ''}
                        </label>
                        <input
                          type="text"
                          value={guestName}
                          onChange={(e) => onGuestNameChange(e.target.value)}
                          disabled={isAnonymous}
                          className="form-input border rounded-md w-full py-2 px-3 border-gray-300 disabled:bg-gray-100"
                          placeholder="Your name"
                          required={!isAnonymous}
                        />
                      </div>
                      <label className="inline-flex items-center">
                        <input
                          type="checkbox"
                          checked={isAnonymous}
                          onChange={(e) => onAnonymousChange(e.target.checked)}
                          className="form-checkbox h-4 w-4 text-[#FF7E45]"
                        />
                        <span className="ml-2">Donate anonymously</span>
                      </label>
                    </div>
                  </div>
                )}

                {/* Payment Method Selection */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Payment Method
                  </label>
                  <div className="flex space-x-4">
                    <label className="inline-flex items-center">
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="card"
                        checked={paymentMethod === "card"}
                        onChange={() => onPaymentMethodChange("card")}
                        className="form-radio h-4 w-4 text-[#FF7E45]"
                      />
                      <span className="ml-2">Credit/Debit Card</span>
                    </label>
                    <label className="inline-flex items-center">
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="bank"
                        checked={paymentMethod === "bank"}
                        onChange={() => onPaymentMethodChange("bank")}
                        className="form-radio h-4 w-4 text-[#FF7E45]"
                      />
                      <span className="ml-2">Bank Transfer</span>
                    </label>
                  </div>
                </div>

                {/* Payment Form */}
                {paymentMethod === "bank" ? (
                  <BankTransferForm
                    onSubmit={onSubmit}
                    isProcessing={isProcessing}
                    bankDetails={bankDetails}
                    onBankDetailsChange={onBankDetailsChange} // ✅ fix
                  />
                ) : null}
                {paymentMethod === "card" && (
                  <div>
                    {isLoadingPaymentIntent ? (
                      <div className="text-center py-4">
                        <Loader type="spinner" text="Initializing payment..." />
                      </div>
                    ) : clientSecret ? (
                      <Elements stripe={stripePromise} options={{ clientSecret }}>
                        <CardPaymentForm
                          onSubmit={onSubmit}
                          isProcessing={isProcessing}
                          setIsProcessing={setIsProcessing}
                          billingAddress={billingAddress}
                          onBillingAddressChange={onBillingAddressChange}
                        />
                      </Elements>
                    ) : donationAmount > 0 ? (
                      <div className="text-yellow-600 text-sm py-2">
                        Unable to initialize payment. Please try selecting the amount again.
                      </div>
                    ) : null}
                  </div>
                )}

                <p className="text-xs text-gray-500 mt-4">
                  By donating, you agree to our Terms of Service and Privacy Policy.
                  Your payment information is securely processed.
                </p>
              </div>
            </div>
          </div>
        ) : (
          <ThankYouSection onReset={onReset} />
        )}
      </div>
    </div>
  </section>
);

// Thank You Section Component
const ThankYouSection = ({ onReset }) => (
  <div className="bg-white rounded-lg shadow-md p-8 text-center">
    <div className="w-20 h-20 mx-auto bg-green-100 rounded-full flex items-center justify-center mb-6">
      <i className="fas fa-check text-green-500 text-3xl"></i>
    </div>
    <h2 className="text-3xl font-bold mb-4">
      Thank You For Your Donation!
    </h2>
    <p className="text-xl text-gray-600 mb-6">
      Your generosity helps us continue our mission.
    </p>
    <p className="mb-8">
      A receipt has been sent to your email address.
    </p>
    <button
      onClick={onReset}
      className="border border-gray-300 px-6 py-2 rounded-md hover:bg-gray-50 transition-colors"
    >
      Make Another Donation
    </button>
  </div>
);

export default DonatePage;
)donatepage.jsx,
(
import React, { useState, useEffect } from "react";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import listPlugin from "@fullcalendar/list";
import interactionPlugin from "@fullcalendar/interaction";
import { eventService } from '../services/apiService'; // Fixed import path
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { Event } from '../models/Events'; // Fixed import name

const EventsPage = ({ user }) => {
  const alert = useAlert();
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [showEventModal, setShowEventModal] = useState(false);
  const [events, setEvents] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userRsvps, setUserRsvps] = useState(new Set());
  const [userFavorites, setUserFavorites] = useState(new Set());
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newEvent, setNewEvent] = useState({
    title: '',
    description: '',
    location: '',
    category: 'service',
    startTime: new Date().toISOString().slice(0, 16),
    endTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString().slice(0, 16),
    capacity: 50,
    imageUrl: ''
  });

  const isAdmin = user?.role === "admin";
  const isAuthenticated = user?.isLoggedIn;

  // Fetch events and user data
  useEffect(() => {
    document.title = "SMC: - Events | St. Micheal`s & All Angels Church | Ifite-Awka";
    fetchEvents();
    if (isAuthenticated) {
      fetchUserRsvps();
      fetchUserFavorites();
    }
  }, [isAuthenticated]);

  const fetchEvents = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await eventService.getAll();
      
      if (response.success) {
        const eventsData = response.data.map(event => new Event(event));
        
        const formattedEvents = eventsData.map(event => ({
          id: event._id || event.id,
          title: event.title,
          start: event.startTime || event.start,
          end: event.endTime || event.end,
          extendedProps: {
            description: event.description,
            location: event.location,
            category: event.category,
            imageUrl: event.imageUrl,
            capacity: event.capacity,
            registered: event.registeredCount || event.registered,
            status: event.status
          },
          backgroundColor: getEventColor(event.category),
          borderColor: getEventColor(event.category),
          textColor: '#ffffff'
        }));

        setEvents(formattedEvents);
      }
    } catch (error) {
      console.error('Error fetching events:', error);
      setError('Failed to load events. Please try again later.');
      alert.error('Failed to load events. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchUserRsvps = async () => {
    try {
      const response = await eventService.getUserRsvps();
      if (response.success) {
        setUserRsvps(new Set(response.data.map(rsvp => rsvp.eventId || rsvp.event?._id)));
      }
    } catch (error) {
      console.error('Error fetching user RSVPs:', error);
      alert.error('Failed to load your RSVPs.');
    }
  };

  const fetchUserFavorites = async () => {
    try {
      const response = await eventService.getUserFavorites();
      if (response.success) {
        setUserFavorites(new Set(response.data.map(fav => fav.eventId || fav.event?._id)));
      }
    } catch (error) {
      console.error('Error fetching user favorites:', error);
      alert.error('Failed to load your favorites.');
    }
  };

  const getEventColor = (category) => {
    const colors = {
      service: '#FF7E45',
      meeting: '#4299E1',
      social: '#48BB78',
      conference: '#9F7AEA',
      default: '#718096'
    };
    return colors[category] || colors.default;
  };

  const handleEventClick = (info) => {
    const event = info.event;
    setSelectedEvent({
      id: event.id,
      title: event.title,
      start: event.start,
      end: event.end,
      description: event.extendedProps?.description,
      location: event.extendedProps?.location,
      category: event.extendedProps?.category,
      imageUrl: event.extendedProps?.imageUrl,
      capacity: event.extendedProps?.capacity,
      registered: event.extendedProps?.registered,
      status: event.extendedProps?.status
    });
    setShowEventModal(true);
  };

  const handleRSVP = async (eventId) => {
    if (!isAuthenticated) {
      alert.info("Please log in to RSVP");
      return;
    }

    try {
      if (userRsvps.has(eventId)) {
        const response = await eventService.cancelRsvp(eventId);
        if (response.success) {
          setUserRsvps(prev => {
            const newSet = new Set(prev);
            newSet.delete(eventId);
            return newSet;
          });
          alert.success("RSVP cancelled successfully.");
        }
      } else {
        const response = await eventService.rsvp(eventId);
        if (response.success) {
          setUserRsvps(prev => new Set(prev).add(eventId));
          alert.success("Thank you for your RSVP! You're all set for this event.");
        }
      }
    } catch (error) {
      console.error('RSVP error:', error);
      if (error.response?.status === 409) {
        alert.error("This event is already at capacity.");
      } else {
        alert.error("Failed to process RSVP. Please try again.");
      }
    }
  };

  const handleAddToFavorites = async (eventId) => {
    if (!isAuthenticated) {
      alert.info("Please log in to add to favorites");
      return;
    }

    try {
      if (userFavorites.has(eventId)) {
        const response = await eventService.removeFavorite(eventId);
        if (response.success) {
          setUserFavorites(prev => {
            const newSet = new Set(prev);
            newSet.delete(eventId);
            return newSet;
          });
          alert.success("Removed from favorites!");
        }
      } else {
        const response = await eventService.addFavorite(eventId);
        if (response.success) {
          setUserFavorites(prev => new Set(prev).add(eventId));
          alert.success("Added to your favorites!");
        }
      }
    } catch (error) {
      console.error('Favorite error:', error);
      alert.error("Failed to update favorites. Please try again.");
    }
  };

  // Admin functions
  const handleCreateEvent = async (eventData) => {
    try {
      const response = await eventService.create(eventData);
      if (response.success) {
        alert.success('Event created successfully');
        setShowCreateModal(false);
        setNewEvent({
          title: '',
          description: '',
          location: '',
          category: 'service',
          startTime: new Date().toISOString().slice(0, 16),
          endTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString().slice(0, 16),
          capacity: 50,
          imageUrl: ''
        });
        fetchEvents();
      }
    } catch (error) {
      console.error('Error creating event:', error);
      alert.error('Failed to create event');
    }
  };

  const handleUpdateEvent = async (eventId, eventData) => {
    try {
      const response = await eventService.update(eventId, eventData);
      if (response.success) {
        alert.success('Event updated successfully');
        setShowEventModal(false);
        fetchEvents();
      }
    } catch (error) {
      console.error('Error updating event:', error);
      alert.error('Failed to update event');
    }
  };

  const handleDeleteEvent = async (eventId) => {
    try {
      const response = await eventService.delete(eventId);
      if (response.success) {
        alert.success('Event deleted successfully');
        setShowEventModal(false);
        fetchEvents();
      }
    } catch (error) {
      console.error('Error deleting event:', error);
      alert.error('Failed to delete event');
    }
  };

  const formatDate = (date) => {
    return date.toLocaleDateString("en-US", {
      weekday: "long",
      month: "long",
      day: "numeric",
      year: "numeric",
    });
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "2-digit",
    });
  };

  // Function to handle creating a new event (for admin)
  const handleCreateNewEvent = () => {
    setShowCreateModal(true);
  };

  // Handle form input changes for creating events
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewEvent(prev => ({
      ...prev,
      [name]: value
    }));
  };

  if (isLoading) {
    return <Loader type="spinner" text="Loading events..." fullScreen={true} />;
  }

  return (
    <div className="page">
      {/* Header */}
      <section className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] py-12 px-4">
        <div className="container mx-auto text-center text-white">
          <h1 className="text-4xl font-bold mb-4">Events Calendar</h1>
          <p className="text-xl max-w-2xl mx-auto">
            Stay connected with all the happenings at St Michael's
          </p>

          {/* Admin Controls */}
          {isAdmin && (
            <div className="mt-6">
              <button
                onClick={handleCreateNewEvent}
                className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
              >
                <i className="fas fa-plus mr-2"></i>Create New Event
              </button>
            </div>
          )}
        </div>
      </section>

      {error && (
        <div className="container mx-auto px-4 py-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}

      {/* Calendar Section */}
      <section className="py-12">
        <div className="container mx-auto px-4">
          <div className="bg-white rounded-lg shadow-md p-4 md:p-8">
            <FullCalendar
              plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin]}
              initialView="dayGridMonth"
              headerToolbar={{
                left: "prev,next today",
                center: "title",
                right: "dayGridMonth,timeGridWeek,listMonth",
              }}
              events={events}
              eventClick={handleEventClick}
              height="auto"
              eventDisplay="block"
              eventTimeFormat={{
                hour: 'numeric',
                minute: '2-digit',
                meridiem: 'short'
              }}
            />
          </div>
        </div>
      </section>

      {/* Event Modal */}
      {showEventModal && selectedEvent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-2xl font-bold">{selectedEvent.title}</h3>
                <button
                  onClick={() => setShowEventModal(false)}
                  className="text-gray-400 hover:text-gray-600 text-xl"
                >
                  ×
                </button>
              </div>

              {/* Event Image */}
              {selectedEvent.imageUrl && (
                <div className="mb-4">
                  <img
                    src={selectedEvent.imageUrl}
                    alt={selectedEvent.title}
                    className="w-full h-48 object-cover rounded-lg"
                    onError={(e) => {
                      e.target.style.display = 'none';
                    }}
                  />
                </div>
              )}

              <div className="mb-4 space-y-2">
                <div className="flex items-center text-gray-600">
                  <span className="mr-2 w-6"><i className="fas fa-calendar-alt"></i></span>
                  <span>{formatDate(new Date(selectedEvent.start))}</span>
                </div>
                <div className="flex items-center text-gray-600">
                  <span className="mr-2 w-6"><i className="fas fa-clock"></i></span>
                  <span>
                    {formatTime(new Date(selectedEvent.start))} - {formatTime(new Date(selectedEvent.end))}
                  </span>
                </div>
                {selectedEvent.location && (
                  <div className="flex items-center text-gray-600">
                    <span className="mr-2 w-6"><i className="fas fa-map-marker-alt"></i></span>
                    <span>{selectedEvent.location}</span>
                  </div>
                )}
                {selectedEvent.capacity && (
                  <div className="flex items-center text-gray-600">
                    <span className="mr-2 w-6"><i className="fas fa-users"></i></span>
                    <span>
                      {selectedEvent.registered || 0} / {selectedEvent.capacity} registered
                      {selectedEvent.registered >= selectedEvent.capacity && (
                        <span className="ml-2 text-red-500">(Full)</span>
                      )}
                    </span>
                  </div>
                )}
              </div>

              <p className="text-gray-700 mb-6">{selectedEvent.description}</p>

              <div className="flex justify-between items-center space-x-4">
                {isAuthenticated ? (
                  <>
                    <button
                      onClick={() => handleRSVP(selectedEvent.id)}
                      className={`flex-1 py-2 px-4 rounded-md transition-colors ${userRsvps.has(selectedEvent.id)
                          ? "bg-gray-500 hover:bg-gray-600 text-white"
                          : selectedEvent.registered >= selectedEvent.capacity
                            ? "bg-gray-400 cursor-not-allowed text-white"
                            : "bg-[#FF7E45] hover:bg-[#E56A36] text-white"
                        }`}
                      disabled={selectedEvent.registered >= selectedEvent.capacity && !userRsvps.has(selectedEvent.id)}
                    >
                      <span className="mr-2">
                        <i className={`fas ${userRsvps.has(selectedEvent.id) ? 'fa-times' : 'fa-check'}`}></i>
                      </span>
                      {userRsvps.has(selectedEvent.id) ? 'Cancel RSVP' : 'RSVP'}
                    </button>

                    <button
                      onClick={() => handleAddToFavorites(selectedEvent.id)}
                      className={`p-2 rounded-md transition-colors ${userFavorites.has(selectedEvent.id)
                          ? "text-[#FF7E45] bg-orange-100"
                          : "text-gray-400 hover:text-[#FF7E45] hover:bg-gray-100"
                        }`}
                    >
                      <i className={`fas ${userFavorites.has(selectedEvent.id) ? 'fa-heart text-red-500' : 'fa-heart'}`}></i>
                    </button>
                  </>
                ) : (
                  <button
                    onClick={() => alert.info("Please log in to RSVP")}
                    className="flex-1 bg-[#FF7E45] hover:bg-[#E56A36] text-white py-2 px-4 rounded-md transition-colors"
                  >
                    <span className="mr-2"><i className="fas fa-lock"></i></span> Login to RSVP
                  </button>
                )}
              </div>

              {/* Admin actions */}
              {isAdmin && (
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <h4 className="font-semibold mb-2">Admin Actions</h4>
                  <div className="flex space-x-2">
                    <button 
                      onClick={() => handleUpdateEvent(selectedEvent.id, selectedEvent)}
                      className="text-sm bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
                    >
                      <i className="fas fa-edit mr-1"></i>Edit
                    </button>
                    <button 
                      onClick={() => handleDeleteEvent(selectedEvent.id)}
                      className="text-sm bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                    >
                      <i className="fas fa-trash mr-1"></i>Delete
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Create Event Modal */}
      {showCreateModal && isAdmin && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-2xl font-bold">Create New Event</h3>
                <button
                  onClick={() => setShowCreateModal(false)}
                  className="text-gray-400 hover:text-gray-600 text-xl"
                >
                  ×
                </button>
              </div>
              
              <div className="space-y-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Event Title</label>
                  <input
                    type="text"
                    name="title"
                    value={newEvent.title}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    placeholder="Enter event title"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Description</label>
                  <textarea
                    name="description"
                    value={newEvent.description}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    rows="3"
                    placeholder="Enter event description"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Location</label>
                  <input
                    type="text"
                    name="location"
                    value={newEvent.location}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    placeholder="Enter event location"
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Start Time</label>
                    <input
                      type="datetime-local"
                      name="startTime"
                      value={newEvent.startTime}
                      onChange={handleInputChange}
                      className="w-full p-2 border border-gray-300 rounded-md"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">End Time</label>
                    <input
                      type="datetime-local"
                      name="endTime"
                      value={newEvent.endTime}
                      onChange={handleInputChange}
                      className="w-full p-2 border border-gray-300 rounded-md"
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Capacity</label>
                  <input
                    type="number"
                    name="capacity"
                    value={newEvent.capacity}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    placeholder="Enter capacity"
                  />
                </div>
              </div>
              
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowCreateModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleCreateEvent(newEvent)}
                  className="px-4 py-2 bg-[#FF7E45] text-white rounded-md hover:bg-[#E56A36]"
                >
                  Create Event
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EventsPage;
)eventspage.jsx,
(
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Swiper from "swiper";
import "swiper/swiper-bundle.css";
import { 
  sermonService, 
  eventService, 
  testimonialService, 
  ministryService, 
  utilityService 
} from '../services/apiService';
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { Sermon } from '../models/Sermon';
import { Event } from '../models/Events'; // Fixed import name (should be Event, not Events)
import { Testimonial } from '../models/Testimonial';

const HomePage = () => {
  const alert = useAlert();
  const navigate = useNavigate();
  const [featuredSermon, setFeaturedSermon] = useState(null);
  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [testimonials, setTestimonials] = useState([]);
  const [ministries, setMinistries] = useState([]);
  const [serviceTimes, setServiceTimes] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [churchStats, setChurchStats] = useState(null);
  const [heroContent, setHeroContent] = useState(null);
  const [liveStatus, setLiveStatus] = useState(null);

  // Fetch all homepage data
  useEffect(() => {
    document.title = "SMC: - Home | St. Micheal`s & All Angels Church | Ifite-Awka";
    fetchHomePageData();
  }, []);

  // Initialize swiper when testimonials are loaded
  useEffect(() => {
    if (testimonials.length > 0) {
      const swiper = new Swiper('.testimonial-swiper', {
        slidesPerView: 1,
        spaceBetween: 30,
        pagination: {
          el: '.swiper-pagination',
          clickable: true,
        },
        breakpoints: {
          640: { slidesPerView: 1 },
          768: { slidesPerView: 2 },
          1024: { slidesPerView: 3 },
        },
        autoplay: { delay: 5000 },
        loop: true,
      });

      return () => {
        swiper.destroy();
      };
    }
  }, [testimonials.length]);

  const fetchHomePageData = async () => {
    try {
      setIsLoading(true);
      
      // Fetch all data in parallel using the apiService
      const [
        sermonsResponse, 
        eventsResponse, 
        testimonialsResponse,
        ministriesResponse,
        serviceTimesResponse,
        statsResponse,
        heroResponse,
        liveResponse
      ] = await Promise.allSettled([
        sermonService.getFeatured(3),
        eventService.getUpcoming(3),
        testimonialService.getApproved(6),
        ministryService.getAll(),
        utilityService.getServiceTimes(),
        utilityService.getChurchStats(),
        utilityService.getHeroContent(),
        utilityService.getLiveStatus()
      ]);

      // Handle responses
      if (sermonsResponse.status === 'fulfilled' && sermonsResponse.value.success) {
        setFeaturedSermon(sermonsResponse.value.data[0] ? new Sermon(sermonsResponse.value.data[0]) : null);
      }

      if (eventsResponse.status === 'fulfilled' && eventsResponse.value.success) {
        setUpcomingEvents(eventsResponse.value.data.map(event => new Event(event)));
      }

      if (testimonialsResponse.status === 'fulfilled' && testimonialsResponse.value.success) {
        setTestimonials(testimonialsResponse.value.data.map(testimonial => new Testimonial(testimonial)));
      }

      if (ministriesResponse.status === 'fulfilled' && ministriesResponse.value.success) {
        setMinistries(ministriesResponse.value.data.slice(0, 4)); // Get only first 4 ministries
      }

      if (serviceTimesResponse.status === 'fulfilled' && serviceTimesResponse.value.success) {
        setServiceTimes(serviceTimesResponse.value.data);
      }

      if (statsResponse.status === 'fulfilled' && statsResponse.value.success) {
        setChurchStats(statsResponse.value.data);
      }

      if (heroResponse.status === 'fulfilled' && heroResponse.value.success) {
        setHeroContent(heroResponse.value.data);
      }

      if (liveResponse.status === 'fulfilled' && liveResponse.value.success) {
        setLiveStatus(liveResponse.value.data);
      }

    } catch (error) {
      console.error('Error fetching home page data:', error);
      alert.error('Failed to load some content. Please refresh the page.');
    } finally {
      setIsLoading(false);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric'
    });
  };

  const getNextServiceDate = () => {
    const today = new Date();
    const daysUntilSunday = 7 - today.getDay();
    const nextSunday = new Date(today);
    nextSunday.setDate(today.getDate() + daysUntilSunday);
    return formatDate(nextSunday);
  };

  if (isLoading) {
    return <Loader type="spinner" text="Loading church information..." />;
  }

  return (
    <div className="page">
      {/* Hero Section */}
      <HeroSection onNavigate={navigate} heroContent={heroContent} />

      {/* Featured Service */}
      <FeaturedServiceSection 
        nextServiceDate={getNextServiceDate()} 
        onNavigate={navigate} 
        liveStatus={liveStatus}
      />

      {/* Weekly Schedule */}
      <ScheduleSection serviceTimes={serviceTimes} />

      {/* Ministries Preview */}
      <MinistriesSection ministries={ministries} onNavigate={navigate} />

      {/* Testimonials */}
      <TestimonialsSection testimonials={testimonials} onNavigate={navigate} />

      {/* Latest Sermons */}
      <SermonsSection featuredSermon={featuredSermon} onNavigate={navigate} />

      {/* Upcoming Events Section */}
      <EventsSection upcomingEvents={upcomingEvents} onNavigate={navigate} />

      {/* Call to Action */}
      <CallToActionSection onNavigate={navigate} churchStats={churchStats} />
    </div>
  );
};

// Hero Section Component
const HeroSection = ({ onNavigate, heroContent }) => (
  <section className="hero relative flex items-center justify-center min-h-screen overflow-hidden">
    <div className="absolute inset-0 w-full h-full">
      <video
        autoPlay
        muted
        loop
        playsInline
        className="w-full h-full object-cover"
        poster="https://images.unsplash.com/photo-1514525253161-7a46d19cd819?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80"
      >
        <source src="https://player.vimeo.com/external/370331493.sd.mp4?s=ada720b5a8e8c7c7e94aeb5f0937b39b2bb2e8d6&profile_id=139&oauth2_token_id=57447761" type="video/mp4" />
        <img
          src="https://images.unsplash.com/photo-1514525253161-7a46d19cd819?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwa90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80"
          alt="Church background"
          className="w-full h-full object-cover"
        />
      </video>
      <div className="absolute inset-0 bg-black bg-opacity-40"></div>
    </div>

    <div className="container mx-auto px-4 text-center text-white relative z-10">
      <div className="mb-6">
        <i className="fas fa-church text-4xl md:text-5xl text-white mb-4"></i>
      </div>

      <h2 className="text-4xl font-bold mb-4 m-0">Welcome to St Michael's & All Angels Anglican Church Ifite-Awka</h2>
      <p className="text-lg m-0 max-w-2xl font-bold mx-auto">The Throne Of Grace Parish.</p>

      <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4 mt-8">
        <button
          className="btn bg-[#FF7E45] hover:bg-white text-white hover:text-[#FF7E45] border-2 border-[#FF7E45] px-8 py-3 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg"
          onClick={() => onNavigate('/events')}
        >
          <i className="far fa-calendar-alt mr-2"></i> Upcoming Events
        </button>
        <button
          className="btn bg-transparent border-2 border-white text-white hover:bg-white hover:text-[#FF7E45] px-8 py-3 rounded-full transition-all duration-300 transform hover:scale-105"
          onClick={() => onNavigate('/sermons')}
        >
          <i className="fas fa-play-circle mr-2"></i> Watch Sermons
        </button>
      </div>
    </div>

    <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-10">
      <div className="animate-bounce">
        <i className="fas fa-chevron-down text-white text-2xl"></i>
      </div>
    </div>

    <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent h-32"></div>
  </section>
);

// Featured Service Section Component
const FeaturedServiceSection = ({ nextServiceDate, onNavigate, liveStatus }) => (
  <section className="py-12 bg-white">
    <div className="container mx-auto px-4">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold mb-2">Join Us This Sunday</h2>
        <p className="text-gray-600">Experience worship, community, and inspiration</p>
      </div>

      <div className="bg-[#F9F7F4] rounded-lg shadow-md overflow-hidden">
        <div className="flex flex-col md:flex-row">
          <div className="md:w-1/2">
            <img 
              src="https://cdn.pixabay.com/photo/2016/11/22/19/15/crowd-1850119_1280.jpg"
              alt="Sunday Service" 
              className="w-full h-full object-cover" 
              onError={(e) => {
                e.target.src = 'https://cdn.pixabay.com/photo/2016/11/22/19/15/crowd-1850119_1280.jpg';
              }}
            />
          </div>
          <div className="md:w-1/2 p-6 md:p-8 flex flex-col justify-center">
            <div className="text-[#FF7E45] font-semibold mb-2">NEXT SERVICE</div>
            <h3 className="text-2xl font-bold mb-4">Finding Peace in Troubled Times</h3>
            <p className="text-gray-700 mb-6">Join us this Sunday for an inspiring message about discovering God's peace in our daily lives.</p>
            <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
              <div className="flex items-center">
                <i className="far fa-calendar text-[#FF7E45] mr-2"></i>
                <span>{nextServiceDate}</span>
              </div>
              <div className="flex items-center">
                <i className="far fa-clock text-[#FF7E45] mr-2"></i>
                <span>9:00 AM & 11:00 AM</span>
              </div>
            </div>
            
            {/* Live Status Indicator */}
            {liveStatus && liveStatus.isLive && (
              <div className="mt-4 flex items-center">
                <span className="relative flex h-3 w-3 mr-2">
                  <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                  <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
                </span>
                <span className="text-red-600 font-semibold">Live Now</span>
              </div>
            )}
            
            <button className="btn btn-outline mt-6 hover:bg-[#FF7E45] p-2 rounded-lg transition-colors duration-200 hover:text-white" onClick={() => onNavigate('/events')}>
              Plan Your Visit
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>
);

// Schedule Section Component
const ScheduleSection = ({ serviceTimes }) => (
  <section className="py-12 bg-gray-50">
    <div className="container mx-auto px-4">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold mb-2">Weekly Schedule</h2>
        <p className="text-gray-600">Join us for these regular activities</p>
      </div>

      {serviceTimes.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {serviceTimes.map((service, index) => (
            <div key={index} className="bg-white rounded-lg shadow-md p-6">
              <div className="text-[#FF7E45] text-2xl mb-3">
                <i className={`fas ${
                  service.service.includes('Sunday') ? 'fa-pray' :
                  service.service.includes('Bible') ? 'fa-book-open' :
                  'fa-users'
                }`}></i>
              </div>
              <h3 className="text-xl font-bold mb-2">{service.service}</h3>
              <p className="text-gray-600 mb-4">{service.description}</p>
              <div className="flex items-center text-sm text-gray-500">
                <i className="far fa-clock mr-2"></i>
                <span>{service.time}</span>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8">
          <p className="text-gray-600">Service times will be posted soon.</p>
        </div>
      )}
    </div>
  </section>
);

// Ministries Section Component
const MinistriesSection = ({ ministries, onNavigate }) => (
  <section className="py-12 bg-white">
    <div className="container mx-auto px-4">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold mb-2">Our Ministries</h2>
        <p className="text-gray-600 mb-6">How we're serving our community and beyond</p>
      </div>

      {ministries.length > 0 ? (
        <>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            {ministries.slice(0, 4).map((ministry, index) => (
              <div key={ministry.id || index} className="ministry-card group" onClick={() => onNavigate('/ministries')}>
                <div className="h-48 bg-gray-200 relative overflow-hidden">
                  <img 
                    src={ministry.imageUrl || `https://cdn.pixabay.com/photo/2017/01/14/19/42/woman-1980079_1280.jpg`} 
                    className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110" 
                    alt={ministry.name}
                    onError={(e) => {
                      e.target.src = 'https://cdn.pixabay.com/photo/2017/01/14/19/42/woman-1980079_1280.jpg';
                    }}
                  />
                  <div className="absolute inset-0 bg-black bg-opacity-20 group-hover:bg-opacity-30 transition-all"></div>
                  <div className="absolute bottom-0 left-0 right-0 p-4 text-white">
                    <h3 className="text-xl font-bold">{ministry.name}</h3>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="text-center mt-8">
            <button className="btn btn-outline hover:bg-[#FF7E45] p-2 rounded-lg transition-colors duration-200 hover:text-white" onClick={() => onNavigate('/ministries')}>
              View All Ministries
            </button>
          </div>
        </>
      ) : (
        <div className="text-center py-8">
          <p className="text-gray-600">Ministry information will be available soon.</p>
        </div>
      )}
    </div>
  </section>
);

// Testimonials Section Component
const TestimonialsSection = ({ testimonials, onNavigate }) => (
  <section className="py-12 bg-gray-50">
    <div className="container mx-auto px-4">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold mb-2">Testimonials</h2>
        <p className="text-gray-600">Stories from our church family</p>
      </div>

      {testimonials.length > 0 ? (
        <div className="testimonial-swiper swiper">
          <div className="swiper-wrapper pb-12">
            {testimonials.map((testimonial, index) => (
              <div key={testimonial.id || index} className="swiper-slide">
                <div className="testimonial-card h-full flex flex-col bg-white p-6 rounded-lg shadow-md">
                  <div className="mb-4 text-[#FF7E45]">
                    <i className="fas fa-quote-left text-3xl"></i>
                  </div>
                  <p className="flex-grow text-gray-700 italic mb-4">
                    {testimonial.content}
                  </p>
                  <div className="flex items-center">
                    <img 
                      src={testimonial.imageUrl || `https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png`} 
                      alt={testimonial.author} 
                      className="w-12 h-12 rounded-full object-cover mr-4" 
                      onError={(e) => {
                        e.target.src = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png';
                      }}
                    />
                    <div>
                      <h4 className="font-semibold">{testimonial.author}</h4>
                      <p className="text-sm text-gray-600">{testimonial.role}</p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="swiper-pagination"></div>
        </div>
      ) : (
        <div className="text-center py-8">
          <p className="text-gray-600">No testimonials available yet.</p>
        </div>
      )}

      <div className="text-center mt-8">
        <button className="btn btn-outline hover:bg-[#FF7E45] p-2 rounded-lg transition-colors duration-200 hover:text-white" onClick={() => onNavigate('/testimonials')}>
          Read More Stories
        </button>
      </div>
    </div>
  </section>
);

// Sermons Section Component
const SermonsSection = ({ featuredSermon, onNavigate }) => (
  <section className="py-12 bg-white">
    <div className="container mx-auto px-4">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold mb-2">Latest Sermons</h2>
        <p className="text-gray-600">Watch or listen to recent messages</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {featuredSermon ? (
          <>
            <div className="sermon-card cursor-pointer" onClick={() => onNavigate('/sermons')}>
              <div className="relative">
                <img
                  src={featuredSermon.imageUrl || "https://cdn.pixabay.com/photo/2018/03/03/20/02/laptop-3196481_1280.jpg"}
                  alt={featuredSermon.title}
                  className="w-full h-48 object-cover"
                  onError={(e) => {
                    e.target.src = 'https://cdn.pixabay.com/photo/2018/03/03/20/02/laptop-3196481_1280.jpg';
                  }}
                />
                <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
                  <div className="w-16 h-16 bg-[#FF7E45] text-white rounded-full flex items-center justify-center">
                    <i className="fas fa-play text-2xl"></i>
                  </div>
                </div>
              </div>
              <div className="p-4">
                <div className="text-sm text-gray-500 mb-2">
                  {new Date(featuredSermon.date).toLocaleDateString()}
                </div>
                <h3 className="text-xl font-bold mb-2">{featuredSermon.title}</h3>
                <p className="text-gray-600">{featuredSermon.speaker}</p>
              </div>
            </div>

            {[1, 2].map((item) => (
              <div key={item} className="sermon-card opacity-50 cursor-pointer" onClick={() => onNavigate('/sermons')}>
                <div className="relative">
                  <div className="w-full h-48 bg-gray-200 flex items-center justify-center">
                    <i className="fas fa-sermon text-3xl text-gray-400"></i>
                  </div>
                </div>
                <div className="p-4">
                  <div className="h-4 bg-gray-200 rounded mb-3"></div>
                  <div className="h-6 bg-gray-200 rounded w-3/4"></div>
                </div>
              </div>
            ))}
          </>
        ) : (
          [1, 2, 3].map((item) => (
            <div key={item} className="sermon-card animate-pulse">
              <div className="w-full h-48 bg-gray-200"></div>
              <div className="p-4">
                <div className="h-4 bg-gray-200 rounded mb-3"></div>
                <div className="h-6 bg-gray-200 rounded w-3/4"></div>
              </div>
            </div>
          ))
        )}
      </div>

      <div className="text-center mt-8">
        <button className="btn btn-outline hover:bg-[#FF7E45] p-2 rounded-lg transition-colors duration-200 hover:text-white" onClick={() => onNavigate('/sermons')}>
          View All Sermons
        </button>
      </div>
    </div>
  </section>
);

// Events Section Component
const EventsSection = ({ upcomingEvents, onNavigate }) => (
  <section className="upcoming-events-section py-12 bg-gray-50">
    <div className="container mx-auto px-4">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold mb-2">Upcoming Events</h2>
        <p className="text-gray-600">Join us for these upcoming events</p>
      </div>

      {upcomingEvents.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-gray-600">No upcoming events found.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {upcomingEvents.map(event => (
            <div key={event.id} className="bg-white rounded-lg shadow-md p-6">
              <div className="text-[#FF7E45] text-2xl mb-3">
                <i className={`fas ${
                  event.type === 'service' ? 'fa-pray' :
                  event.type === 'bible-study' ? 'fa-book-open' :
                  'fa-users'
                }`}></i>
              </div>
              <h3 className="text-xl font-bold mb-2">{event.title}</h3>
              <p className="text-gray-600 mb-4">{event.description}</p>
              <div className="flex items-center text-sm text-gray-500">
                <i className="far fa-clock mr-2"></i>
                <span>{new Date(event.startTime).toLocaleString()}</span>
                {event.location && <span className="ml-4">| {event.location}</span>}
              </div>
            </div>
          ))}
        </div>
      )}

      <div className="text-center mt-8">
        <button className="btn btn-outline hover:bg-[#FF7E45] p-2 rounded-lg transition-colors duration-200 hover:text-white" onClick={() => onNavigate('/events')}>
          View All Events
        </button>
      </div>
    </div>
  </section>
);

// Call to Action Section Component
const CallToActionSection = ({ onNavigate, churchStats }) => (
  <section className="py-16 bg-gradient-to-r from-[#FF7E45] to-[#F4B942] text-white">
    <div className="container mx-auto px-4 text-center">
      <h2 className="text-3xl md:text-4xl font-bold mb-4">Join Our Community</h2>
      <p className="text-xl mb-8 max-w-2xl mx-auto">Become part of a loving church family and grow in your faith journey.</p>
      
      {/* Church Stats */}
      {churchStats && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          <div className="text-center">
            <div className="text-3xl font-bold">{churchStats.members}+</div>
            <div className="text-sm">Members</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold">{churchStats.ministries}</div>
            <div className="text-sm">Ministries</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold">{churchStats.events}</div>
            <div className="text-sm">Events</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold">{churchStats.community}</div>
            <div className="text-sm">Community</div>
          </div>
        </div>
      )}
      
      <div className="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4">
        <button className="btn bg-white p-2 rounded-lg text-[#FF7E45] hover:text-white hover:bg-transparent border-2 hover:border-white " onClick={() => onNavigate('/events')}>
          Plan Your Visit
        </button>
        <button className="btn bg-transparent border-2 border-white p-2 rounded-lg hover:bg-white hover:text-[#FF7E45]" onClick={() => onNavigate('/prayer')}>
          Submit Prayer Request
        </button>
      </div>
    </div>
  </section>
);

export default HomePage;
)hgomepage.jsx,
(
import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import { authService } from '../services/apiService'; // Fixed import path
import { useAlert } from "../utils/Alert";
import { User } from '../models/User';
import {
  setAuthToken,
  validateAdminCode,
  isAdmin,
  getStoredUser,
  isAuthenticated,
  removeAuthToken
} from '../utils/auth';
// import SocialLoginButtons from '../components/SocialLoginButtons'; // Import the SocialLoginButtons component

const LoginPage = ({ login }) => {
  const [isRegistering, setIsRegistering] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [showAdminCode, setShowAdminCode] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showAdminPassword, setShowAdminPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [showLoginPassword, setShowLoginPassword] = useState(false);
  const navigate = useNavigate();
  const alert = useAlert();

  // Check if user is already authenticated on component mount
  React.useEffect(() => {
    document.title = "SMC: - Sign-In | St. Micheal`s & All Angels Church | Ifite-Awka";

    if (isAuthenticated()) {
      const user = getStoredUser();
      if (user) {
        navigate(isAdmin() ? `/admin/${result.user.id}/dashboard`: `/user/${result.user.id}/dashboard`);
      }
    }
  }, [navigate]);

  const handleSocialSuccess = (userData) => {
    // Set auth token and store user data
    setAuthToken(userData.token);

    const user = new User(userData.user);
    login(userData.token, user);

    alert.success(`Welcome ${user.name || user.email}!`);

    // Redirect based on admin status
    navigate(isAdmin() ? `/admin/${user.id}/dashboard` : `/user/${user.id}/dashboard`);
  };

  const handleSocialError = (error) => {
    setError(error);
    alert.error(error);
  };

 const handleLogin = async (e) => {
  e.preventDefault();
  setIsLoading(true);
  setError("");

  const formData = new FormData(e.target);
  const credentials = {
    email: formData.get("email"),
    password: formData.get("password")
  };

  try {
    const response = await authService.login(credentials);
    console.log('Full login response:', response);

    // FIX: Correct response structure check - handle both response formats
    let success, userData, token, message, code;
    
    // Handle both response structures: 
    // 1. response.data.{success, user, token} (API client returns full response)
    // 2. response.{success, user, token} (if API client was modified to return data directly)
    if (response && response.data) {
      success = response.data.success;
      userData = response.data.user;
      token = response.data.token;
      message = response.data.message;
      code = response.data.code;
    } else {
      success = response.success;
      userData = response.user;
      token = response.token;
      message = response.message;
      code = response.code;
    }

    if (success) {
      // Set auth token and store user data
      setAuthToken(token);

      if (!userData.emailVerified) {
        // FIX: Correct route format - remove colon before token
        navigate('/verify-email', { 
          state: { 
            email: userData.email,
            // If you need to pass the token for any reason, do it in state, not URL
            token: token 
          } 
        });
        alert.info('Please verify your email address before logging in.');
        return;
      }

      login(token, userData);
      alert.success(`Welcome back, ${userData.name || userData.email}!`);
      
      // FIX: Correct navigation
      if (userData.role === 'admin') {
        navigate(`/admin/${userData.id}/dashboard`);
      } else {
        navigate(`/user/${userData.id}/dashboard`);
      }
    } else {
      // FIX: Correct error message extraction
      setError(message || "Login failed");

      if (code === 'EMAIL_NOT_VERIFIED') {
        // FIX: Correct route format
        navigate('/verify-email', { 
          state: { 
            email: credentials.email 
          } 
        });
      }
    }
  } catch (error) {
    console.error('Login error:', error);
    
    // FIX: Correct error response structure
    const errorData = error.response?.data || error.response;
    alert.error(errorData?.message || 'Default error message');

    if (errorData?.message) {
      setError(errorData.message);
    } else if (error.response?.status === 401) {
      setError("Invalid email or password");
    } else if (error.response?.status === 403) {
      setError("Please verify your email address first");
      navigate('/verify-email', {
        state: { email: credentials.email }
      });
    } else if (error.message === 'Duplicate request cancelled') {
      setError("Login request already in progress. Please wait.");
    } else {
      setError("Login failed. Please try again later.");
    }
  } finally {
    setIsLoading(false);
  }
};

  const handleRegister = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");

    const formData = new FormData(e.target);
    const userData = {
      name: formData.get("name"),
      email: formData.get("email"),
      password: formData.get("password"),
      confirmPassword: formData.get("confirmPassword"),
      adminCode: formData.get("adminCode") || null
    };

    // Validation
    if (userData.password !== userData.confirmPassword) {
      setError("Passwords do not match");
      setIsLoading(false);
      return;
    }

    try {
      const response = await authService.register(userData);

      if (response.success) {
        alert.success(response.message);
        navigate(`/verify-email:${response.token}`, { state: { email: userData.email } });
      } else {
        setError(response.message || "Registration failed");
      }
    } catch (error) {
      console.error('Registration error:', error);

      if (error.response?.data?.message) {
        setError(error.response.data.message);
      } else if (error.response?.status === 409) {
        setError("Email already exists. Please login instead.");
      } else {
        setError("Registration failed. Please try again later.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleForgotPassword = async () => {
    const email = document.querySelector('input[name="email"]')?.value;
    if (!email) {
      setError("Please enter your email address first");
      return;
    }

    try {
      const response = await authService.forgotPassword(email);
      if (response.success) {
        alert.success('Password reset instructions sent to your email.');
        navigate('/reset-password', { state: { email } });
      } else {
        setError(response.message || "Failed to send reset instructions");
      }
    } catch (error) {
      console.error('Forgot password error:', error);
      if (error.response?.status === 404) {
        setError("Email not found. Please check your email address.");
      } else {
        setError("Failed to send reset instructions. Please try again.");
      }
    }
  };

  const toggleAdminCode = () => {
    setShowAdminCode(!showAdminCode);
  };

  const togglePasswordVisibility = (field) => {
    switch (field) {
      case 'login':
        setShowLoginPassword(!showLoginPassword);
        break;
      case 'admin':
        setShowAdminPassword(!showAdminPassword);
        break;
      case 'register':
        setShowPassword(!showPassword);
        break;
      case 'confirm':
        setShowConfirmPassword(!showConfirmPassword);
        break;
      default:
        break;
    }
  };

  const handleResendVerification = async () => {
    const email = document.querySelector('input[name="email"]')?.value;
    if (!email) {
      setError("Please enter your email address first");
      return;
    }

    try {
      const response = await authService.resendVerification(email);
      if (response.success) {
        alert.success('Verification email sent successfully!');
        navigate(`/verify-email:${response.token}`, { state: { email } });
      }
    } catch (error) {
      console.error('Resend verification error:', error);
      setError("Failed to resend verification email. Please try again.");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full">
        {/* Card Container */}
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
          {/* Header Section */}
          <div className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] p-8 text-center">
            <div className="flex items-center justify-center mb-4">
              <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center">
                <i className="fas fa-church text-[#FF7E45] text-3xl"></i>
              </div>
            </div>
            <h1 className="text-3xl font-bold text-white">St Michael's Church</h1>
            <p className="mt-2 text-white/90">
              {isRegistering ? "Create your account" : "Welcome back to your church community"}
            </p>
          </div>

          {/* Form Section */}
          <div className="p-8">
            {error && (
              <div className="mb-6 p-3 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-red-600 text-sm flex items-center">
                  <i className="fas fa-exclamation-circle mr-2"></i>
                  {error}
                </p>
                {(error.includes("verify") || error.includes("activated")) && (
                  <button
                    type="button"
                    onClick={handleResendVerification}
                    className="text-blue-600 text-xs mt-2 hover:underline"
                  >
                    Resend verification email
                  </button>
                )}
              </div>
            )}

            {!isRegistering ? (
              <>
                <form onSubmit={handleLogin} className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Email Address
                    </label>
                    <input
                      type="email"
                      name="email"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors"
                      placeholder="Enter your email"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Password
                    </label>
                    <div className="relative">
                      <input
                        type={showLoginPassword ? "text" : "password"}
                        name="password"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors pr-10"
                        placeholder="Enter your password"
                        required
                      />
                      <button
                        type="button"
                        onClick={() => togglePasswordVisibility('login')}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                      >
                        <i className={`fas ${showLoginPassword ? 'fa-eye-slash' : 'fa-eye'} text-sm`}></i>
                      </button>
                    </div>
                  </div>

                  {/* Admin Code for Login */}
                  <div className="border-t pt-4">
                    <button
                      type="button"
                      onClick={toggleAdminCode}
                      className="text-sm text-[#FF7E45] hover:text-[#F4B942] mb-2 flex items-center"
                    >
                      <i className={`fas ${showAdminCode ? 'fa-eye-slash' : 'fa-eye'} mr-2`}></i>
                      {showAdminCode ? 'Hide' : 'Show'} Admin Login
                    </button>

                    {showAdminCode && (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Admin Password
                        </label>
                        <div className="relative">
                          <input
                            type={showAdminPassword ? "text" : "password"}
                            name="adminPassword"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors pr-10"
                            placeholder="Enter your password"
                            required
                          />
                          <button
                            type="button"
                            onClick={() => togglePasswordVisibility('admin')}
                            className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                          >
                            <i className={`fas ${showAdminPassword ? 'fa-eye-slash' : 'fa-eye'} text-sm`}></i>
                          </button>
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="flex items-center justify-between">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        name="remember"
                        className="h-4 w-4 text-[#FF7E45] focus:ring-[#FF7E45] border-gray-300 rounded"
                      />
                      <span className="ml-2 text-sm text-gray-600">Remember me</span>
                    </label>
                    <button
                      type="button"
                      onClick={handleForgotPassword}
                      className="text-sm text-[#FF7E45] hover:text-[#F4B942] transition-colors"
                    >
                      Forgot password?
                    </button>
                  </div>

                  <button
                    type="submit"
                    disabled={isLoading}
                    className="w-full bg-gradient-to-r from-[#FF7E45] to-[#F4B942] text-white py-3 px-4 rounded-lg font-semibold hover:from-[#FFA76A] hover:to-[#F6D365] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isLoading ? (
                      <>
                        <i className="fas fa-spinner fa-spin mr-2"></i>
                        Signing in...
                      </>
                    ) : (
                      <>
                        <i className="fas fa-sign-in-alt mr-2"></i>
                        Sign In
                      </>
                    )}
                  </button>
                </form>

                {/* Social Login - Using the new component */}
                {/* <SocialLoginButtons
                  onSuccess={handleSocialSuccess}
                  onError={handleSocialError}
                  loading={isLoading}
                /> */}

                <div className="mt-6 text-center">
                  <p className="text-sm text-gray-600">
                    Don't have an account?{" "}
                    <button
                      type="button"
                      onClick={() => setIsRegistering(true)}
                      className="text-[#FF7E45] hover:text-[#F4B942] font-semibold transition-colors"
                    >
                      Register now
                    </button>
                  </p>
                </div>
              </>
            ) : (
              <form onSubmit={handleRegister} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Full Name
                  </label>
                  <input
                    type="text"
                    name="name"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors"
                    placeholder="Enter your full name"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email Address
                  </label>
                  <input
                    type="email"
                    name="email"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors"
                    placeholder="Enter your email"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Password
                  </label>
                  <div className="relative">
                    <input
                      type={showPassword ? "text" : "password"}
                      name="password"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors pr-10"
                      placeholder="Create a password (min. 8 characters)"
                      minLength="8"
                      required
                    />
                    <button
                      type="button"
                      onClick={() => togglePasswordVisibility('register')}
                      className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                    >
                      <i className={`fas ${showPassword ? 'fa-eye-slash' : 'fa-eye'} text-sm`}></i>
                    </button>
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Must include uppercase, lowercase, and numbers
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Confirm Password
                  </label>
                  <div className="relative">
                    <input
                      type={showConfirmPassword ? "text" : "password"}
                      name="confirmPassword"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors pr-10"
                      placeholder="Confirm your password"
                      required
                    />
                    <button
                      type="button"
                      onClick={() => togglePasswordVisibility('confirm')}
                      className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                    >
                      <i className={`fas ${showConfirmPassword ? 'fa-eye-slash' : 'fa-eye'} text-sm`}></i>
                    </button>
                  </div>
                </div>

                {/* Admin Code Section */}
                <div className="border-t pt-4">
                  <button
                    type="button"
                    onClick={toggleAdminCode}
                    className="text-sm text-[#FF7E45] hover:text-[#F4B942] mb-2 flex items-center"
                  >
                    <i className={`fas ${showAdminCode ? 'fa-eye-slash' : 'fa-eye'} mr-2`}></i>
                    {showAdminCode ? 'Hide' : 'Show'} Admin Registration
                  </button>

                  {showAdminCode && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Admin Code (For church staff only)
                      </label>
                      <input
                        type="password"
                        name="adminCode"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent transition-colors"
                        placeholder="Enter admin code if applicable"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        This code is only for church administrators and staff
                      </p>
                    </div>
                  )}
                </div>

                <div className="flex items-start">
                  <input
                    type="checkbox"
                    name="terms"
                    className="h-4 w-4 text-[#FF7E45] focus:ring-[#FF7E45] border-gray-300 rounded mt-1"
                    required
                  />
                  <label className="ml-2 text-sm text-gray-600">
                    I agree to the{" "}
                    <Link to="/terms" className="text-[#FF7E45] hover:text-[#F4B942]">
                      Terms of Service
                    </Link>{" "}
                    and{" "}
                    <Link to="/privacy" className="text-[#FF7E45] hover:text-[#F4B942]">
                      Privacy Policy
                    </Link>
                  </label>
                </div>

                <button
                  type="submit"
                  disabled={isLoading}
                  className="w-full bg-gradient-to-r from-[#FF7E45] to-[#F4B942] text-white py-3 px-4 rounded-lg font-semibold hover:from-[#FFA76A] hover:to-[#F6D365] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isLoading ? (
                    <>
                      <i className="fas fa-spinner fa-spin mr-2"></i>
                      Creating account...
                    </>
                  ) : (
                    <>
                      <i className="fas fa-user-plus mr-2"></i>
                      Create Account
                    </>
                  )}
                </button>

                {/* Social Login for Registration too */}
                {/* <SocialLoginButtons
                  onSuccess={handleSocialSuccess}
                  onError={handleSocialError}
                  loading={isLoading}
                /> */}

                <div className="text-center">
                  <p className="text-sm text-gray-600">
                    Already have an account?{" "}
                    <button
                      type="button"
                      onClick={() => setIsRegistering(false)}
                      className="text-[#FF7E45] hover:text-[#F4B942] font-semibold transition-colors"
                    >
                      Sign in
                    </button>
                  </p>
                </div>
              </form>
            )}
          </div>
        </div>

        {/* Back to Home */}
        <div className="mt-6 text-center">
          <Link
            to="/"
            className="text-[#FF7E45] hover:text-[#F4B942] transition-colors flex items-center justify-center"
          >
            <i className="fas fa-arrow-left mr-2"></i>
            Back to Homepage
          </Link>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;
)loginpage.jsx,
(
import React, { useState, useEffect } from "react";
import { ministryService } from "../services/apiService";
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { Ministry } from '../models/Ministry';
import { Volunteer } from '../models/Volunteer';

const MinistriesPage = ({ user }) => {
  const alert = useAlert();
  const [activeMinistry, setActiveMinistry] = useState(null);
  const [ministries, setMinistries] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showContactModal, setShowContactModal] = useState(false);
  const [showVolunteerModal, setShowVolunteerModal] = useState(false);
  const [showAdminDashboard, setShowAdminDashboard] = useState(false);
  const [showManageModal, setShowManageModal] = useState(false);
  const [selectedMinistry, setSelectedMinistry] = useState(null);
  const [volunteerOpportunities, setVolunteerOpportunities] = useState([]);
  const [userMinistries, setUserMinistries] = useState([]);
  const [ministryStats, setMinistryStats] = useState(null);
  const [ministryVolunteers, setMinistryVolunteers] = useState({});
  const [showVolunteerOpportunities, setShowVolunteerOpportunities] = useState(false);
  const [showUserMinistries, setShowUserMinistries] = useState(false);

  const isAdmin = user?.role === "admin";
  const isAuthenticated = user?.isLoggedIn;

  useEffect(() => {
    document.title = "SMC: - MInistries | St. Micheal`s & All Angels Church | Ifite-Awka";
    fetchMinistries();
    fetchVolunteerOpportunities();
    if (isAuthenticated) {
      fetchUserMinistries();
    }
    if (isAdmin) {
      fetchMinistryStats();
    }
  }, [isAuthenticated, isAdmin]);

  const fetchMinistries = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await ministryService.getAll();

      if (response.success) {
        const ministriesData = response.data.map(ministry => new Ministry(ministry));
        setMinistries(ministriesData);
        if (ministriesData.length > 0 && !activeMinistry) {
          setActiveMinistry(ministriesData[0]._id || ministriesData[0].id);
        }
      }
    } catch (error) {
      console.error('Error fetching ministries:', error);
      setError('Failed to load ministries. Please try again later.');
      alert.error('Failed to load ministries. Please try again later.');
      setMinistries([]);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchVolunteerOpportunities = async () => {
    try {
      const response = await ministryService.getVolunteerOpportunities();
      if (response.success) {
        setVolunteerOpportunities(response.data);
      }
    } catch (error) {
      console.error('Error fetching volunteer opportunities:', error);
    }
  };

  const fetchUserMinistries = async () => {
    try {
      const response = await ministryService.getUserMinistries();
      if (response.success) {
        setUserMinistries(response.data);
      }
    } catch (error) {
      console.error('Error fetching user ministries:', error);
    }
  };

  const fetchMinistryStats = async () => {
    try {
      const response = await ministryService.getStats();
      if (response.success) {
        setMinistryStats(response.data);
      }
    } catch (error) {
      console.error('Error fetching ministry stats:', error);
    }
  };

  const fetchMinistryVolunteers = async (ministryId) => {
    try {
      const response = await ministryService.getVolunteers(ministryId);
      if (response.success) {
        setMinistryVolunteers(prev => ({
          ...prev,
          [ministryId]: response.data
        }));
        return response.data;
      }
    } catch (error) {
      console.error('Error fetching ministry volunteers:', error);
      return [];
    }
  };

  const handleVolunteer = async (ministryId, formData) => {
    if (!isAuthenticated) {
      alert.info("Please log in to volunteer");
      return;
    }

    try {
      const volunteerData = new Volunteer({
        ...formData,
        ministryId,
        userId: user?.id
      });

      const response = await ministryService.volunteer(ministryId, volunteerData);

      if (response.success) {
        alert.success(response.message || "Thank you for volunteering! We'll be in touch soon.");
        setShowVolunteerModal(false);
        if (isAdmin) {
          fetchMinistryVolunteers(ministryId);
        }
        // Refresh user ministries after volunteering
        if (isAuthenticated) {
          fetchUserMinistries();
        }
      }
    } catch (error) {
      console.error('Error volunteering:', error);
      alert.error("Failed to submit volunteer request. Please try again.");
    }
  };

  const handleContactLeaders = async (ministryId, message) => {
    try {
      const response = await ministryService.contactLeaders(ministryId, {
        message,
        userId: user?.id,
        userName: user?.name,
        userEmail: user?.email
      });

      if (response.success) {
        alert.success(response.message || "Message sent successfully!");
        setShowContactModal(false);
      }
    } catch (error) {
      console.error('Error contacting leaders:', error);
      alert.error("Failed to send message. Please try again.");
    }
  };

  const handleGetInvolved = (ministry) => {
    if (isAuthenticated) {
      setSelectedMinistry(ministry);
      setShowVolunteerModal(true);
    } else {
      alert.info("Please log in to get involved in ministries");
    }
  };

  // Admin functions
  const handleCreateMinistry = async (ministryData) => {
    try {
      const ministry = new Ministry(ministryData);
      const response = await ministryService.create(ministry);

      if (response.success) {
        alert.success('Ministry created successfully');
        fetchMinistries();
        setShowManageModal(false);
      }
    } catch (error) {
      console.error('Error creating ministry:', error);
      alert.error('Failed to create ministry');
    }
  };

  const handleUpdateMinistry = async (ministryId, ministryData) => {
    try {
      const ministry = new Ministry(ministryData);
      const response = await ministryService.update(ministryId, ministry);

      if (response.success) {
        alert.success('Ministry updated successfully');
        fetchMinistries();
        setShowManageModal(false);
        setSelectedMinistry(null);
      }
    } catch (error) {
      console.error('Error updating ministry:', error);
      alert.error('Failed to update ministry');
    }
  };

  const handleDeleteMinistry = async (ministryId) => {
    if (!window.confirm('Are you sure you want to delete this ministry?')) {
      return;
    }

    try {
      const response = await ministryService.delete(ministryId);

      if (response.success) {
        alert.success('Ministry deleted successfully');
        fetchMinistries();
        setShowManageModal(false);
        setSelectedMinistry(null);
      }
    } catch (error) {
      console.error('Error deleting ministry:', error);
      alert.error('Failed to delete ministry');
    }
  };

  const handleViewVolunteers = async (ministry) => {
    setSelectedMinistry(ministry);
    await fetchMinistryVolunteers(ministry._id || ministry.id);
    setShowAdminDashboard(true);
  };

  const handleEditMinistry = (ministry) => {
    setSelectedMinistry(ministry);
    setShowManageModal(true);
  };

  const handleNewMinistry = () => {
    setSelectedMinistry(null);
    setShowManageModal(true);
  };

  const currentMinistry = ministries.find(
    (ministry) => (ministry.id === activeMinistry || ministry._id === activeMinistry)
  );

  if (isLoading) {
    return <Loader type="spinner" text="Loading ministries..." />;
  }

  return (
    <div className="page">
      {/* Header */}
      <section className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] py-12 px-4">
        <div className="container mx-auto text-center text-white">
          <h1 className="text-4xl font-bold mb-4">Our Ministries</h1>
          <p className="text-xl max-w-2xl mx-auto">
            How we're serving our church family and community
          </p>

          {/* User Ministry Actions */}
          {isAuthenticated && (
            <div className="mt-6 space-x-4">
              <button
                onClick={() => setShowUserMinistries(true)}
                className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
              >
                <i className="fas fa-user-check mr-2"></i>
                My Ministries
              </button>
              <button
                onClick={() => setShowVolunteerOpportunities(true)}
                className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
              >
                <i className="fas fa-hands-helping mr-2"></i>
                Volunteer Opportunities
              </button>
            </div>
          )}

          {isAdmin && (
            <div className="mt-6 space-x-4">
              <button
                onClick={() => setShowAdminDashboard(true)}
                className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
              >
                <i className="fas fa-chart-bar mr-2"></i>
                Admin Dashboard
              </button>
              <button
                onClick={handleNewMinistry}
                className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
              >
                <i className="fas fa-plus mr-2"></i>
                New Ministry
              </button>
            </div>
          )}
        </div>
      </section>

      {error && (
        <div className="container mx-auto px-4 py-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}

      {/* User Ministries Modal */}
      {showUserMinistries && (
        <UserMinistriesModal
          userMinistries={userMinistries}
          onClose={() => setShowUserMinistries(false)}
        />
      )}

      {/* Volunteer Opportunities Modal */}
      {showVolunteerOpportunities && (
        <VolunteerOpportunitiesModal
          opportunities={volunteerOpportunities}
          onClose={() => setShowVolunteerOpportunities(false)}
          onVolunteer={handleGetInvolved}
        />
      )}

      {/* Ministries Overview */}
      <section className="py-12">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row">
            {/* Navigation */}
            <div className="md:w-1/4 mb-8 md:mb-0">
              <div className="bg-white rounded-lg shadow-md p-6">
                <h2 className="text-xl font-bold mb-6">Ministry Areas</h2>
                <ul className="space-y-3">
                  {ministries.map((ministry) => (
                    <li key={ministry._id || ministry.id}>
                      <button
                        className={`w-full text-left px-4 py-3 rounded-md flex items-center ${activeMinistry === (ministry._id || ministry.id)
                            ? "bg-[#FFF5F0] text-[#FF7E45]"
                            : "hover:bg-gray-50"
                          }`}
                        onClick={() => setActiveMinistry(ministry._id || ministry.id)}
                      >
                        <i
                          className={`fas fa-${ministry.icon || 'users'} mr-3 ${activeMinistry === (ministry._id || ministry.id)
                              ? "text-[#FF7E45]"
                              : "text-gray-400"
                            }`}
                        ></i>
                        {ministry.name}
                      </button>
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            {/* Ministry Details */}
            <div className="md:w-3/4 md:pl-8">
              {currentMinistry && (
                <div className="bg-white rounded-lg shadow-md overflow-hidden">
                  <div className="h-64 relative">
                    <img
                      src={currentMinistry.imageUrl || currentMinistry.details?.image || 'https://cdn.pixabay.com/photo/2016/11/14/05/29/children-1822704_1280.jpg'}
                      alt={currentMinistry.name}
                      className="w-full h-full object-cover"
                      onError={(e) => {
                        e.target.src = 'https://cdn.pixabay.com/photo/2016/11/14/05/29/children-1822704_1280.jpg';
                      }}
                    />
                    <div className="absolute inset-0 bg-black bg-opacity-30"></div>
                    <div className="absolute bottom-0 p-6 text-white">
                      <div className="flex items-center mb-2">
                        <i
                          className={`fas fa-${currentMinistry.icon || 'users'} text-[#FF7E45] text-2xl mr-3`}
                        ></i>
                        <h2 className="text-3xl font-bold">{currentMinistry.name}</h2>
                      </div>
                    </div>
                  </div>

                  <div className="p-6">
                    <h3 className="text-xl font-bold mb-3">Our Mission</h3>
                    <p className="text-gray-700 mb-8">
                      {currentMinistry.description || currentMinistry.details?.mission}
                    </p>

                    {currentMinistry.programs?.length > 0 && (
                      <>
                        <h3 className="text-xl font-bold mb-4">Programs & Activities</h3>
                        <div className="space-y-4 mb-8">
                          {currentMinistry.programs.map((program, idx) => (
                            <div key={idx} className="bg-gray-50 p-4 rounded-lg">
                              <h4 className="font-bold mb-2">{program.name}</h4>
                              {program.ages && <p className="text-sm text-gray-600">Ages: {program.ages}</p>}
                              {program.time && <p className="text-sm text-gray-600">When: {program.time}</p>}
                              <p className="text-gray-700">{program.description}</p>
                            </div>
                          ))}
                        </div>
                      </>
                    )}

                    {currentMinistry.volunteerNeeds?.length > 0 && (
                      <>
                        <h3 className="text-xl font-bold mb-4">Volunteer Needs</h3>
                        <div className="flex flex-wrap gap-2 mb-8">
                          {currentMinistry.volunteerNeeds.map((need, idx) => (
                            <span key={idx} className="bg-[#FFF5F0] text-[#FF7E45] px-3 py-1 rounded-full text-sm">
                              {need}
                            </span>
                          ))}
                        </div>
                      </>
                    )}

                    {currentMinistry.leaders?.length > 0 && (
                      <>
                        <h3 className="text-xl font-bold mb-4">Leadership</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                          {currentMinistry.leaders.map((leader, idx) => (
                            <div key={idx} className="flex items-start">
                              <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                                <i className="fas fa-user text-gray-400 text-xl"></i>
                              </div>
                              <div className="ml-4">
                                <h4 className="font-bold">{leader.name}</h4>
                                <p className="text-sm text-gray-600 mb-1">{leader.title}</p>
                                <p className="text-sm text-gray-700">{leader.bio}</p>
                                {leader.email && (
                                  <p className="text-sm text-[#FF7E45] mt-1">
                                    <i className="fas fa-envelope mr-1"></i>
                                    {leader.email}
                                  </p>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </>
                    )}

                    <div className="flex flex-col sm:flex-row gap-4">
                      <button
                        onClick={() => handleGetInvolved(currentMinistry)}
                        className="bg-[#FF7E45] text-white px-6 py-3 rounded-lg font-semibold hover:bg-[#FFA76A] transition-colors"
                      >
                        Get Involved <i className="fas fa-arrow-right ml-2"></i>
                      </button>
                      <button
                        onClick={() => {
                          setSelectedMinistry(currentMinistry);
                          setShowContactModal(true);
                        }}
                        className="border border-[#FF7E45] text-[#FF7E45] px-6 py-3 rounded-lg font-semibold hover:bg-[#FFF5F0] transition-colors"
                      >
                        Contact Ministry Leaders
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* Call to Action */}
      <section className="py-12 bg-gray-50">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-4">Find Your Place to Serve</h2>
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Everyone has unique gifts and talents. We'd love to help you discover how you can use yours to serve others.
          </p>
          <div className="max-w-md mx-auto">
            <button className="bg-[#FF7E45] text-white px-6 py-3 rounded-lg font-semibold hover:bg-[#FFA76A] transition-colors w-full">
              Take Our Spiritual Gifts Assessment
            </button>
            <p className="mt-4 text-gray-600">
              Not sure where to start? Contact us at{" "}
              <a href={<ContactModal />} className="text-[#FF7E45] hover:underline">
                serve@church.org
              </a>
            </p>
          </div>
        </div>
      </section>

      {/* Modals */}
      {showAdminDashboard && (
        <AdminDashboard
          ministries={ministries}
          stats={ministryStats}
          volunteers={ministryVolunteers}
          onClose={() => setShowAdminDashboard(false)}
          onViewVolunteers={handleViewVolunteers}
          onEditMinistry={handleEditMinistry}
        />
      )}

      {showManageModal && (
        <MinistryManagementModal
          ministry={selectedMinistry}
          onClose={() => {
            setShowManageModal(false);
            setSelectedMinistry(null);
          }}
          onCreate={handleCreateMinistry}
          onUpdate={handleUpdateMinistry}
          onDelete={handleDeleteMinistry}
        />
      )}

      {showContactModal && selectedMinistry && (
        <ContactModal
          ministry={selectedMinistry}
          onClose={() => setShowContactModal(false)}
          onSubmit={handleContactLeaders}
          user={user}
        />
      )}

      {showVolunteerModal && selectedMinistry && (
        <VolunteerModal
          ministry={selectedMinistry}
          onClose={() => setShowVolunteerModal(false)}
          onSubmit={handleVolunteer}
          user={user}
        />
      )}
    </div>
  );
};

// User Ministries Modal Component
const UserMinistriesModal = ({ userMinistries, onClose }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-2xl font-bold">My Ministries</h3>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
              <i className="fas fa-times text-xl"></i>
            </button>
          </div>

          {userMinistries.length === 0 ? (
            <div className="text-center py-8">
              <i className="fas fa-inbox text-4xl text-gray-300 mb-4"></i>
              <p className="text-gray-600">You haven't joined any ministries yet.</p>
              <p className="text-gray-500 text-sm mt-2">Explore our ministries and get involved!</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {userMinistries.map((ministry) => (
                <div key={ministry._id || ministry.id} className="border rounded-lg p-4">
                  <div className="flex items-center mb-3">
                    <i className={`fas fa-${ministry.icon || 'users'} text-[#FF7E45] text-xl mr-3`}></i>
                    <h4 className="font-semibold">{ministry.name}</h4>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">{ministry.description}</p>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-[#FF7E45]">
                      <i className="fas fa-user-check mr-1"></i>
                      Member
                    </span>
                    <span className="text-sm text-gray-500">
                      Joined: {new Date(ministry.joinDate).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Volunteer Opportunities Modal Component
const VolunteerOpportunitiesModal = ({ opportunities, onClose, onVolunteer }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-2xl font-bold">Volunteer Opportunities</h3>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
              <i className="fas fa-times text-xl"></i>
            </button>
          </div>

          {opportunities.length === 0 ? (
            <div className="text-center py-8">
              <i className="fas fa-hands-helping text-4xl text-gray-300 mb-4"></i>
              <p className="text-gray-600">No volunteer opportunities available at the moment.</p>
              <p className="text-gray-500 text-sm mt-2">Check back later for new opportunities!</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {opportunities.map((opportunity) => (
                <div key={opportunity._id || opportunity.id} className="border rounded-lg p-4">
                  <div className="flex items-center mb-3">
                    <i className={`fas fa-${opportunity.icon || 'hands-helping'} text-[#FF7E45] text-xl mr-3`}></i>
                    <h4 className="font-semibold">{opportunity.ministryName}</h4>
                  </div>
                  <h5 className="font-medium text-gray-800 mb-2">{opportunity.role}</h5>
                  <p className="text-sm text-gray-600 mb-3">{opportunity.description}</p>

                  <div className="space-y-2 mb-4">
                    <div className="flex items-center text-sm text-gray-500">
                      <i className="fas fa-clock mr-2"></i>
                      <span>Time commitment: {opportunity.timeCommitment}</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-500">
                      <i className="fas fa-calendar mr-2"></i>
                      <span>Duration: {opportunity.duration}</span>
                    </div>
                    {opportunity.skillsRequired && (
                      <div className="flex items-center text-sm text-gray-500">
                        <i className="fas fa-tools mr-2"></i>
                        <span>Skills: {opportunity.skillsRequired.join(', ')}</span>
                      </div>
                    )}
                  </div>

                  <button
                    onClick={() => onVolunteer(opportunity)}
                    className="w-full bg-[#FF7E45] text-white py-2 rounded-lg hover:bg-[#FFA76A] transition-colors"
                  >
                    <i className="fas fa-hand-paper mr-2"></i>
                    Volunteer Now
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Admin Dashboard Component
const AdminDashboard = ({ ministries, stats, volunteers, onClose, onViewVolunteers, onEditMinistry }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-2xl font-bold">Ministry Admin Dashboard</h3>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
              <i className="fas fa-times text-xl"></i>
            </button>
          </div>

          {stats && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
              <div className="bg-blue-50 p-4 rounded-lg text-center">
                <div className="text-3xl font-bold text-blue-600">{stats.totalMinistries}</div>
                <div className="text-sm text-blue-800">Total Ministries</div>
              </div>
              <div className="bg-green-50 p-4 rounded-lg text-center">
                <div className="text-3xl font-bold text-green-600">{stats.totalVolunteers}</div>
                <div className="text-sm text-green-800">Total Volunteers</div>
              </div>
              <div className="bg-orange-50 p-4 rounded-lg text-center">
                <div className="text-3xl font-bold text-orange-600">{stats.pendingRequests}</div>
                <div className="text-sm text-orange-800">Pending Requests</div>
              </div>
            </div>
          )}

          <div className="space-y-4">
            <h4 className="text-lg font-semibold">Manage Ministries</h4>
            {ministries.map(ministry => (
              <div key={ministry._id || ministry.id} className="border rounded-lg p-4">
                <div className="flex justify-between items-center">
                  <div>
                    <h5 className="font-semibold">{ministry.name}</h5>
                    <p className="text-sm text-gray-600">{ministry.description}</p>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => onViewVolunteers(ministry)}
                      className="px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm"
                    >
                      <i className="fas fa-users mr-1"></i>
                      Volunteers ({volunteers[ministry._id || ministry.id]?.length || 0})
                    </button>
                    <button
                      onClick={() => onEditMinistry(ministry)}
                      className="px-3 py-1 bg-gray-100 text-gray-700 rounded text-sm"
                    >
                      <i className="fas fa-edit mr-1"></i>
                      Edit
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// Ministry Management Modal Component
const MinistryManagementModal = ({ ministry, onClose, onCreate, onUpdate, onDelete }) => {
  const [formData, setFormData] = useState({
    name: ministry?.name || '',
    description: ministry?.description || '',
    icon: ministry?.icon || 'users',
    imageUrl: ministry?.imageUrl || '',
    volunteerNeeds: ministry?.volunteerNeeds?.join(', ') || ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    const submitData = {
      ...formData,
      volunteerNeeds: formData.volunteerNeeds.split(',').map(item => item.trim()).filter(Boolean)
    };

    if (ministry) {
      onUpdate(ministry._id || ministry.id, submitData);
    } else {
      onCreate(submitData);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="p-6">
          <h3 className="text-xl font-bold mb-4">
            {ministry ? 'Edit Ministry' : 'Create New Ministry'}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Ministry Name</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                rows="3"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Icon Name</label>
              <input
                type="text"
                value={formData.icon}
                onChange={(e) => setFormData({ ...formData, icon: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                placeholder="users, heart, hands-helping"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Image URL</label>
              <input
                type="url"
                value={formData.imageUrl}
                onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Volunteer Needs (comma-separated)</label>
              <input
                type="text"
                value={formData.volunteerNeeds}
                onChange={(e) => setFormData({ ...formData, volunteerNeeds: e.target.value })}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                placeholder="Teaching, Music, Hospitality"
              />
            </div>
            <div className="flex justify-between space-x-3">
              {ministry && (
                <button
                  type="button"
                  onClick={() => onDelete(ministry._id || ministry.id)}
                  className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                >
                  <i className="fas fa-trash mr-2"></i>
                  Delete
                </button>
              )}
              <div className="flex space-x-3 ml-auto">
                <button
                  type="button"
                  onClick={onClose}
                  className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-[#FF7E45] text-white rounded-lg hover:bg-[#FFA76A] transition-colors"
                >
                  {ministry ? 'Update' : 'Create'} Ministry
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

// Contact Modal Component
const ContactModal = ({ ministry, onClose, onSubmit, user }) => {
  const [message, setMessage] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(ministry._id || ministry.id, message);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="p-6">
          <h3 className="text-xl font-bold mb-4">Contact {ministry.name} Leaders</h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Your Message</label>
              <textarea
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                rows="4"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                placeholder="What would you like to ask or share with the ministry leaders?"
                required
              />
            </div>
            <div className="flex justify-end space-x-3">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-[#FF7E45] text-white rounded-lg hover:bg-[#FFA76A] transition-colors"
              >
                Send Message
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

// Volunteer Modal Component
const VolunteerModal = ({ ministry, onClose, onSubmit, user }) => {
  const [formData, setFormData] = useState({
    interests: [],
    availability: [],
    experience: "",
    message: ""
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(ministry._id || ministry.id, formData);
  };

  const availabilityOptions = ["Weekdays", "Weekends", "Mornings", "Afternoons", "Evenings"];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="p-6">
          <h3 className="text-xl font-bold mb-4">Volunteer for {ministry.name}</h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Areas of Interest</label>
              <div className="space-y-2">
                {(ministry.volunteerNeeds || []).map((need) => (
                  <label key={need} className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.interests.includes(need)}
                      onChange={(e) => {
                        const updated = e.target.checked
                          ? [...formData.interests, need]
                          : formData.interests.filter(i => i !== need);
                        setFormData({ ...formData, interests: updated });
                      }}
                      className="mr-2 h-4 w-4 text-[#FF7E45] focus:ring-[#FF7E45]"
                    />
                    {need}
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Availability</label>
              <div className="space-y-2">
                {availabilityOptions.map((option) => (
                  <label key={option} className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.availability.includes(option)}
                      onChange={(e) => {
                        const updated = e.target.checked
                          ? [...formData.availability, option]
                          : formData.availability.filter(a => a !== option);
                        setFormData({ ...formData, availability: updated });
                      }}
                      className="mr-2 h-4 w-4 text-[#FF7E45] focus:ring-[#FF7E45]"
                    />
                    {option}
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Experience</label>
              <textarea
                value={formData.experience}
                onChange={(e) => setFormData({ ...formData, experience: e.target.value })}
                rows="3"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                placeholder="Tell us about your relevant experience..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Additional Message</label>
              <textarea
                value={formData.message}
                onChange={(e) => setFormData({ ...formData, message: e.target.value })}
                rows="3"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                placeholder="Anything else you'd like to share..."
              />
            </div>

            <div className="flex justify-end space-x-3">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-[#FF7E45] text-white rounded-lg hover:bg-[#FFA76A] transition-colors"
              >
                Submit Interest
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default MinistriesPage;
)ministrypage.jsx,
(
import React, { useState, useEffect } from "react";
import { apiClient } from "../utils/api";
import Loader, { ContentLoader } from "../components/Loader";
import { useAlert } from '../utils/Alert';

const MyRSVPsPage = ({ user }) => {
  const alert = useAlert();
  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [pastEvents, setPastEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState(false);
  const [error, setError] = useState(null);

  const API_ENDPOINTS = {
    UPCOMING_RSVPS: "/rsvps/upcoming",
    PAST_RSVPS: "/rsvps/past",
    CANCEL_RSVP: "/rsvps/cancel/",
    ADD_TO_CALENDAR: "/calendar/add/",
    EVENT_RECORDINGS: "/events/recordings/",
    EVENT_MATERIALS: "/events/materials/",
  };

  useEffect(() => {
    document.title = "SMC: - RSVPs | St. Micheal`s & All Angels Church | Ifite-Awka";
    
    // Check if user is authenticated
    if (!user) {
      setLoading(false);
      return;
    }
    
    fetchRSVPs();
  }, [user]);

  const fetchRSVPs = async () => {
    try {
      setLoading(true);
      setError(null);
      const [upcomingResponse, pastResponse] = await Promise.allSettled([
        apiClient.get(API_ENDPOINTS.UPCOMING_RSVPS),
        apiClient.get(API_ENDPOINTS.PAST_RSVPS)
      ]);
      if (upcomingResponse.status === 'fulfilled') {
        setUpcomingEvents(upcomingResponse.value || []);
      } else {
        console.error("Error fetching upcoming events:", upcomingResponse.reason);
        alert.error("Failed to load upcoming events.");
      }
      if (pastResponse.status === 'fulfilled') {
        setPastEvents(pastResponse.value || []);
      } else {
        console.error("Error fetching past events:", pastResponse.reason);
        alert.error("Failed to load past events.");
      }
      if (upcomingResponse.status === 'rejected' && pastResponse.status === 'rejected') {
        throw new Error("Failed to load events. Please check your connection.");
      }
    } catch (err) {
      console.error("Error fetching RSVPs:", err);
      setError(err.message || "Failed to load your events. Please try again.");
      alert.error(err.message || "Failed to load your events. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleCancelRSVP = async (eventId, eventTitle) => {
    alert.info(`Are you sure you want to cancel your RSVP for "${eventTitle}"?`, {
      confirm: async () => {
        try {
          setActionLoading(true);
          const response = await apiClient.post(`${API_ENDPOINTS.CANCEL_RSVP}${eventId}`);
          if (response.success) {
            fetchRSVPs();
            alert.success('RSVP cancelled successfully!');
          } else {
            throw new Error(response.message || "Failed to cancel RSVP");
          }
        } catch (err) {
          console.error("Error canceling RSVP:", err);
          setError(err.message || "Failed to cancel RSVP. Please try again.");
          alert.error(err.message || "Failed to cancel RSVP. Please try again.");
        } finally {
          setActionLoading(false);
        }
      }
    });
  };

  const handleAddToCalendar = async (eventId, eventTitle) => {
    try {
      setActionLoading(true);
      const response = await apiClient.post(`${API_ENDPOINTS.ADD_TO_CALENDAR}${eventId}`);
      if (response.success) {
        alert.success(`"${eventTitle}" has been added to your calendar successfully!`);
      } else {
        throw new Error(response.message || "Failed to add to calendar");
      }
    } catch (err) {
      console.error("Error adding to calendar:", err);
      setError(err.message || "Failed to add event to calendar. Please try again.");
      alert.error(err.message || "Failed to add event to calendar. Please try again.");
    } finally {
      setActionLoading(false);
    }
  };

  const handleViewRecording = async (eventId) => {
    try {
      window.open(`${API_ENDPOINTS.EVENT_RECORDINGS}${eventId}`, '_blank');
    } catch (err) {
      console.error("Error accessing recording:", err);
      setError("Failed to access recording. Please try again.");
      alert.error("Failed to access recording. Please try again.");
    }
  };

  const handleDownloadMaterials = async (eventId) => {
    try {
      window.open(`${API_ENDPOINTS.EVENT_MATERIALS}${eventId}`, '_blank');
    } catch (err) {
      console.error("Error downloading materials:", err);
      setError("Failed to download materials. Please try again.");
      alert.error("Failed to download materials. Please try again.");
    }
  };

  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return {
        day: date.getDate().toString().padStart(2, '0'),
        month: date.toLocaleString('default', { month: 'short' }).toUpperCase(),
        time: date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      };
    } catch (error) {
      console.error("Error formatting date:", error);
      return {
        day: '--',
        month: '---',
        time: '--:--'
      };
    }
  };

  // Show login prompt if user is not authenticated
  if (!user) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-md mx-auto text-center">
            <div className="bg-white rounded-lg shadow-md p-8">
              <h2 className="text-2xl font-bold mb-4">Please Log In</h2>
              <p className="text-gray-600 mb-6">You need to be logged in to view your RSVPs.</p>
              <a href="/login" className="btn btn-primary">Log In</a>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-4xl mx-auto">
            <h1 className="text-3xl font-bold mb-6">My RSVPs & Events</h1>
            <div className="space-y-8">
              <ContentLoader type="card" count={3} />
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-4xl mx-auto">
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-8">
              <div className="flex items-center mb-3">
                <i className="fas fa-exclamation-triangle text-red-500 text-xl mr-2"></i>
                <h2 className="text-xl font-semibold text-red-800">Error Loading Events</h2>
              </div>
              <p className="text-red-600 mb-4">{error}</p>
              <button 
                onClick={fetchRSVPs}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
                disabled={loading}
              >
                {loading ? 'Loading...' : 'Try Again'}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="page">
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold mb-6">My RSVPs & Events</h1>

          {/* Upcoming Events */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 className="text-xl font-bold mb-4">Upcoming Events</h2>

            {upcomingEvents.length === 0 ? (
              <div className="text-center py-8">
                <i className="fas fa-calendar-plus text-4xl text-gray-300 mb-3"></i>
                <p className="text-gray-500 mb-2">You have no upcoming events.</p>
                <a 
                  href="/events" 
                  className="text-[#FF7E45] hover:text-[#F4B942] font-medium inline-flex items-center"
                >
                  <i className="fas fa-arrow-right mr-2"></i>Browse upcoming events
                </a>
              </div>
            ) : (
              <div className="space-y-4">
                {upcomingEvents.map((event) => {
                  const formattedDate = formatDate(event.date || event.startTime);
                  return (
                    <div key={event.id || event._id} className="border rounded-lg overflow-hidden transition-shadow hover:shadow-lg">
                      <div className="flex flex-col md:flex-row">
                        <div className="md:w-1/4 bg-gray-100 flex items-center justify-center p-4 md:p-6">
                          <div className="text-center">
                            <div className="text-2xl font-bold">{formattedDate.day}</div>
                            <div className="text-sm text-gray-600">{formattedDate.month}</div>
                            <div className="text-sm mt-2">{formattedDate.time}</div>
                          </div>
                        </div>
                        <div className="md:w-3/4 p-4 md:p-6">
                          <div className="flex justify-between items-start mb-2">
                            <h3 className="font-bold text-lg">{event.title}</h3>
                            <span className={`text-xs px-2 py-1 rounded ${
                              event.status === 'Confirmed' 
                                ? 'bg-green-100 text-green-800' 
                                : event.status === 'Pending'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-gray-100 text-gray-800'
                            }`}>
                              {event.status || "Confirmed"}
                            </span>
                          </div>
                          <p className="text-gray-600 mb-4">{event.description}</p>
                          <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-3 md:space-y-0">
                            <div className="text-sm text-gray-500">
                              <i className="fas fa-map-marker-alt mr-1"></i> {event.location || 'TBA'}
                            </div>
                            <div className="flex space-x-2">
                              <button 
                                onClick={() => handleAddToCalendar(event.id || event._id, event.title)}
                                className="text-[#FF7E45] hover:text-[#F4B942] text-sm inline-flex items-center"
                                disabled={actionLoading}
                              >
                                <i className="far fa-calendar-alt mr-1"></i> Add to Calendar
                              </button>
                              <button 
                                onClick={() => handleCancelRSVP(event.id || event._id, event.title)}
                                className="text-red-500 hover:text-red-700 text-sm inline-flex items-center"
                                disabled={actionLoading}
                              >
                                <i className="fas fa-times mr-1"></i> Cancel RSVP
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </div>

          {/* Past Events */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-bold mb-4">Past Events</h2>

            {pastEvents.length === 0 ? (
              <div className="text-center py-8">
                <i className="fas fa-history text-4xl text-gray-300 mb-3"></i>
                <p className="text-gray-500">You haven't attended any events yet.</p>
              </div>
            ) : (
              <div className="space-y-4">
                {pastEvents.map((event) => {
                  const formattedDate = formatDate(event.date || event.startTime);
                  return (
                    <div key={event.id || event._id} className="border rounded-lg overflow-hidden bg-gray-50 transition-shadow hover:shadow-md">
                      <div className="flex flex-col md:flex-row">
                        <div className="md:w-1/4 bg-gray-100 flex items-center justify-center p-4 md:p-6">
                          <div className="text-center">
                            <div className="text-2xl font-bold text-gray-500">{formattedDate.day}</div>
                            <div className="text-sm text-gray-500">{formattedDate.month}</div>
                            <div className="text-sm mt-2 text-gray-500">{formattedDate.time}</div>
                          </div>
                        </div>
                        <div className="md:w-3/4 p-4 md:p-6">
                          <div className="flex justify-between items-start mb-2">
                            <h3 className="font-bold text-lg text-gray-700">{event.title}</h3>
                            <span className="bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded">
                              {event.attendanceStatus || "Attended"}
                            </span>
                          </div>
                          <p className="text-gray-500 mb-4">{event.description}</p>
                          <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-3 md:space-y-0">
                            <div className="text-sm text-gray-500">
                              <i className="fas fa-map-marker-alt mr-1"></i> {event.location || 'Unknown location'}
                            </div>
                            <div className="flex space-x-3">
                              {event.recordingAvailable && (
                                <button
                                  onClick={() => handleViewRecording(event.id || event._id)}
                                  className="text-[#FF7E45] hover:text-[#F4B942] text-sm inline-flex items-center"
                                >
                                  <i className="fas fa-play-circle mr-1"></i> Watch Recording
                                </button>
                              )}
                              {event.materialsAvailable && (
                                <button
                                  onClick={() => handleDownloadMaterials(event.id || event._id)}
                                  className="text-[#FF7E45] hover:text-[#F4B942] text-sm inline-flex items-center"
                                >
                                  <i className="fas fa-download mr-1"></i> Materials
                                </button>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            )}

            {/* View More Button - Only show if there are more past events */}
            {pastEvents.length > 5 && (
              <div className="mt-6 text-center">
                <button 
                  className="btn btn-outline"
                  onClick={() => {/* Implement pagination or view more logic */}}
                >
                  View More Past Events
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Global loader for actions */}
      {actionLoading && (
        <div className="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50">
          <Loader type="spinner" size="medium" color="#FF7E45" text="Processing..." />
        </div>
      )}
    </div>
  );
};

export default MyRSVPsPage;
)myrsvps.jsx,
(
import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";

const NotFoundPage = () => {
  const [countdown, setCountdown] = useState(30);
  const navigate = useNavigate();

  useEffect(() => {
        document.title = "SMC: - Not-Found | St. Micheal`s & All Angels Church | Ifite-Awka";
    const timer = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          navigate("/");
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [navigate]);

  const quickLinks = [
    { path: "/", label: "Home", icon: "home" },
    { path: "/events", label: "Events", icon: "calendar" },
    { path: "/sermons", label: "Sermons", icon: "play-circle" },
    { path: "/ministries", label: "Ministries", icon: "users" },
    { path: "/contact", label: "Contact", icon: "envelope" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#FFF5F0] to-[#FFF9E6] flex items-center justify-center px-4">
      <div className="max-w-2xl w-full text-center">
        {/* Animated 404 Graphic */}
        <div className="mb-8 relative">
          <div className="text-[120px] md:text-[180px] font-bold text-[#FF7E45] opacity-20">
            404
          </div>
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-32 h-32 bg-[#FF7E45] rounded-full flex items-center justify-center animate-bounce">
              <i className="fas fa-exclamation-triangle text-white text-4xl"></i>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="bg-white rounded-2xl shadow-xl p-8 md:p-12">
          <h1 className="text-3xl md:text-4xl font-bold text-gray-800 mb-4">
            Page Not Found
          </h1>
          
          <p className="text-lg text-gray-600 mb-8">
            Oops! The page you're looking for seems to have wandered off into the digital wilderness.
          </p>

          {/* Quick Links */}
          <div className="mb-8">
            <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wide mb-4">
              Quick Navigation
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
              {quickLinks.map((link) => (
                <Link
                  key={link.path}
                  to={link.path}
                  className="flex flex-col items-center p-3 bg-gray-50 rounded-lg hover:bg-[#FFF5F0] transition-colors group"
                >
                  <i className={`fas fa-${link.icon} text-[#FF7E45] text-lg mb-2 group-hover:scale-110 transition-transform`}></i>
                  <span className="text-sm font-medium text-gray-700">{link.label}</span>
                </Link>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center mb-6">
            <Link
              to="/"
              className="bg-[#FF7E45] hover:bg-[#E56A36] text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center"
            >
              <i className="fas fa-home mr-2"></i>
              Return to Homepage
            </Link>
            
            <button
              onClick={() => window.history.back()}
              className="border border-gray-300 hover:border-[#FF7E45] text-gray-700 hover:text-[#FF7E45] font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center"
            >
              <i className="fas fa-arrow-left mr-2"></i>
              Go Back
            </button>
          </div>

          {/* Countdown Timer */}
          <div className="text-sm text-gray-500">
            <p>
              Redirecting to homepage in{" "}
              <span className="font-bold text-[#FF7E45]">{countdown}</span> seconds...
            </p>
          </div>
        </div>

        {/* Help Section */}
        <div className="mt-8 bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-3">
            Need Help?
          </h3>
          <p className="text-gray-600 mb-4">
            If you believe this is an error or need assistance, please contact us:
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <a
              href="mailto:support@stmichaels.org"
              className="text-[#FF7E45] hover:text-[#E56A36] flex items-center justify-center"
            >
              <i className="fas fa-envelope mr-2"></i>
              support@stmichaels.org
            </a>
            <a
              href="tel:+15551234567"
              className="text-[#FF7E45] hover:text-[#E56A36] flex items-center justify-center"
            >
              <i className="fas fa-phone mr-2"></i>
              (555) 123-4567
            </a>
          </div>
        </div>

        {/* Search Bar */}
        <div className="mt-6">
          <div className="relative max-w-md mx-auto">
            <input
              type="text"
              placeholder="Search our website..."
              className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
            />
            <i className="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NotFoundPage;
)notfoundpage.jsx,
(
import { useState, useEffect } from 'react';
import { useNavigate, useSearchParams, useLocation } from 'react-router-dom';
import { authService } from '../services/apiService'; // Updated import
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { useAuth } from '../hooks/useAuth';

const PasswordPage = () => {
  const [searchParams] = useSearchParams();
  const location = useLocation();
  const navigate = useNavigate();
  const alert = useAlert();
  const { user, isLoading: authLoading } = useAuth();
  
  // Determine mode from URL path
  const getModeFromPath = () => {
    const path = location.pathname;
    if (path === '/forgot-password') return 'request';
    if (path === '/reset-password') return 'reset';
    if (path === '/change-password') return 'change';
    return 'request';
  };

  const [mode, setMode] = useState(getModeFromPath());
  const [isLoading, setIsLoading] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [currentPassword, setCurrentPassword] = useState('');
  const [token, setToken] = useState('');
  const [errors, setErrors] = useState({});
  const [passwordStrength, setPasswordStrength] = useState(0);

  // Check URL parameters to determine mode
  useEffect(() => {
    document.title = "SMC: - Forgotten-Password | St. Micheal`s & All Angels Church | Ifite-Awka";
    const tokenParam = searchParams.get('token');
    if (tokenParam && mode === 'reset') {
      setToken(tokenParam);
      validateToken(tokenParam);
    }
  }, [searchParams, mode]);

  // If user is logged in and trying to access forgot password, redirect to change password
  useEffect(() => {
    if (user && mode === 'request' && !authLoading) {
      setMode('change');
    }
  }, [user, mode, authLoading]);

  const validateToken = async (token) => {
    try {
      setIsLoading(true);
      const response = await authService.validateResetToken(token);
      
      if (!response.valid) {
        alert.error('Invalid or expired reset link. Please request a new one.');
        setMode('request');
      }
    } catch (error) {
      console.error('Token validation error:', error);
      alert.error('Invalid or expired reset link. Please request a new one.');
      setMode('request');
    } finally {
      setIsLoading(false);
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (mode === 'request') {
      if (!email) {
        newErrors.email = 'Email is required';
      } else if (!/\S+@\S+\.\S+/.test(email)) {
        newErrors.email = 'Email is invalid';
      }
    } else if (mode === 'reset' || mode === 'change') {
      if (!password) {
        newErrors.password = 'Password is required';
      } else if (password.length < 8) {
        newErrors.password = 'Password must be at least 8 characters';
      } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password)) {
        newErrors.password = 'Password must contain uppercase, lowercase, and numbers';
      }

      if (password !== confirmPassword) {
        newErrors.confirmPassword = 'Passwords do not match';
      }

      if (mode === 'change' && !currentPassword) {
        newErrors.currentPassword = 'Current password is required';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const checkPasswordStrength = (value) => {
    let strength = 0;
    
    // Length check
    if (value.length >= 8) strength += 25;
    if (value.length >= 12) strength += 25;
    
    // Complexity checks
    if (/[A-Z]/.test(value)) strength += 15;
    if (/[a-z]/.test(value)) strength += 15;
    if (/[0-9]/.test(value)) strength += 10;
    if (/[^A-Za-z0-9]/.test(value)) strength += 10;
    
    setPasswordStrength(Math.min(strength, 100));
  };

  const handlePasswordChange = (value) => {
    setPassword(value);
    checkPasswordStrength(value);
  };

  const handleRequestReset = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    try {
      setIsLoading(true);
      const response = await authService.forgotPassword(email);
      
      if (response.success) {
        alert.success('Password reset instructions sent to your email!');
        setMode('success');
      } else {
        alert.error(response.message || 'Failed to send reset instructions');
      }
    } catch (error) {
      console.error('Password reset request error:', error);
      
      // Don't reveal whether email exists in the system
      alert.success('If an account exists with this email, reset instructions have been sent.');
      setMode('success');
    } finally {
      setIsLoading(false);
    }
  };

  const handleResetPassword = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    try {
      setIsLoading(true);
      const response = await authService.resetPassword(token, password);
      
      if (response.success) {
        alert.success('Password reset successfully! You can now log in with your new password.');
        setMode('success');
        
        // Redirect to login after 3 seconds
        setTimeout(() => {
          navigate('/login');
        }, 3000);
      } else {
        alert.error(response.message || 'Failed to reset password');
      }
    } catch (error) {
      console.error('Password reset error:', error);
      
      if (error.response?.status === 400) {
        alert.error('Invalid or expired reset token. Please request a new reset link.');
        setMode('request');
      } else {
        alert.error('Failed to reset password. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleChangePassword = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    try {
      setIsLoading(true);
      const response = await authService.changePassword({
        currentPassword,
        newPassword: password,
        confirmPassword
      });
      
      if (response.success) {
        alert.success('Password changed successfully!');
        navigate('/profile');
      } else {
        alert.error(response.message || 'Failed to change password');
      }
    } catch (error) {
      console.error('Password change error:', error);
      alert.error(error.response?.data?.message || 'Failed to change password. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const getPasswordStrengthColor = () => {
    if (passwordStrength < 40) return 'bg-red-500';
    if (passwordStrength < 70) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  const getPasswordStrengthText = () => {
    if (passwordStrength < 40) return 'Weak';
    if (passwordStrength < 70) return 'Medium';
    return 'Strong';
  };

  if (authLoading || isLoading) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-md mx-auto text-center">
            <Loader 
              type="spinner" 
              text={
                mode === 'request' 
                  ? "Sending reset instructions..." 
                  : mode === 'reset'
                  ? "Resetting your password..."
                  : "Changing your password..."
              } 
            />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="page">
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-md mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="w-20 h-20 mx-auto mb-4 flex items-center justify-center">
              {mode === 'success' ? (
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
                  <i className="fas fa-check text-green-500 text-3xl"></i>
                </div>
              ) : (
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
                  <i className="fas fa-lock text-blue-500 text-3xl"></i>
                </div>
              )}
            </div>
            
            <h1 className="text-3xl font-bold mb-2">
              {mode === 'request' && 'Reset Your Password'}
              {mode === 'reset' && 'Create New Password'}
              {mode === 'change' && 'Change Password'}
              {mode === 'success' && 'Check Your Email'}
            </h1>
            
            <p className="text-gray-600">
              {mode === 'request' && 'Enter your email to receive reset instructions'}
              {mode === 'reset' && 'Enter your new password below'}
              {mode === 'change' && 'Update your account password'}
              {mode === 'success' && 'We\'ve sent instructions to your email'}
            </p>
          </div>

          {/* Request Reset Form */}
          {mode === 'request' && (
            <div className="bg-white rounded-lg shadow-md p-6">
              <form onSubmit={handleRequestReset} className="space-y-4">
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                    Email Address
                  </label>
                  <input
                    type="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] ${
                      errors.email ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Enter your email"
                  />
                  {errors.email && (
                    <p className="text-red-500 text-sm mt-1">{errors.email}</p>
                  )}
                </div>

                <button
                  type="submit"
                  className="w-full bg-[#FF7E45] text-white py-2 px-4 rounded-md hover:bg-[#FFA76A] transition-colors"
                >
                  Send Reset Instructions
                </button>
              </form>

              <div className="mt-4 text-center">
                <button
                  onClick={() => navigate('/login')}
                  className="text-[#FF7E45] hover:text-[#FFA76A] text-sm"
                >
                  Back to Login
                </button>
              </div>
            </div>
          )}

          {/* Reset Password Form */}
          {(mode === 'reset' || mode === 'change') && (
            <div className="bg-white rounded-lg shadow-md p-6">
              <form onSubmit={mode === 'reset' ? handleResetPassword : handleChangePassword} className="space-y-4">
                {/* Current Password Field (only for change mode) */}
                {mode === 'change' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Current Password
                    </label>
                    <input
                      type="password"
                      value={currentPassword}
                      onChange={(e) => setCurrentPassword(e.target.value)}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] ${
                        errors.currentPassword ? 'border-red-500' : 'border-gray-300'
                      }`}
                      placeholder="Enter current password"
                    />
                    {errors.currentPassword && (
                      <p className="text-red-500 text-sm mt-1">{errors.currentPassword}</p>
                    )}
                  </div>
                )}

                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                    {mode === 'change' ? 'New Password' : 'Password'}
                  </label>
                  <input
                    type="password"
                    id="password"
                    value={password}
                    onChange={(e) => handlePasswordChange(e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] ${
                      errors.password ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder={mode === 'change' ? "Enter new password" : "Enter your password"}
                  />
                  
                  {/* Password Strength Meter */}
                  {password && (
                    <div className="mt-2">
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                          className={`h-2 rounded-full ${getPasswordStrengthColor()}`}
                          style={{ width: `${passwordStrength}%` }}
                        ></div>
                      </div>
                      <p className="text-xs text-gray-600 mt-1">
                        Strength: {getPasswordStrengthText()}
                      </p>
                    </div>
                  )}
                  
                  {errors.password && (
                    <p className="text-red-500 text-sm mt-1">{errors.password}</p>
                  )}
                  
                  <div className="text-xs text-gray-600 mt-1">
                    <p>• At least 8 characters</p>
                    <p>• Uppercase and lowercase letters</p>
                    <p>• At least one number</p>
                  </div>
                </div>

                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">
                    Confirm {mode === 'change' ? 'New Password' : 'Password'}
                  </label>
                  <input
                    type="password"
                    id="confirmPassword"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] ${
                      errors.confirmPassword ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder={mode === 'change' ? "Confirm new password" : "Confirm your password"}
                  />
                  {errors.confirmPassword && (
                    <p className="text-red-500 text-sm mt-1">{errors.confirmPassword}</p>
                  )}
                </div>

                <button
                  type="submit"
                  className="w-full bg-[#FF7E45] text-white py-2 px-4 rounded-md hover:bg-[#FFA76A] transition-colors"
                >
                  {mode === 'reset' ? 'Reset Password' : 'Change Password'}
                </button>
              </form>

              {mode === 'change' && (
                <div className="mt-4 text-center">
                  <button
                    onClick={() => navigate('/forgot-password')}
                    className="text-[#FF7E45] hover:text-[#FFA76A] text-sm"
                  >
                    Forgot your password?
                  </button>
                </div>
              )}
            </div>
          )}

          {/* Success Message */}
          {mode === 'success' && (
            <div className="bg-white rounded-lg shadow-md p-6 text-center">
              <div className="mb-4">
                <i className="fas fa-envelope text-4xl text-[#FF7E45] mb-3"></i>
                <h3 className="text-xl font-semibold mb-2">Check Your Email</h3>
                <p className="text-gray-600">
                  We've sent password reset instructions to your email address.
                  Please check your inbox and follow the link to reset your password.
                </p>
              </div>
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                <p className="text-sm text-blue-700">
                  <i className="fas fa-info-circle mr-1"></i>
                  Didn't receive the email? Check your spam folder or try again.
                </p>
              </div>

              <div className="space-y-3">
                <button
                  onClick={() => setMode('request')}
                  className="w-full bg-[#FF7E45] text-white py-2 px-4 rounded-md hover:bg-[#FFA76A] transition-colors"
                >
                  Resend Instructions
                </button>
                <button
                  onClick={() => navigate('/login')}
                  className="w-full border border-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition-colors"
                >
                  Back to Login
                </button>
              </div>
            </div>
          )}

          {/* Help section */}
          <div className="mt-6 text-center text-sm text-gray-600">
            <p>
              Need help? Contact support at{' '}
              <a href="mailto:support@church.org" className="text-[#FF7E45] hover:underline">
                support@church.org
              </a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PasswordPage;
)passwordpage.jsx,
(
import React, { useState, useEffect } from "react";
import { apiClient } from '../utils/api';
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { PrayerRequest } from '../models/PrayerRequest';

const PrayerPage = ({ user }) => {
  const alert = useAlert();
  const [showForm, setShowForm] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [prayers, setPrayers] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [prayerTeam, setPrayerTeam] = useState([]);
  const [prayerMeetings, setPrayerMeetings] = useState([]);
  const [prayerStats, setPrayerStats] = useState(null);

  const isAdmin = user?.role === "admin";
  const isAuthenticated = user?.isLoggedIn;

  useEffect(() => {
    document.title = "SMC: - Prayers | St. Micheal`s & All Angels Church | Ifite-Awka";
    fetchPrayers();
    fetchPrayerTeam();
    fetchPrayerMeetings();
    if (isAdmin) {
      fetchPrayerStats();
    }
  }, []);

  const fetchPrayers = async (pageNum = 1) => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await apiClient.get(`/api/prayers?page=${pageNum}&limit=10`);
      if (response.success) {
        const prayersData = response.data.prayers.map(prayer => new PrayerRequest(prayer));
        setPrayers(prev => pageNum === 1 ? prayersData : [...prev, ...prayersData]);
        setHasMore(response.data.hasMore);
        setPage(pageNum);
      }
    } catch (error) {
      console.error('Error fetching prayers:', error);
      setError('Failed to load prayer requests. Please try again later.');
      alert.error('Failed to load prayer requests. Please try again later.');
      setPrayers([]);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchPrayerTeam = async () => {
    try {
      const response = await apiClient.get('/api/prayers/team');
      if (response.success) {
        setPrayerTeam(response.data);
      }
    } catch (error) {
      console.error('Error fetching prayer team:', error);
    }
  };

  const fetchPrayerMeetings = async () => {
    try {
      const response = await apiClient.get('/api/prayers/meetings');
      if (response.success) {
        setPrayerMeetings(response.data);
      }
    } catch (error) {
      console.error('Error fetching prayer meetings:', error);
    }
  };

  const fetchPrayerStats = async () => {
    try {
      const response = await apiClient.get('/api/admin/prayers/stats');
      if (response.success) {
        setPrayerStats(response.data);
      }
    } catch (error) {
      console.error('Error fetching prayer stats:', error);
    }
  };

 const handleSubmitPrayer = async (e) => {
    e.preventDefault();
    setError(null);

    const formData = new FormData(e.target);
    const prayerData = {
      request: formData.get("request"),
      isPrivate: formData.get("isPrivate") === "on",
      name: formData.get("name") || "Anonymous",
      email: formData.get("email"),
      notifyOnPray: formData.get("notifyOnPray") === "on"
    };

    try {
      const response = await apiClient.post('/api/prayers', prayerData);
      
      if (response.success) {
        setSubmitted(true);
        fetchPrayers(1);
        setTimeout(() => {
          setShowForm(false);
          setSubmitted(false);
        }, 3000);
        alert.success('Prayer request submitted successfully!');
      } else {
        setError(response.message || "Failed to submit prayer request");
        alert.error(response.message || "Failed to submit prayer request");
      }
    } catch (error) {
      console.error('Error submitting prayer:', error);
      setError("Failed to submit prayer request. Please try again.");
      alert.error("Failed to submit prayer request. Please try again.");
    }
  };

const handlePrayForRequest = async (prayerId) => {
    if (!isAuthenticated) {
      alert.info("Please log in to pray for requests");
      return;
    }

    try {
      const response = await apiClient.post(`/api/prayers/${prayerId}/pray`);
      
      if (response.success) {
        setPrayers(prev => prev.map(prayer => 
          prayer._id === prayerId 
            ? { ...prayer, prayerCount: (prayer.prayerCount || 0) + 1, userPrayed: true }
            : prayer
        ));
        alert.success('Thank you for praying!');
      } else {
        alert.error(response.message || "Failed to record your prayer");
      }
    } catch (error) {
      console.error('Error praying for request:', error);
      alert.error("Failed to record your prayer. Please try again.");
    }
  };

   // Admin functions
  const handleUpdatePrayer = async (prayerId, updates) => {
    try {
      const response = await apiClient.put(`/api/prayers/${prayerId}`, updates);
      if (response.success) {
        alert.success('Prayer request updated successfully');
        fetchPrayers();
      }
    } catch (error) {
      console.error('Error updating prayer:', error);
      alert.error('Failed to update prayer request');
    }
  };

  const handleDeletePrayer = async (prayerId) => {
    try {
      const response = await apiClient.delete(`/api/prayers/${prayerId}`);
      if (response.success) {
        alert.success('Prayer request deleted successfully');
        fetchPrayers();
      }
    } catch (error) {
      console.error('Error deleting prayer:', error);
      alert.error('Failed to delete prayer request');
    }
  };

  const fetchAllPrayers = async () => {
    try {
      const response = await apiClient.get('/api/admin/prayers');
      if (response.success) {
        return response.data.map(prayer => new PrayerRequest(prayer));
      }
    } catch (error) {
      console.error('Error fetching all prayers:', error);
    }
  };
  
  const loadMorePrayers = () => {
    fetchPrayers(page + 1);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  if (isLoading && prayers.length === 0) {
    return <Loader type="spinner" text="Loading prayer requests..." />;
  }

  return (
    <div className="page">
      {/* Header */}
      <section className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] py-12 px-4">
        <div className="container mx-auto text-center text-white">
          <h1 className="text-4xl font-bold mb-4">Prayer Requests</h1>
          <p className="text-xl max-w-2xl mx-auto">
            Share your needs and pray for others in our community
          </p>
        </div>
      </section>

      {/* Error Message */}
      {error && (
        <div className="container mx-auto px-4 py-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}

      {/* Prayer Content */}
      <section className="py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            {/* Submit Prayer Request Card */}
            <div className="bg-white rounded-lg shadow-md p-8 mb-8 text-center">
              <h2 className="text-2xl font-bold mb-4">Need Prayer?</h2>
              <p className="text-gray-600 mb-6">
                Our prayer team is committed to lifting up your requests in
                prayer. Submissions can be anonymous if you prefer.
              </p>
              <button 
                onClick={() => setShowForm(true)} 
                className="btn btn-primary"
              >
                Submit Prayer Request
              </button>
            </div>

            {/* Prayer Requests List */}
            <div>
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold">Recent Requests</h2>
                <div className="text-sm text-gray-500">
                  <i className="fas fa-info-circle mr-1"></i> Names are kept
                  private unless submitted by church staff
                </div>
              </div>

              <div className="space-y-4">
                {prayers.map((prayer) => (
                  <div key={prayer.id} className="bg-white rounded-lg shadow-md p-6">
                    <p className="text-gray-700 mb-4">{prayer.request}</p>
                    <div className="flex justify-between items-center">
                      <div className="text-sm text-gray-500">
                        <span className="font-medium">{prayer.name}</span> •{" "}
                        {formatDate(prayer.date)}
                        {prayer.isPrivate && (
                          <span className="ml-2 text-[#FF7E45]">
                            <i className="fas fa-lock mr-1"></i>Private
                          </span>
                        )}
                      </div>
                      <button 
                        onClick={() => handlePrayForRequest(prayer.id)}
                        disabled={prayer.userPrayed}
                        className={`flex items-center ${
                          prayer.userPrayed 
                            ? "text-green-500 cursor-default" 
                            : "text-[#FF7E45] hover:text-[#F4B942]"
                        }`}
                      >
                        <i className={`fas ${prayer.userPrayed ? "fa-check" : "fa-praying-hands"} mr-2`}></i>
                        <span>Prayed ({prayer.prayerCount})</span>
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              {hasMore && (
                <div className="mt-8 text-center">
                  <button 
                    onClick={loadMorePrayers}
                    disabled={isLoading}
                    className="btn btn-outline"
                  >
                    {isLoading ? "Loading..." : "Load More Requests"}
                  </button>
                </div>
              )}

              {prayers.length === 0 && !isLoading && (
                <div className="text-center py-12">
                  <i className="fas fa-pray text-4xl text-gray-400 mb-4"></i>
                  <p className="text-gray-600">No prayer requests yet. Be the first to share!</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* Prayer Ministry Info */}
      <section className="py-12 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">Our Prayer Ministry</h2>
              <p className="text-gray-600">
                Learn more about how we pray together as a church
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Prayer Team */}
              <div className="bg-white rounded-lg shadow-md p-6 text-center">
                <div className="w-16 h-16 bg-[#FFF5F0] rounded-full flex items-center justify-center mx-auto mb-4">
                  <i className="fas fa-users text-[#FF7E45] text-2xl"></i>
                </div>
                <h3 className="text-xl font-bold mb-2">Prayer Team</h3>
                <p className="text-gray-600 mb-4">
                  Our dedicated prayer team commits to praying for all submitted
                  requests throughout the week.
                </p>
                <a
                  href="/prayer-team"
                  className="text-[#FF7E45] hover:text-[#F4B942] font-medium"
                >
                  Join the Prayer Team <i className="fas fa-arrow-right ml-1"></i>
                </a>
              </div>

              {/* Prayer Meetings */}
              <div className="bg-white rounded-lg shadow-md p-6 text-center">
                <div className="w-16 h-16 bg-[#FFF5F0] rounded-full flex items-center justify-center mx-auto mb-4">
                  <i className="fas fa-calendar-alt text-[#FF7E45] text-2xl"></i>
                </div>
                <h3 className="text-xl font-bold mb-2">Prayer Meetings</h3>
                <p className="text-gray-600 mb-4">
                  Join us for corporate prayer every Tuesday at 6:30 PM in the
                  sanctuary or online.
                </p>
                <a
                  href="/events?category=prayer"
                  className="text-[#FF7E45] hover:text-[#F4B942] font-medium"
                >
                  Prayer Calendar <i className="fas fa-arrow-right ml-1"></i>
                </a>
              </div>

              {/* Prayer Resources */}
              <div className="bg-white rounded-lg shadow-md p-6 text-center">
                <div className="w-16 h-16 bg-[#FFF5F0] rounded-full flex items-center justify-center mx-auto mb-4">
                  <i className="fas fa-book-open text-[#FF7E45] text-2xl"></i>
                </div>
                <h3 className="text-xl font-bold mb-2">Prayer Resources</h3>
                <p className="text-gray-600 mb-4">
                  Access guides, devotionals, and tools to help deepen your
                  prayer life.
                </p>
                <a
                  href="/resources/prayer"
                  className="text-[#FF7E45] hover:text-[#F4B942] font-medium"
                >
                  View Resources <i className="fas fa-arrow-right ml-1"></i>
                </a>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Prayer Request Form Modal */}
      {showForm && (
        <PrayerFormModal
          user={user}
          onClose={() => {
            setShowForm(false);
            setSubmitted(false);
            setError(null);
          }}
          onSubmit={handleSubmitPrayer}
          submitted={submitted}
          error={error}
        />
      )}
    </div>
  );
};

// Prayer Form Modal Component
// Prayer Form Modal Component
const PrayerFormModal = ({ user, onClose, onSubmit, submitted, error }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-2xl font-bold">Submit Prayer Request</h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600"
            >
              <i className="fas fa-times"></i>
            </button>
          </div>

          {error && (
            <div className="mb-4 bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-red-600 text-sm">{error}</p>
            </div>
          )}

          {!submitted ? (
            <form onSubmit={onSubmit}>
              <div className="mb-6">
                <label className="block text-gray-700 font-medium mb-2">
                  Your Prayer Request *
                </label>
                <textarea
                  name="request"
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
                  rows="5"
                  placeholder="Share your prayer need..."
                  required
                ></textarea>
              </div>

              <div className="mb-6">
                <label className="flex items-center">
                  <input 
                    type="checkbox" 
                    name="isPrivate" 
                    className="mr-2" 
                  />
                  <span className="text-gray-700">
                    Keep my request private (only visible to prayer team)
                  </span>
                </label>
              </div>

              <div className="mb-6">
                <label className="block text-gray-700 font-medium mb-2">
                  Your Name (Optional)
                </label>
                <input
                  type="text"
                  name="name"
                  className="form-input"
                  placeholder="Leave blank to remain anonymous"
                />
              </div>

              <div className="mb-6">
                <label className="block text-gray-700 font-medium mb-2">
                  Email for Updates (Optional)
                </label>
                <input
                  type="email"
                  name="email"
                  className="form-input"
                  defaultValue={user?.email || ""}
                  placeholder="Enter your email"
                />
                <p className="text-sm text-gray-500 mt-1">
                  We'll notify you when someone prays for your request
                </p>
              </div>

              <div className="mb-6">
                <label className="flex items-center">
                  <input 
                    type="checkbox" 
                    name="notifyOnPray" 
                    className="mr-2" 
                    defaultChecked={true}
                  />
                  <span className="text-gray-700">
                    Notify me when someone prays for my request
                  </span>
                </label>
              </div>

              <div className="flex justify-end">
                <button
                  type="button"
                  onClick={onClose}
                  className="btn bg-gray-200 text-gray-800 hover:bg-gray-300 mr-3"
                >
                  Cancel
                </button>
                <button type="submit" className="btn btn-primary">
                  Submit Prayer
                </button>
              </div>
            </form>
          ) : (
            <div className="text-center py-6">
              <div className="w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center mb-4">
                <i className="fas fa-check text-green-500 text-2xl"></i>
              </div>
              <h4 className="text-xl font-bold mb-2">Prayer Request Submitted</h4>
              <p className="text-gray-600">
                Thank you for sharing your request. Our prayer team will be
                praying for you.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PrayerPage;
)paryerpage.jsx,
(
import React, { useState, useEffect } from "react";
import { apiClient } from '../utils/api';
import { authService, userService, donationService } from '../services/apiService';
import Loader from '../components/Loader';
import { useAlert } from "../utils/Alert";

const ProfilePage = ({ user }) => {
  const [activeTab, setActiveTab] = useState('personal');
  const [userData, setUserData] = useState(null);
  const [donations, setDonations] = useState([]);
  const [rsvps, setRsvps] = useState([]);
  const [favorites, setFavorites] = useState({ events: [], sermons: [], posts: [] });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [familyMembers, setFamilyMembers] = useState([]);
  const [isAddingFamilyMember, setIsAddingFamilyMember] = useState(false);
  const [newFamilyMember, setNewFamilyMember] = useState({ name: '', relationship: '' });

  const alert = useAlert();

  useEffect(() => {
    document.title = "SMC: - Profile | St. Michael's & All Angels Church | Ifite-Awka";
    fetchUserProfileData();
  }, [user]);

  const fetchUserProfileData = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Fetch user data based on role
      const userResponse = await authService.getCurrentUser();
      setUserData(userResponse.data || userResponse);

      // Fetch additional data only if user is authenticated
      if (userResponse && !userResponse.error) {
        const [
          donationsResponse,
          rsvpsResponse,
          favoritesResponse,
          familyResponse
        ] = await Promise.allSettled([
          donationService.getUserDonations(),
          apiClient.get('/user/rsvps'),
          apiClient.get('/user/favorites'),
          apiClient.get('/user/family')
        ]);

        if (donationsResponse.status === 'fulfilled') {
          setDonations(donationsResponse.value.donations || donationsResponse.value.data || []);
        }

        if (rsvpsResponse.status === 'fulfilled') {
          setRsvps(rsvpsResponse.value.rsvps || rsvpsResponse.value.data || []);
        }

        if (favoritesResponse.status === 'fulfilled') {
          setFavorites(favoritesResponse.value.favorites || favoritesResponse.value.data || { events: [], sermons: [], posts: [] });
        }

        if (familyResponse.status === 'fulfilled') {
          setFamilyMembers(familyResponse.value.family || familyResponse.value.data || []);
        }
      }
    } catch (error) {
      console.error('Error fetching profile data:', error);
      // Don't set error if it's just an authentication issue
      if (!error.response || error.response.status !== 401) {
        setError('Failed to load profile data. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleUpdateProfile = async (formData) => {
    try {
      const response = await authService.updateProfile(formData);
      setUserData(response.user || response.data);
      return { success: true, message: 'Profile updated successfully' };
    } catch (error) {
      console.error('Error updating profile:', error);
      return { 
        success: false, 
        message: error.response?.data?.message || error.message || 'Failed to update profile' 
      };
    }
  };

  const handleAddFamilyMember = async (memberData) => {
    try {
      const response = await apiClient.post('/user/family', memberData);
      const newMember = response.member || response.data;
      setFamilyMembers(prev => [...prev, newMember]);
      setIsAddingFamilyMember(false);
      setNewFamilyMember({ name: '', relationship: '' });
      return { success: true, message: 'Family member added successfully' };
    } catch (error) {
      console.error('Error adding family member:', error);
      return { 
        success: false, 
        message: error.response?.data?.message || error.message || 'Failed to add family member' 
      };
    }
  };

  const handleRemoveFamilyMember = async (memberId) => {
    try {
      await apiClient.delete(`/user/family/${memberId}`);
      setFamilyMembers(prev => prev.filter(member => member.id !== memberId));
      return { success: true, message: 'Family member removed successfully' };
    } catch (error) {
      console.error('Error removing family member:', error);
      return { 
        success: false, 
        message: error.response?.data?.message || error.message || 'Failed to remove family member' 
      };
    }
  };

  const handleUpdateCommunicationPrefs = async (preferences) => {
    try {
      await apiClient.put('/user/communication', { preferences });
      return { success: true, message: 'Preferences updated successfully' };
    } catch (error) {
      console.error('Error updating preferences:', error);
      return { 
        success: false, 
        message: error.response?.data?.message || error.message || 'Failed to update preferences' 
      };
    }
  };

  const handleChangePassword = async (passwordData) => {
    try {
      await authService.changePassword(passwordData);
      return { success: true, message: 'Password changed successfully' };
    } catch (error) {
      console.error('Error changing password:', error);
      return { 
        success: false, 
        message: error.response?.data?.message || error.message || 'Failed to change password' 
      };
    }
  };

  const handleDeleteAccount = async () => {
    if (window.confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
      try {
        await authService.deleteAccount();
        window.location.href = '/';
      } catch (error) {
        console.error('Error deleting account:', error);
        setError(error.response?.data?.message || error.message || 'Failed to delete account');
      }
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  // Show login prompt if user is not authenticated
  if (!user && !userData) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-md mx-auto text-center">
            <div className="bg-white rounded-lg shadow-md p-8">
              <h2 className="text-2xl font-bold mb-4">Please Log In</h2>
              <p className="text-gray-600 mb-6">You need to be logged in to view your profile.</p>
              <a href="/login" className="btn btn-primary">Log In</a>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return <Loader type="spinner" text="Loading your profile..." />;
  }

  // Determine user role display text
  const getRoleDisplayText = (role) => {
    const roleMap = {
      'admin': 'Administrator',
      'moderator': 'Moderator',
      'user': 'Church Member'
    };
    return roleMap[role] || 'Church Member';
  };

  const currentUser = userData || user;
  const userRole = currentUser.role || 'user';

  return (
    <div className="page">
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          {/* Error Message */}
          {error && (
            <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-center">
                <i className="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                <p className="text-red-600">{error}</p>
              </div>
              <button 
                onClick={() => setError(null)}
                className="mt-2 text-red-600 text-sm hover:text-red-800"
              >
                Dismiss
              </button>
            </div>
          )}

          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            {/* Header Banner */}
            <div className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] h-32 relative">
              <div className="absolute -bottom-16 left-8">
                <div className="w-32 h-32 bg-gray-300 rounded-full border-4 border-white flex items-center justify-center text-4xl text-white">
                  {currentUser?.name?.charAt(0) || currentUser?.firstName?.charAt(0) || 'U'}
                </div>
              </div>
            </div>

            {/* Profile Info */}
            <div className="pt-20 px-8 pb-8">
              <div className="flex justify-between items-start mb-8">
                <div>
                  <h1 className="text-3xl font-bold mb-1">
                    {currentUser?.name || `${currentUser?.firstName} ${currentUser?.lastName}` || 'User'}
                  </h1>
                  <p className="text-gray-600">
                    {getRoleDisplayText(userRole)}
                    {userRole !== 'user' && (
                      <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                        {userRole}
                      </span>
                    )}
                  </p>
                </div>
                <button 
                  className="btn btn-outline"
                  onClick={() => setActiveTab('personal')}
                >
                  Edit Profile
                </button>
              </div>

              {/* Tabs */}
              <div className="border-b border-gray-200 mb-8">
                <ul className="flex flex-wrap -mb-px">
                  {['personal', 'involvement', 'communication', 'account'].map((tab) => (
                    <li key={tab} className="mr-2">
                      <button
                        onClick={() => setActiveTab(tab)}
                        className={`inline-block py-4 px-4 border-b-2 ${
                          activeTab === tab
                            ? 'border-[#FF7E45] text-[#FF7E45] font-medium'
                            : 'border-transparent hover:text-gray-600 hover:border-gray-300'
                        }`}
                      >
                        {tab === 'personal' && 'Personal Information'}
                        {tab === 'involvement' && 'Involvement'}
                        {tab === 'communication' && 'Communication'}
                        {tab === 'account' && 'Account Settings'}
                      </button>
                    </li>
                  ))}
                  
                  {/* Admin-only tab */}
                  {userRole === 'admin' && (
                    <li className="mr-2">
                      <button
                        onClick={() => window.location.href = '/admin'}
                        className="inline-block py-4 px-4 border-b-2 border-transparent hover:text-blue-600 hover:border-blue-300 text-blue-500"
                      >
                        Admin Dashboard
                      </button>
                    </li>
                  )}
                </ul>
              </div>

              {/* Tab Content */}
              {activeTab === 'personal' && (
                <PersonalInfoTab 
                  userData={currentUser}
                  familyMembers={familyMembers}
                  isAddingFamilyMember={isAddingFamilyMember}
                  newFamilyMember={newFamilyMember}
                  onUpdateProfile={handleUpdateProfile}
                  onAddFamilyMember={handleAddFamilyMember}
                  onRemoveFamilyMember={handleRemoveFamilyMember}
                  setIsAddingFamilyMember={setIsAddingFamilyMember}
                  setNewFamilyMember={setNewFamilyMember}
                  formatDate={formatDate}
                />
              )}

              {activeTab === 'involvement' && (
                <InvolvementTab 
                  donations={donations}
                  rsvps={rsvps}
                  favorites={favorites}
                  formatCurrency={formatCurrency}
                  formatDate={formatDate}
                />
              )}

              {activeTab === 'communication' && (
                <CommunicationTab 
                  onUpdatePreferences={handleUpdateCommunicationPrefs}
                />
              )}

              {activeTab === 'account' && (
                <AccountSettingsTab 
                  onChangePassword={handleChangePassword}
                  onDeleteAccount={handleDeleteAccount}
                  userRole={userRole}
                />
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Personal Information Tab Component
const PersonalInfoTab = ({ 
  userData, 
  familyMembers, 
  isAddingFamilyMember, 
  newFamilyMember, 
  onUpdateProfile, 
  onAddFamilyMember, 
  onRemoveFamilyMember, 
  setIsAddingFamilyMember, 
  setNewFamilyMember,
  formatDate
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    firstName: userData?.firstName || '',
    lastName: userData?.lastName || '',
    email: userData?.email || '',
    phone: userData?.phone || '',
    address: userData?.address || ''
  });

  const [saveStatus, setSaveStatus] = useState('');

  useEffect(() => {
    setFormData({
      firstName: userData?.firstName || '',
      lastName: userData?.lastName || '',
      email: userData?.email || '',
      phone: userData?.phone || '',
      address: userData?.address || ''
    });
  }, [userData]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const result = await onUpdateProfile(formData);
    setSaveStatus(result.success ? 'success' : 'error');
    
    if (result.success) {
      setIsEditing(false);
      setTimeout(() => setSaveStatus(''), 3000);
    }
  };

  const handleAddFamilyMemberSubmit = async (e) => {
    e.preventDefault();
    if (!newFamilyMember.name || !newFamilyMember.relationship) return;
    
    const result = await onAddFamilyMember(newFamilyMember);
    setSaveStatus(result.success ? 'success' : 'error');
    setTimeout(() => setSaveStatus(''), 3000);
  };

  return (
    <div>
      {/* Status Messages */}
      {saveStatus === 'success' && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-4">
          <p className="text-green-600">Operation completed successfully!</p>
        </div>
      )}
      
      {saveStatus === 'error' && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
          <p className="text-red-600">Operation failed. Please try again.</p>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Contact Info */}
        <div>
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">Contact Information</h2>
            <button
              onClick={() => setIsEditing(!isEditing)}
              className="text-[#FF7E45] hover:text-[#F4B942] text-sm"
            >
              {isEditing ? 'Cancel' : 'Edit'}
            </button>
          </div>

          {isEditing ? (
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm text-gray-600 mb-1">First Name</label>
                  <input
                    type="text"
                    value={formData.firstName}
                    onChange={(e) => setFormData({...formData, firstName: e.target.value})}
                    className="form-input"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm text-gray-600 mb-1">Last Name</label>
                  <input
                    type="text"
                    value={formData.lastName}
                    onChange={(e) => setFormData({...formData, lastName: e.target.value})}
                    className="form-input"
                    required
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Email</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  className="form-input"
                  required
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Phone</label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  className="form-input"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Address</label>
                <textarea
                  value={formData.address}
                  onChange={(e) => setFormData({...formData, address: e.target.value})}
                  className="form-input"
                  rows="3"
                />
              </div>
              <button type="submit" className="btn btn-primary">
                Save Changes
              </button>
            </form>
          ) : (
            <div className="space-y-4">
              <div>
                <label className="block text-sm text-gray-600 mb-1">Name</label>
                <p className="font-medium">
                  {userData?.firstName && userData?.lastName 
                    ? `${userData.firstName} ${userData.lastName}` 
                    : userData?.name || 'Not provided'
                  }
                </p>
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Email Address</label>
                <p className="font-medium">{userData?.email || 'Not provided'}</p>
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Phone Number</label>
                <p className="font-medium">{userData?.phone || 'Not provided'}</p>
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Address</label>
                <p className="font-medium">{userData?.address || 'Not provided'}</p>
              </div>
            </div>
          )}
        </div>

        {/* Church Info */}
        <div>
          <h2 className="text-xl font-bold mb-4">Church Membership</h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm text-gray-600 mb-1">Member Since</label>
              <p className="font-medium">{userData?.memberSince ? formatDate(userData.memberSince) : 'Not specified'}</p>
            </div>
            <div>
              <label className="block text-sm text-gray-600 mb-1">Membership Status</label>
              <p className="font-medium capitalize">{userData?.membershipStatus || 'Active'}</p>
            </div>
            <div>
              <label className="block text-sm text-gray-600 mb-1">Small Group</label>
              <p className="font-medium">{userData?.smallGroup || 'Not currently in a small group'}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Family Members */}
      <div className="mt-10">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Family Members</h2>
          <button 
            className="btn btn-outline text-sm"
            onClick={() => setIsAddingFamilyMember(true)}
          >
            <i className="fas fa-plus mr-2"></i> Add Family Member
          </button>
        </div>
        
        {isAddingFamilyMember && (
          <form onSubmit={handleAddFamilyMemberSubmit} className="mb-4 p-4 bg-gray-50 rounded-lg">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <label className="block text-sm text-gray-600 mb-1">Name</label>
                <input
                  type="text"
                  value={newFamilyMember.name}
                  onChange={(e) => setNewFamilyMember({...newFamilyMember, name: e.target.value})}
                  className="form-input"
                  required
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Relationship</label>
                <select
                  value={newFamilyMember.relationship}
                  onChange={(e) => setNewFamilyMember({...newFamilyMember, relationship: e.target.value})}
                  className="form-input"
                  required
                >
                  <option value="">Select Relationship</option>
                  <option value="spouse">Spouse</option>
                  <option value="child">Child</option>
                  <option value="parent">Parent</option>
                  <option value="sibling">Sibling</option>
                  <option value="other">Other</option>
                </select>
              </div>
            </div>
            <div className="flex space-x-2">
              <button type="submit" className="btn btn-primary text-sm">
                Add Member
              </button>
              <button 
                type="button" 
                className="btn btn-outline text-sm"
                onClick={() => setIsAddingFamilyMember(false)}
              >
                Cancel
              </button>
            </div>
          </form>
        )}
        
        {familyMembers.length > 0 ? (
          <div className="space-y-3">
            {familyMembers.map((member) => (
              <div key={member.id || member._id} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium">{member.name}</p>
                  <p className="text-sm text-gray-600 capitalize">{member.relationship}</p>
                </div>
                <button
                  onClick={() => onRemoveFamilyMember(member.id || member._id)}
                  className="text-red-500 hover:text-red-700"
                  title="Remove family member"
                >
                  <i className="fas fa-times"></i>
                </button>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-600 mb-4">No family members linked to your account.</p>
        )}
      </div>
    </div>
  );
};

// Involvement Tab Component
const InvolvementTab = ({ donations, rsvps, favorites, formatCurrency, formatDate }) => {
  return (
    <div className="space-y-8">
      {/* Donations */}
      <div>
        <h2 className="text-xl font-bold mb-4">Your Donations</h2>
        {donations && donations.length > 0 ? (
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left pb-2">Amount</th>
                    <th className="text-left pb-2">Date</th>
                    <th className="text-left pb-2">Type</th>
                    <th className="text-left pb-2">Status</th>
                  </tr>
                </thead>
                <tbody>
                  {donations.slice(0, 5).map((donation) => (
                    <tr key={donation.id || donation._id} className="border-b">
                      <td className="py-3 font-medium">{formatCurrency(donation.amount)}</td>
                      <td className="py-3">{formatDate(donation.date || donation.createdAt)}</td>
                      <td className="py-3 capitalize">{donation.frequency || 'One-time'}</td>
                      <td className="py-3">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          donation.status === 'completed' || donation.status === 'succeeded' 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-yellow-100 text-yellow-800'
                        }`}>
                          {donation.status}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {donations.length > 5 && (
              <p className="text-sm text-gray-600 mt-3">
                Showing 5 of {donations.length} donations. <a href="/donations" className="text-[#FF7E45]">View all</a>
              </p>
            )}
          </div>
        ) : (
          <div className="bg-gray-50 rounded-lg p-6">
            <p className="text-gray-600">You haven't made any donations yet.</p>
            <p className="text-gray-600 mt-2">
              Support our ministry by making a <a href="/donate" className="text-[#FF7E45]">donation</a>.
            </p>
          </div>
        )}
      </div>

      {/* RSVPs */}
      <div>
        <h2 className="text-xl font-bold mb-4">Your Upcoming RSVPs</h2>
        {rsvps && rsvps.length > 0 ? (
          <div className="space-y-3">
            {rsvps.slice(0, 3).map((rsvp) => (
              <div key={rsvp.id || rsvp._id} className="bg-gray-50 rounded-lg p-4">
                <h3 className="font-medium">{rsvp.eventTitle}</h3>
                <p className="text-sm text-gray-600">{formatDate(rsvp.eventDate)}</p>
                <p className="text-sm text-gray-600">{rsvp.eventTime}</p>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-gray-50 rounded-lg p-6">
            <p className="text-gray-600">You haven't RSVP'd to any upcoming events.</p>
            <p className="text-gray-600 mt-2">
              Check our <a href="/events" className="text-[#FF7E45]">events calendar</a> to find upcoming activities.
            </p>
          </div>
        )}
      </div>

      {/* Favorites */}
      <div>
        <h2 className="text-xl font-bold mb-4">Your Favorites</h2>
        {(favorites.events && favorites.events.length > 0) || 
         (favorites.sermons && favorites.sermons.length > 0) || 
         (favorites.posts && favorites.posts.length > 0) ? (
          <div className="space-y-4">
            {favorites.events && favorites.events.length > 0 && (
              <div>
                <h3 className="font-medium mb-2">Events ({favorites.events.length})</h3>
                <div className="space-y-2">
                  {favorites.events.slice(0, 2).map((event) => (
                    <div key={event.id || event._id} className="bg-gray-50 rounded-lg p-3">
                      <p className="font-medium">{event.title}</p>
                      <p className="text-sm text-gray-600">{formatDate(event.date)}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {favorites.sermons && favorites.sermons.length > 0 && (
              <div>
                <h3 className="font-medium mb-2">Sermons ({favorites.sermons.length})</h3>
                <div className="space-y-2">
                  {favorites.sermons.slice(0, 2).map((sermon) => (
                    <div key={sermon.id || sermon._id} className="bg-gray-50 rounded-lg p-3">
                      <p className="font-medium">{sermon.title}</p>
                      <p className="text-sm text-gray-600">{sermon.speaker}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {favorites.posts && favorites.posts.length > 0 && (
              <div>
                <h3 className="font-medium mb-2">Posts ({favorites.posts.length})</h3>
                <div className="space-y-2">
                  {favorites.posts.slice(0, 2).map((post) => (
                    <div key={post.id || post._id} className="bg-gray-50 rounded-lg p-3">
                      <p className="font-medium">{post.title}</p>
                      <p className="text-sm text-gray-600">By {post.author}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ) : (
          <div className="bg-gray-50 rounded-lg p-6">
            <p className="text-gray-600">You haven't saved any favorites yet.</p>
            <p className="text-gray-600 mt-2">
              Browse our <a href="/sermons" className="text-[#FF7E45]">sermons</a> or{' '}
              <a href="/events" className="text-[#FF7E45]">events</a> and click the heart icon to add items to your favorites.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

// Communication Tab Component
const CommunicationTab = ({ onUpdatePreferences }) => {
  const [preferences, setPreferences] = useState({
    emailNotifications: true,
    smsNotifications: false,
    newsletter: true,
    eventReminders: true,
    prayerUpdates: true
  });

  const [saveStatus, setSaveStatus] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const result = await onUpdatePreferences(preferences);
    setSaveStatus(result.success ? 'success' : 'error');
    
    setTimeout(() => setSaveStatus(''), 3000);
  };

  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Communication Preferences</h2>
      
      {saveStatus === 'success' && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-4">
          <p className="text-green-600">Preferences updated successfully!</p>
        </div>
      )}
      
      {saveStatus === 'error' && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
          <p className="text-red-600">Failed to update preferences. Please try again.</p>
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
          <div>
            <label className="font-medium">Email Notifications</label>
            <p className="text-sm text-gray-600">Receive important updates via email</p>
          </div>
          <input
            type="checkbox"
            checked={preferences.emailNotifications}
            onChange={(e) => setPreferences({...preferences, emailNotifications: e.target.checked})}
            className="form-checkbox h-5 w-5 text-[#FF7E45]"
          />
        </div>

        <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
          <div>
            <label className="font-medium">SMS Notifications</label>
            <p className="text-sm text-gray-600">Receive text message alerts</p>
          </div>
          <input
            type="checkbox"
            checked={preferences.smsNotifications}
            onChange={(e) => setPreferences({...preferences, smsNotifications: e.target.checked})}
            className="form-checkbox h-5 w-5 text-[#FF7E45]"
          />
        </div>

        <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
          <div>
            <label className="font-medium">Weekly Newsletter</label>
            <p className="text-sm text-gray-600">Receive our weekly church newsletter</p>
          </div>
          <input
            type="checkbox"
            checked={preferences.newsletter}
            onChange={(e) => setPreferences({...preferences, newsletter: e.target.checked})}
            className="form-checkbox h-5 w-5 text-[#FF7E45]"
          />
        </div>

        <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
          <div>
            <label className="font-medium">Event Reminders</label>
            <p className="text-sm text-gray-600">Get reminders for events you RSVP to</p>
          </div>
          <input
            type="checkbox"
            checked={preferences.eventReminders}
            onChange={(e) => setPreferences({...preferences, eventReminders: e.target.checked})}
            className="form-checkbox h-5 w-5 text-[#FF7E45]"
          />
        </div>

        <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
          <div>
            <label className="font-medium">Prayer Updates</label>
            <p className="text-sm text-gray-600">Receive updates on prayer requests</p>
          </div>
          <input
            type="checkbox"
            checked={preferences.prayerUpdates}
            onChange={(e) => setPreferences({...preferences, prayerUpdates: e.target.checked})}
            className="form-checkbox h-5 w-5 text-[#FF7E45]"
          />
        </div>

        <button type="submit" className="btn btn-primary">
          Save Preferences
        </button>
      </form>
    </div>
  );
};

// Account Settings Tab Component
const AccountSettingsTab = ({ onChangePassword, onDeleteAccount, userRole }) => {
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [passwordMessage, setPasswordMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setPasswordMessage("New passwords don't match");
      return;
    }
    
    if (passwordData.newPassword.length < 8) {
      setPasswordMessage("Password must be at least 8 characters long");
      return;
    }
    
    const result = await onChangePassword(passwordData);
    if (result.success) {
      setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });
      setPasswordMessage('Password changed successfully');
    } else {
      setPasswordMessage(result.message);
    }
  };

  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Account Settings</h2>
      
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
        <h3 className="font-medium text-yellow-800 mb-2">Security</h3>
        <p className="text-yellow-700 text-sm">
          For your security, please keep your password confidential and update it regularly.
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4 max-w-md">
        {passwordMessage && (
          <div className={`p-3 rounded-lg ${
            passwordMessage.includes('success') 
              ? 'bg-green-50 text-green-700' 
              : 'bg-red-50 text-red-700'
          }`}>
            {passwordMessage}
          </div>
        )}
        
        <div>
          <label className="block text-sm font-medium mb-2">Current Password</label>
          <input
            type="password"
            value={passwordData.currentPassword}
            onChange={(e) => setPasswordData({...passwordData, currentPassword: e.target.value})}
            className="form-input"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">New Password</label>
          <input
            type="password"
            value={passwordData.newPassword}
            onChange={(e) => setPasswordData({...passwordData, newPassword: e.target.value})}
            className="form-input"
            required
            minLength="8"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Confirm New Password</label>
          <input
            type="password"
            value={passwordData.confirmPassword}
            onChange={(e) => setPasswordData({...passwordData, confirmPassword: e.target.value})}
            className="form-input"
            required
          />
        </div>

        <button type="submit" className="btn btn-primary">
          Change Password
        </button>
      </form>

      <div className="mt-8 pt-6 border-t border-gray-200">
        <h3 className="font-medium text-red-600 mb-3">Danger Zone</h3>
        <button 
          className="btn bg-red-500 text-white hover:bg-red-600"
          onClick={onDeleteAccount}
        >
          <i className="fas fa-trash mr-2"></i>
          Delete Account
        </button>
        <p className="text-sm text-gray-600 mt-2">
          This action cannot be undone. All your data will be permanently removed.
        </p>
      </div>

      {/* Admin note */}
      {userRole === 'admin' && (
        <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h3 className="font-medium text-blue-800 mb-2">Admin Note</h3>
          <p className="text-blue-700 text-sm">
            As an administrator, your account has special privileges. Please be cautious when making changes.
          </p>
        </div>
      )}
    </div>
  );
};

export default ProfilePage;
)profilepage.jsx,
(
import { useState, useEffect } from "react";
import { sermonService } from '../services/apiService';
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { Sermon } from '../models/Sermon';

const SermonsPage = ({ user }) => {
    const alert = useAlert();
    const [selectedSermon, setSelectedSermon] = useState(null);
    const [showSermonModal, setShowSermonModal] = useState(false);
    const [showEditModal, setShowEditModal] = useState(false);
    const [sermonFilter, setSermonFilter] = useState('all');
    const [sermons, setSermons] = useState([]);
    const [favoriteSermons, setFavoriteSermons] = useState(new Set());
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [liveStatus, setLiveStatus] = useState(null);
    const [categories, setCategories] = useState([]);
    const [sermonStats, setSermonStats] = useState(null);
    const [editForm, setEditForm] = useState({
        title: '',
        speaker: '',
        description: '',
        category: 'faith',
        videoUrl: '',
        imageUrl: ''
    });

    const isAdmin = user?.role === "admin";
    const isAuthenticated = user?.isLoggedIn;

    useEffect(() => {
        document.title = "SMC: - Sermons | St. Michael's & All Angels Church | Ifite-Awka";
        fetchSermons();
        fetchLiveStatus();
        fetchCategories();
        if (isAuthenticated) {
            fetchUserFavorites();
        }
        if (isAdmin) {
            fetchSermonStats();
        }
    }, [isAuthenticated, isAdmin]);

    const fetchSermons = async () => {
        try {
            setIsLoading(true);
            setError(null);
            const response = await sermonService.getAll();
            setSermons(response.map(sermon => new Sermon(sermon)));
        } catch (error) {
            console.error('Error fetching sermons:', error);
            setError('Failed to load sermons. Please try again later.');
            alert.error('Failed to load sermons. Please try again later.');
        } finally {
            setIsLoading(false);
        }
    };

    const fetchLiveStatus = async () => {
        try {
            const response = await sermonService.getLiveStatus();
            setLiveStatus(response);
        } catch (error) {
            console.error('Error fetching live status:', error);
            setLiveStatus(null);
            alert.error('Failed to load live status.');
        }
    };

    const fetchCategories = async () => {
        try {
            const response = await sermonService.getCategories();
            setCategories(response);
        } catch (error) {
            console.error('Error fetching categories:', error);
            setCategories([]);
            alert.error('Failed to load categories.');
        }
    };

    const fetchUserFavorites = async () => {
        try {
            const response = await sermonService.getFavorites();
            setFavoriteSermons(new Set(response.map(fav => fav.sermonId || fav._id)));
        } catch (error) {
            console.error('Error fetching favorites:', error);
            alert.error('Failed to load your favorite sermons.');
        }
    };

    const fetchSermonStats = async () => {
        try {
            const response = await sermonService.getStats();
            setSermonStats(response);
        } catch (error) {
            console.error('Error fetching sermon stats:', error);
        }
    };

    const handleEditSermon = (sermon) => {
        setEditForm({
            _id: sermon._id || sermon.id,
            title: sermon.title,
            speaker: sermon.speaker,
            description: sermon.description,
            category: sermon.category,
            videoUrl: sermon.videoUrl,
            imageUrl: sermon.imageUrl
        });
        setShowEditModal(true);
    };

    const handleDeleteSermon = async (sermonId) => {
        alert.info('Are you sure you want to delete this sermon?', {
            confirm: async () => {
                try {
                    await sermonService.delete(sermonId);
                    setSermons(sermons.filter(s => s._id !== sermonId && s.id !== sermonId));
                    alert.success('Sermon deleted successfully.');
                } catch (error) {
                    console.error('Error deleting sermon:', error);
                    if (error.response?.status === 403) {
                        alert.error('Permission denied. Only admins can delete sermons.');
                    } else {
                        alert.error('Failed to delete sermon');
                    }
                }
            }
        });
    };

    const handleEditSubmit = async (e) => {
        e.preventDefault();
        try {
            let response;
            if (editForm._id) {
                response = await sermonService.update(editForm._id, editForm);
            } else {
                response = await sermonService.create({
                    ...editForm,
                    date: new Date().toISOString()
                });
            }

            const savedSermon = new Sermon(response);
            if (editForm._id) {
                setSermons(sermons.map(s => s._id === editForm._id ? savedSermon : s));
            } else {
                setSermons([...sermons, savedSermon]);
            }
            setShowEditModal(false);
            setEditForm({
                title: '',
                speaker: '',
                description: '',
                category: 'faith',
                videoUrl: '',
                imageUrl: ''
            });
            alert.success(`Sermon ${editForm._id ? 'updated' : 'created'} successfully!`);
        } catch (error) {
            console.error('Error saving sermon:', error);
            if (error.response?.status === 403) {
                alert.error('Permission denied. Only admins can manage sermons.');
            } else {
                alert.error('Failed to save sermon');
            }
        }
    };

    const handleAddToFavorites = async (sermonId) => {
        if (!isAuthenticated) {
            alert.info('Please log in to add to favorites');
            return;
        }

        try {
            if (favoriteSermons.has(sermonId)) {
                await sermonService.removeFavorite(sermonId);
                setFavoriteSermons(prev => {
                    const newSet = new Set(prev);
                    newSet.delete(sermonId);
                    return newSet;
                });
                alert.success('Removed from favorites!');
            } else {
                await sermonService.addFavorite(sermonId);
                setFavoriteSermons(prev => new Set(prev).add(sermonId));
                alert.success('Added to favorites!');
            }
        } catch (error) {
            console.error('Error updating favorites:', error);
            alert.error('Failed to update favorites');
        }
    };

    const handleSermonPlay = (sermon) => {
        setSelectedSermon(sermon);
        setShowSermonModal(true);
    };

    // Filter sermons based on selected category
    const filteredSermons = sermonFilter === 'all'
        ? sermons
        : sermons.filter(sermon => sermon.category === sermonFilter);

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    if (isLoading) {
        return <Loader type="spinner" text="Loading sermons..." />;
    }

    return (
        <div className="page">
            {/* Header */}
            <section className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] py-12 px-4">
                <div className="container mx-auto text-center text-white">
                    <h1 className="text-4xl font-bold mb-4">Sermons</h1>
                    <p className="text-xl max-w-2xl mx-auto">Watch or listen to recent messages from our pastors</p>

                    {/* Admin Actions */}
                    {isAdmin && (
                        <div className="mt-6">
                            <button
                                onClick={() => {
                                    setEditForm({
                                        title: '',
                                        speaker: '',
                                        description: '',
                                        category: 'faith',
                                        videoUrl: '',
                                        imageUrl: ''
                                    });
                                    setShowEditModal(true);
                                }}
                                className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
                            >
                                <i className="fas fa-plus mr-2"></i>Add New Sermon
                            </button>
                        </div>
                    )}
                </div>
            </section>

            {/* Error Message */}
            {error && (
                <div className="container mx-auto px-4 py-4">
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                        <p className="text-red-600">{error}</p>
                    </div>
                </div>
            )}

            {/* Live Stream Banner */}
            <LiveStreamSection liveStatus={liveStatus} />

            {/* Sermons Section */}
            <section className="py-12">
                <div className="container mx-auto px-4">
                    {/* Filter Tabs */}
                    <div className="mb-8 flex flex-wrap justify-center gap-2">
                        <button
                            className={`px-4 py-2 rounded-full transition-colors ${sermonFilter === 'all' ? 'bg-[#FF7E45] text-white' : 'bg-gray-100 hover:bg-gray-200'}`}
                            onClick={() => setSermonFilter('all')}
                        >
                            All Sermons
                        </button>
                        {categories.map(category => (
                            <button
                                key={category}
                                className={`px-4 py-2 rounded-full transition-colors ${sermonFilter === category ? 'bg-[#FF7E45] text-white' : 'bg-gray-100 hover:bg-gray-200'}`}
                                onClick={() => setSermonFilter(category)}
                            >
                                {category.charAt(0).toUpperCase() + category.slice(1)}
                            </button>
                        ))}
                    </div>

                    {isLoading ? (
                        <div className="text-center py-12">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#FF7E45] mx-auto"></div>
                            <p className="mt-4 text-gray-600">Loading sermons...</p>
                        </div>
                    ) : (
                        <>
                            {/* Sermons Grid */}
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {filteredSermons.map((sermon) => (
                                    <SermonCard
                                        key={sermon._id || sermon.id}
                                        sermon={sermon}
                                        isAdmin={isAdmin}
                                        isFavorite={favoriteSermons.has(sermon._id) || favoriteSermons.has(sermon.id)}
                                        onEdit={handleEditSermon}
                                        onDelete={handleDeleteSermon}
                                        onFavorite={handleAddToFavorites}
                                        onPlay={handleSermonPlay}
                                        isAuthenticated={isAuthenticated}
                                        formatDate={formatDate}
                                    />
                                ))}
                            </div>

                            {filteredSermons.length === 0 && (
                                <div className="text-center py-12">
                                    <i className="fas fa-sad-tear text-4xl text-gray-400 mb-4"></i>
                                    <p className="text-gray-600">No sermons found in this category.</p>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </section>

            {/* Sermon Modal */}
            {showSermonModal && selectedSermon && (
                <SermonModal
                    sermon={selectedSermon}
                    isFavorite={favoriteSermons.has(selectedSermon._id) || favoriteSermons.has(selectedSermon.id)}
                    onClose={() => setShowSermonModal(false)}
                    onFavorite={handleAddToFavorites}
                    isAuthenticated={isAuthenticated}
                    formatDate={formatDate}
                />
            )}

            {/* Edit Sermon Modal */}
            {showEditModal && (
                <EditSermonModal
                    editForm={editForm}
                    setEditForm={setEditForm}
                    onClose={() => setShowEditModal(false)}
                    onSubmit={handleEditSubmit}
                    categories={categories}
                />
            )}
        </div>
    );
};

// Component for Live Stream Section
const LiveStreamSection = ({ liveStatus }) => (
    <section className="bg-[#333] text-white py-8">
        <div className="container mx-auto px-4">
            <div className="flex flex-col lg:flex-row items-stretch gap-6">
                {/* Live Stream Video Area */}
                <div className="lg:w-2/3">
                    <div className="bg-black rounded-lg overflow-hidden shadow-lg">
                        <div className="w-full aspect-video relative">
                            <div className="absolute inset-0 flex flex-col items-center justify-center p-4 text-center">
                                <div className="mb-4">
                                    <div className="relative inline-block">
                                        <i className="fas fa-video text-4xl md:text-5xl text-gray-400"></i>
                                        {liveStatus?.isLive && (
                                            <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                                        )}
                                    </div>
                                </div>
                                <h3 className="text-xl md:text-2xl font-bold mb-2">
                                    {liveStatus?.isLive ? 'Live Now' : 'Service Starts Soon'}
                                </h3>
                                <p className="text-gray-300 text-sm md:text-base mb-4">
                                    {liveStatus?.isLive
                                        ? 'Join us for live worship and teaching'
                                        : 'Live stream will begin automatically when the service starts'
                                    }
                                </p>
                                {liveStatus?.nextStream && (
                                    <div className="flex items-center justify-center space-x-2 text-sm text-gray-400">
                                        <i className="fas fa-clock"></i>
                                        <span>Next stream: {liveStatus.nextStream}</span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>

                {/* Service Info Panel */}
                <div className="lg:w-1/3">
                    <div className="bg-gray-800 p-4 md:p-6 rounded-lg shadow-lg h-full">
                        <div className="flex items-center mb-4">
                            {liveStatus?.isLive && (
                                <div className="w-3 h-3 bg-red-500 rounded-full mr-3 animate-pulse"></div>
                            )}
                            <h3 className="text-xl md:text-2xl font-bold">
                                {liveStatus?.isLive ? 'Live Now' : 'Up Next'}
                            </h3>
                        </div>

                        <div className="space-y-4">
                            <div className="flex items-start">
                                <i className="fas fa-calendar-alt text-[#FF7E45] mt-1 mr-3"></i>
                                <div>
                                    <p className="font-semibold">Sunday Service</p>
                                    <p className="text-gray-300 text-sm">{new Date().toLocaleDateString()}</p>
                                </div>
                            </div>

                            <div className="flex items-start">
                                <i className="fas fa-clock text-[#FF7E45] mt-1 mr-3"></i>
                                <div>
                                    <p className="font-semibold">9:00 AM - 10:30 AM</p>
                                    <p className="text-gray-300 text-sm">Eastern Time</p>
                                </div>
                            </div>

                            <div className="flex items-start">
                                <i className="fas fa-user text-[#FF7E45] mt-1 mr-3"></i>
                                <div>
                                    <p className="font-semibold">{liveStatus?.currentSpeaker || 'Pastor Michael Johnson'}</p>
                                    <p className="text-gray-300 text-sm">"{liveStatus?.currentTopic || 'Finding Rest in a Restless World'}"</p>
                                </div>
                            </div>
                        </div>

                        <div className="mt-6 space-y-3">
                            <button className="btn bg-[#FF7E45] hover:bg-[#FFA76A] text-white w-full flex items-center justify-center">
                                <i className="fas fa-bell mr-2"></i>
                                Set Reminder
                            </button>

                            <button className="btn bg-gray-700 hover:bg-gray-600 text-white w-full flex items-center justify-center">
                                <i className="fas fa-share-alt mr-2"></i>
                                Share Stream
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
);

// Component for Sermon Card
const SermonCard = ({ sermon, isAdmin, isFavorite, onEdit, onDelete, onFavorite, onPlay, isAuthenticated, formatDate }) => {
    const sermonId = sermon._id || sermon.id;

    return (
        <div className="sermon-card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
            <div className="relative cursor-pointer" onClick={() => onPlay(sermon)}>
                <img src={sermon.imageUrl} alt={sermon.title} className="w-full h-48 object-cover" />
                <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                    <div className="w-16 h-16 bg-[#FF7E45] text-white rounded-full flex items-center justify-center">
                        <i className="fas fa-play text-2xl"></i>
                    </div>
                </div>
                {isAdmin && (
                    <div className="absolute top-2 right-2 flex space-x-1">
                        <button
                            onClick={(e) => {
                                e.stopPropagation();
                                onEdit(sermon);
                            }}
                            className="bg-blue-500 text-white p-1 rounded"
                        >
                            <i className="fas fa-edit text-sm"></i>
                        </button>
                        <button
                            onClick={(e) => {
                                e.stopPropagation();
                                onDelete(sermonId);
                            }}
                            className="bg-red-500 text-white p-1 rounded"
                        >
                            <i className="fas fa-trash text-sm"></i>
                        </button>
                    </div>
                )}
            </div>
            <div className="p-4">
                <div className="flex justify-between items-start">
                    <div>
                        <div className="text-sm text-gray-500 mb-2">{formatDate(sermon.date)}</div>
                        <h3 className="text-xl font-bold mb-2">{sermon.title}</h3>
                        <p className="text-gray-600">{sermon.speaker}</p>
                    </div>
                    {isAuthenticated && (
                        <button
                            onClick={(e) => {
                                e.stopPropagation();
                                onFavorite(sermonId);
                            }}
                            className={`transition-colors ${isFavorite ? "text-[#FF7E45]" : "text-gray-400 hover:text-[#FF7E45]"
                                }`}
                        >
                            <i className={`${isFavorite ? "fas" : "far"} fa-heart`}></i>
                        </button>
                    )}
                </div>
                <div className="mt-3 flex items-center text-sm text-gray-500">
                    <span className="mr-3"><i className="fas fa-eye mr-1"></i> {sermon.views || 0}</span>
                    <span><i className="fas fa-clock mr-1"></i> {sermon.duration || '45:00'}</span>
                </div>
            </div>
        </div>
    );
};

// Component for Sermon Modal
const SermonModal = ({ sermon, isFavorite, onClose, onFavorite, isAuthenticated, formatDate }) => {
    const sermonId = sermon._id || sermon.id;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                <div className="relative">
                    <div className="aspect-w-16 aspect-h-9">
                        <iframe
                            src={sermon.videoUrl}
                            className="w-full h-64 md:h-96"
                            frameBorder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowFullScreen
                            title={sermon.title}
                        />
                    </div>
                    <button onClick={onClose} className="absolute top-4 right-4 bg-black bg-opacity-50 text-white w-10 h-10 rounded-full flex items-center justify-center hover:bg-opacity-70">
                        <i className="fas fa-times"></i>
                    </button>
                </div>

                <div className="p-6">
                    <div className="flex justify-between items-start mb-4">
                        <div>
                            <h3 className="text-2xl font-bold">{sermon.title}</h3>
                            <p className="text-gray-600">{sermon.speaker} • {formatDate(sermon.date)}</p>
                        </div>
                        {isAuthenticated && (
                            <button
                                onClick={() => onFavorite(sermonId)}
                                className={`flex items-center ${isFavorite ? "text-[#FF7E45]" : "text-gray-400 hover:text-[#FF7E45]"
                                    }`}
                            >
                                <i className={`${isFavorite ? "fas" : "far"} fa-heart mr-1`}></i>
                                {isFavorite ? 'Remove from' : 'Add to'} Favorites
                            </button>
                        )}
                    </div>

                    <p className="text-gray-700 mb-6">{sermon.description}</p>

                    <div className="flex flex-wrap gap-3 mb-6">
                        <span className="bg-gray-100 text-gray-800 text-sm font-medium px-3 py-1 rounded capitalize">{sermon.category}</span>
                        <span className="bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded">
                            <i className="fas fa-eye mr-1"></i> {sermon.views || 0} views
                        </span>
                        <span className="bg-green-100 text-green-800 text-sm font-medium px-3 py-1 rounded">
                            <i className="fas fa-thumbs-up mr-1"></i> {sermon.likes || 0} likes
                        </span>
                    </div>

                    <div className="flex flex-wrap gap-4">
                        <button className="btn bg-[#333] text-white hover:bg-gray-700 transition-colors">
                            <i className="fas fa-download mr-2"></i> Download Audio
                        </button>
                        <button className="btn bg-[#FF7E45] text-white hover:bg-[#FFA76A] transition-colors">
                            <i className="fas fa-share-alt mr-2"></i> Share
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

// Component for Edit Sermon Modal
const EditSermonModal = ({ editForm, setEditForm, onClose, onSubmit, categories }) => (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">
                    {editForm._id ? 'Edit Sermon' : 'Add New Sermon'}
                </h2>

                <form onSubmit={onSubmit}>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div>
                            <label className="block text-sm font-medium mb-2">Title *</label>
                            <input
                                type="text"
                                value={editForm.title}
                                onChange={(e) => setEditForm({ ...editForm, title: e.target.value })}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                                required
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Speaker *</label>
                            <input
                                type="text"
                                value={editForm.speaker}
                                onChange={(e) => setEditForm({ ...editForm, speaker: e.target.value })}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                                required
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Category *</label>
                            <select
                                value={editForm.category}
                                onChange={(e) => setEditForm({ ...editForm, category: e.target.value })}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                            >
                                {categories.map(category => (
                                    <option key={category} value={category}>
                                        {category.charAt(0).toUpperCase() + category.slice(1)}
                                    </option>
                                ))}
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium mb-2">Image URL *</label>
                            <input
                                type="url"
                                value={editForm.imageUrl}
                                onChange={(e) => setEditForm({ ...editForm, imageUrl: e.target.value })}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                                required
                            />
                        </div>
                    </div>

                    <div className="mb-6">
                        <label className="block text-sm font-medium mb-2">Description *</label>
                        <textarea
                            value={editForm.description}
                            onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}
                            rows="3"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                            required
                        />
                    </div>

                    <div className="mb-6">
                        <label className="block text-sm font-medium mb-2">Video URL *</label>
                        <input
                            type="url"
                            value={editForm.videoUrl}
                            onChange={(e) => setEditForm({ ...editForm, videoUrl: e.target.value })}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FF7E45]"
                            required
                            placeholder="https://www.youtube.com/embed/..."
                        />
                    </div>

                    <div className="flex justify-end space-x-3">
                        <button
                            type="button"
                            onClick={onClose}
                            className="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            className="px-6 py-2 bg-[#FF7E45] text-white rounded-lg hover:bg-[#FFA76A] transition-colors"
                        >
                            {editForm._id ? 'Update' : 'Create'} Sermon
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
);

export default SermonsPage;
)sermonpage.jsx,
(
import { useState, useEffect } from "react";
import { testimonialService } from '../services/apiService';
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';
import { Testimonial } from '../models/Testimonial';
import useAuth from '../hooks/useAuth';

const TestimonialsPage = () => {
  const { user } = useAuth();
  const alert = useAlert();
  const [showSubmitForm, setShowSubmitForm] = useState(false);
  const [testimonials, setTestimonials] = useState([]);
  const [videoTestimonials, setVideoTestimonials] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [submissionSuccess, setSubmissionSuccess] = useState(false);
  const [categories, setCategories] = useState([]);
  const [testimonialStats, setTestimonialStats] = useState(null);

  const isAdmin = user?.role === "admin";

  useEffect(() => {
    document.title = "SMC: - Testimonies | St. Micheal`s & All Angels Church | Ifite-Awka";

    const fetchData = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // Fetch public data in parallel
        const [testimonialsResponse, videosResponse, categoriesResponse] = await Promise.allSettled([
          testimonialService.getAll(),
          testimonialService.getVideos(),
          testimonialService.getCategories()
        ]);

        // Handle testimonials response
        if (testimonialsResponse.status === 'fulfilled' && testimonialsResponse.value.data) {
          const testimonialsData = testimonialsResponse.value.data.testimonials || testimonialsResponse.value.data;
          setTestimonials(Array.isArray(testimonialsData) ? testimonialsData.map(t => new Testimonial(t)) : []);
        } else {
          console.error('Failed to fetch testimonials:', testimonialsResponse.reason);
          setTestimonials([]);
        }

        // Handle videos response
        if (videosResponse.status === 'fulfilled' && videosResponse.value.data) {
          setVideoTestimonials(Array.isArray(videosResponse.value.data) ? videosResponse.value.data : []);
        } else {
          console.error('Failed to fetch video testimonials:', videosResponse.reason);
          setVideoTestimonials([]);
        }

        // Handle categories response
        if (categoriesResponse.status === 'fulfilled' && categoriesResponse.value.data) {
          setCategories(Array.isArray(categoriesResponse.value.data) ? categoriesResponse.value.data : []);
        } else {
          console.error('Failed to fetch categories:', categoriesResponse.reason);
          setCategories([]);
        }

        // Fetch admin data if user is admin
        if (isAdmin) {
          try {
            const [allResponse, statsResponse] = await Promise.allSettled([
              testimonialService.getAllAdmin(),
              testimonialService.getStats()
            ]);

            if (allResponse.status === 'fulfilled') {
              console.log('All testimonials:', allResponse.value.data);
            }

            if (statsResponse.status === 'fulfilled' && statsResponse.value.data) {
              setTestimonialStats(statsResponse.value.data);
            }
          } catch (adminError) {
            console.error('Error fetching admin data:', adminError);
          }
        }

      } catch (error) {
        console.error('Error in fetchData:', error);
        const errorMsg = error.response?.data?.message || "Failed to load testimonials. Please try again later.";
        setError(errorMsg);
        alert.error(errorMsg);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [isAdmin, alert]);

  // ✅ Refetch function for after submissions/updates
  const refetchTestimonials = async () => {
    try {
      const response = await testimonialService.getAll();
      if (response.data) {
        const testimonialsData = response.data.testimonials || response.data;
        setTestimonials(Array.isArray(testimonialsData) ? testimonialsData.map(t => new Testimonial(t)) : []);
      }
    } catch (error) {
      console.error('Error refetching testimonials:', error);
    }
  };

  // ✅ Submit testimonial
  const handleSubmitTestimonial = async (formData) => {
    try {
      setError(null);
      const response = await testimonialService.submit(formData);
      
      if (response.status === 201 || response.data) {
        setSubmissionSuccess(true);
        setShowSubmitForm(false);
        await refetchTestimonials();
        alert.success(response.data?.message || 'Testimonial submitted successfully!');
      }
    } catch (error) {
      console.error('Error submitting testimonial:', error);
      const errorMsg = error.response?.data?.message || "Failed to submit testimonial. Please try again.";
      setError(errorMsg);
      alert.error(errorMsg);
    }
  };

  // ✅ Admin update testimonial
  const handleUpdateTestimonial = async (testimonialId, updates) => {
    try {
      const response = await testimonialService.update(testimonialId, updates);
      alert.success(response.data?.message || 'Testimonial updated successfully');
      await refetchTestimonials();
    } catch (error) {
      console.error('Error updating testimonial:', error);
      alert.error(error.response?.data?.message || 'Failed to update testimonial');
    }
  };

  // ✅ Admin delete testimonial
  const handleDeleteTestimonial = async (testimonialId) => {
    try {
      const response = await testimonialService.delete(testimonialId);
      alert.success(response.data?.message || 'Testimonial deleted successfully');
      await refetchTestimonials();
    } catch (error) {
      console.error('Error deleting testimonial:', error);
      alert.error(error.response?.data?.message || 'Failed to delete testimonial');
    }
  };

  const handleVideoPlay = (video) => {
    console.log('Playing video:', video);
    alert.info('Video playback feature would open here');
  };

  if (isLoading) {
    return <Loader type="spinner" text="Loading testimonials..." />;
  }

  return (
    <div className="page">
      {/* Header */}
      <section className="bg-gradient-to-r from-[#FF7E45] to-[#F4B942] py-12 px-4">
        <div className="container mx-auto text-center text-white">
          <h1 className="text-4xl font-bold mb-4">Testimonials</h1>
          <p className="text-xl max-w-2xl mx-auto">
            Stories of how God is working in the lives of our church family
          </p>

          {/* ✅ Admin Controls */}
          {isAdmin && testimonialStats && (
            <div className="mt-6 space-x-4">
              <div className="bg-white text-[#FF7E45] px-6 py-2 rounded-lg font-semibold inline-block">
                Stats: {testimonialStats.totalTestimonials} Total, {testimonialStats.approvedTestimonials} Approved
              </div>
              {testimonials.length > 0 && (
                <>
                  <button
                    onClick={() => handleUpdateTestimonial(testimonials[0].id, { status: 'approved' })}
                    className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                  >
                    Approve First
                  </button>
                  <button
                    onClick={() => handleDeleteTestimonial(testimonials[0].id)}
                    className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
                  >
                    Delete First
                  </button>
                </>
              )}
            </div>
          )}
        </div>
      </section>

      {/* Error Message */}
      {error && (
        <div className="container mx-auto px-4 py-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-600">{error}</p>
            <button 
              onClick={() => window.location.reload()} 
              className="text-blue-600 underline mt-2"
            >
              Try Again
            </button>
          </div>
        </div>
      )}

      {/* Success Message */}
      {submissionSuccess && (
        <div className="container mx-auto px-4 py-4">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <p className="text-green-600">
              <i className="fas fa-check-circle mr-2"></i>
              Thank you for sharing your story! Your testimonial will be reviewed before publishing.
            </p>
          </div>
        </div>
      )}

      {/* Featured Testimonials */}
      <section className="py-12">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold mb-2">What People Are Saying</h2>
            <p className="text-gray-600">Real stories from real people in our community</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {testimonials.map((testimonial) => (
              <TestimonialCard key={testimonial.id} testimonial={testimonial} />
            ))}
          </div>

          {testimonials.length === 0 && !isLoading && (
            <div className="text-center py-12">
              <i className="fas fa-comments text-4xl text-gray-400 mb-4"></i>
              <p className="text-gray-600">No testimonials yet. Be the first to share your story!</p>
            </div>
          )}
        </div>
      </section>

      {/* Video Testimonials */}
      <VideoTestimonialsSection videos={videoTestimonials} onVideoPlay={handleVideoPlay} />

      {/* Share Your Story CTA */}
      <ShareStorySection onSubmit={() => setShowSubmitForm(true)} />

      {/* Submission Form */}
      {showSubmitForm && (
        <TestimonialFormModal
          onClose={() => {
            setShowSubmitForm(false);
            setError(null);
            setSubmissionSuccess(false);
          }}
          onSubmit={handleSubmitTestimonial}
          error={error}
          categories={categories}
        />
      )}
    </div>
  );
};

// Testimonial Card Component
const TestimonialCard = ({ testimonial }) => (
  <div className="testimonial-card bg-white rounded-lg shadow-md p-6 flex flex-col h-full hover:shadow-lg transition-shadow">
    <div className="mb-4 text-[#FF7E45]">
      <i className="fas fa-quote-left text-3xl"></i>
    </div>
    <p className="flex-grow text-gray-700 italic mb-6">
      {testimonial.content}
    </p>
    <div className="flex items-center mt-auto">
      <img
        src={testimonial.imageUrl || 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'}
        alt={testimonial.name}
        className="w-12 h-12 rounded-full object-cover mr-4"
        onError={(e) => {
          e.target.src = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png';
        }}
      />
      <div>
        <h4 className="font-semibold">{testimonial.name}</h4>
        <p className="text-sm text-gray-600">
          {testimonial.relationship}
        </p>
      </div>
    </div>
  </div>
);

// Video Testimonials Section Component
const VideoTestimonialsSection = ({ videos, onVideoPlay }) => (
  <section className="py-12 bg-gray-50">
    <div className="container mx-auto px-4">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold mb-2">Video Stories</h2>
        <p className="text-gray-600">
          Watch video testimonials from our church family
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {videos.map((video) => (
          <div key={video._id} className="bg-white rounded-lg shadow-md overflow-hidden">
            <div className="relative cursor-pointer" onClick={() => onVideoPlay(video)}>
              <div className="w-full h-0 pb-[56.25%] relative bg-gray-200">
                <img
                  src={video.thumbnail || 'https://via.placeholder.com/300x169'}
                  alt={video.title}
                  className="absolute inset-0 w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
                  <div className="w-16 h-16 bg-[#FF7E45] text-white rounded-full flex items-center justify-center">
                    <i className="fas fa-play text-2xl"></i>
                  </div>
                </div>
                {video.duration && (
                  <div className="absolute bottom-2 right-2 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded">
                    {video.duration}
                  </div>
                )}
              </div>
            </div>
            <div className="p-4">
              <h3 className="font-bold text-lg mb-1">
                {video.title}
              </h3>
              <p className="text-sm text-gray-600">
                {video.description}
              </p>
            </div>
          </div>
        ))}
      </div>

      {videos.length === 0 && (
        <div className="text-center py-12">
          <i className="fas fa-video text-4xl text-gray-400 mb-4"></i>
          <p className="text-gray-600">No video testimonials available yet.</p>
        </div>
      )}
    </div>
  </section>
);

// Share Story Section Component
const ShareStorySection = ({ onSubmit }) => (
  <section className="py-12">
    <div className="container mx-auto px-4 text-center border-t border-gray-200 pt-12">
      <h2 className="text-3xl font-bold mb-4">Share Your Story</h2>
      <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
        Has God worked in your life through our church? We'd love to hear about it!
      </p>
      <button
        onClick={onSubmit}
        className="btn btn-primary px-6 py-3 bg-[#FF7E45] text-white rounded-lg font-semibold hover:bg-[#FF7E45]/90 transition-colors flex items-center justify-center mx-auto"
      >
        Submit Your Testimonial
      </button>
    </div>
  </section>
);

// Testimonial Form Modal Component
const TestimonialFormModal = ({ onClose, onSubmit, error, categories }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    relationship: 'member',
    content: '',
    category: 'other',
    image: null,
    allowSharing: false,
    allowContact: false,
    yearsInChurch: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();

    // Create FormData object for file upload
    const submitData = new FormData();
    Object.keys(formData).forEach(key => {
      if (formData[key] !== null && formData[key] !== undefined) {
        submitData.append(key, formData[key]);
      }
    });

    onSubmit(submitData);
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData({ ...formData, image: file });
    }
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-2xl font-bold">Share Your Story</h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600"
            >
              <i className="fas fa-times"></i>
            </button>
          </div>

          {error && (
            <div className="mb-4 bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-red-600 text-sm">{error}</p>
            </div>
          )}

          <form onSubmit={handleSubmit} encType="multipart/form-data">
            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2">
                Your Name *
              </label>
              <input
                type="text"
                name="name"
                className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
                value={formData.name}
                onChange={handleInputChange}
                required
              />
            </div>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2">
                Email Address *
              </label>
              <input
                type="email"
                name="email"
                className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
                value={formData.email}
                onChange={handleInputChange}
                required
              />
            </div>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2">
                Your Relationship to the Church
              </label>
              <select
                name="relationship"
                className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
                value={formData.relationship}
                onChange={handleInputChange}
              >
                <option value="member">Member</option>
                <option value="visitor">Visitor</option>
                <option value="volunteer">Volunteer</option>
                <option value="staff">Staff</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2">
                Years in Church
              </label>
              <input
                type="number"
                name="yearsInChurch"
                className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
                value={formData.yearsInChurch}
                onChange={handleInputChange}
                min="0"
              />
            </div>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2">
                Category
              </label>
              <select
                name="category"
                className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
                value={formData.category}
                onChange={handleInputChange}
              >
                <option value="salvation">Salvation</option>
                <option value="healing">Healing</option>
                <option value="provision">Provision</option>
                <option value="relationship">Relationship</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div className="mb-6">
              <label className="block text-gray-700 font-medium mb-2">
                Your Story *
              </label>
              <textarea
                name="content"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent"
                rows="5"
                placeholder="Share how God has worked in your life through our church..."
                value={formData.content}
                onChange={handleInputChange}
                required
              ></textarea>
            </div>

            <div className="mb-6">
              <label className="block text-gray-700 font-medium mb-2">
                Photo (Optional)
              </label>
              <div className="border border-dashed border-gray-300 rounded-md py-4 px-6 text-center cursor-pointer">
                <i className="fas fa-cloud-upload-alt text-2xl text-gray-400 mb-2"></i>
                <p className="text-sm text-gray-500">
                  Click to upload a photo or drag and drop
                </p>
                <input
                  type="file"
                  className="hidden"
                  id="testimonial-photo"
                  accept="image/*"
                  onChange={handleImageChange}
                  name="image"
                />
                <label htmlFor="testimonial-photo" className="cursor-pointer">
                  {formData.image ? formData.image.name : 'Choose file'}
                </label>
              </div>
            </div>

            <div className="flex items-start mb-4">
              <input
                type="checkbox"
                name="allowSharing"
                className="mt-1 mr-2 text-[#FF7E45]"
                id="permission"
                checked={formData.allowSharing}
                onChange={handleInputChange}
                required
              />
              <label
                htmlFor="permission"
                className="text-sm text-gray-600"
              >
                I give permission for the church to share my story on their website and social media.
              </label>
            </div>

            <div className="flex items-start mb-6">
              <input
                type="checkbox"
                name="allowContact"
                className="mt-1 mr-2 text-[#FF7E45]"
                id="contact"
                checked={formData.allowContact}
                onChange={handleInputChange}
              />
              <label
                htmlFor="contact"
                className="text-sm text-gray-600"
              >
                I allow the church to contact me for more information about my story.
              </label>
            </div>

            <div className="flex justify-end">
              <button
                type="button"
                onClick={onClose}
                className="bg-gray-200 p-2 border border-gray-300 rounded-md text-gray-800 hover:bg-gray-300 mr-3"
              >
                Cancel
              </button>
              <button type="submit" className="p-2 border border-transparent rounded-md text-white bg-[#FF7E45] hover:bg-[#FF7E45]/80">
                Submit Story
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default TestimonialsPage;
)testimonialpage.jsx,
(
import { useState, useEffect, useCallback } from "react";
import { apiClient } from '../utils/api';
import { authService, donationService, volunteerService } from '../services/apiService';
import Loader from '../components/Loader';
import { useAlert } from "../utils/Alert";
import useAuth from "../hooks/useAuth";

const UserPage = () => {
  const { user, isLoading: authLoading } = useAuth();
  const [userData, setUserData] = useState(null);
  const [recentDonations, setRecentDonations] = useState([]);
  const [upcomingEvents, setUpcomingEvents] = useState([]);
  const [volunteerApplications, setVolunteerApplications] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  const alert = useAlert();

  const fetchDashboardData = useCallback(async () => {
    if (!user || !user.id) {
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      // Fetch user data
      const userResponse = await authService.getCurrentUser();
      const userData = userResponse.data || userResponse;
      setUserData(userData);

      // Fetch dashboard-specific data
      const [
        donationsResponse,
        eventsResponse,
        volunteersResponse
      ] = await Promise.allSettled([
        donationService.getUserDonations({ limit: 3 }),
        apiClient.get('/user/upcoming-events'),
        volunteerService.getUserApplications()
      ]);

      if (donationsResponse.status === 'fulfilled') {
        const donations = donationsResponse.value.donations || donationsResponse.value.data || [];
        setRecentDonations(donations.slice(0, 3));
      }

      if (eventsResponse.status === 'fulfilled') {
        setUpcomingEvents(eventsResponse.value.events || eventsResponse.value.data || []);
      }

      if (volunteersResponse.status === 'fulfilled') {
        setVolunteerApplications(volunteersResponse.value || []);
      }
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
      if (!error.response || error.response.status !== 401) {
        setError('Failed to load dashboard data. Please try again.');
        alert('Failed to load dashboard data. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  }, [user, alert]);

  useEffect(() => {
    document.title = "SMC: - Dashboard | St. Michael's & All Angels Church | Ifite-Awka";
    fetchDashboardData();
  }, [fetchDashboardData]);

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getVolunteerStatusBadge = (status) => {
    const statusColors = {
      pending: 'bg-yellow-100 text-yellow-800',
      approved: 'bg-blue-100 text-blue-800',
      active: 'bg-green-100 text-green-800',
      rejected: 'bg-red-100 text-red-800',
      inactive: 'bg-gray-100 text-gray-800'
    };
    
    return (
      <span className={`px-2 py-1 rounded-full text-xs ${statusColors[status] || 'bg-gray-100 text-gray-800'}`}>
        {status?.charAt(0).toUpperCase() + status?.slice(1)}
      </span>
    );
  };

  // Show loading while auth is being checked
  if (authLoading) {
    return <Loader type="spinner" text="Checking authentication..." />;
  }

  // Show login prompt if user is not authenticated
  if (!user || !user.id) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-md mx-auto text-center">
            <div className="bg-white rounded-lg shadow-md p-8">
              <h2 className="text-2xl font-bold mb-4">Please Log In</h2>
              <p className="text-gray-600 mb-6">You need to be logged in to view your dashboard.</p>
              <a href="/login" className="btn btn-primary">Log In</a>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return <Loader type="spinner" text="Loading your dashboard..." />;
  }

  const currentUser = userData || user;
  const userRole = currentUser.role || 'user';

  return (
    <div className="page">
      <div className="container mx-auto px-4 py-8">
        {/* Error Message */}
        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center">
              <i className="fas fa-exclamation-triangle text-red-500 mr-2"></i>
              <p className="text-red-600">{error}</p>
            </div>
            <button 
              onClick={() => setError(null)}
              className="mt-2 text-red-600 text-sm hover:text-red-800"
            >
              Dismiss
            </button>
          </div>
        )}

        {/* Welcome Section */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <h1 className="text-2xl font-bold mb-2">Welcome back, {currentUser?.firstName || currentUser?.name || 'User'}!</h1>
          <p className="text-gray-600">
            {userRole === 'admin' ? 'Administrator Dashboard' : 
             userRole === 'moderator' ? 'Moderator Dashboard' : 
             'Member Dashboard'}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* Quick Stats */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-lg font-bold mb-4">Quick Stats</h2>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Upcoming Events</span>
                <span className="font-bold">{upcomingEvents.length}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Recent Donations</span>
                <span className="font-bold">{recentDonations.length}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Volunteer Applications</span>
                <span className="font-bold">{volunteerApplications.length}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Member Since</span>
                <span className="font-bold">
                  {currentUser?.memberSince ? new Date(currentUser.memberSince).getFullYear() : 'N/A'}
                </span>
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-lg font-bold mb-4">Quick Actions</h2>
            <div className="space-y-3">
              <a href={`/profile/${user.id}`} className="block btn btn-outline w-full text-center">
                <i className="fas fa-user mr-2"></i>Edit Profile
              </a>
              <a href="/events" className="block btn btn-outline w-full text-center">
                <i className="fas fa-calendar mr-2"></i>View Events
              </a>
              <a href="/ministries" className="block btn btn-outline w-full text-center">
                <i className="fas fa-hands-helping mr-2"></i>Volunteer
              </a>
              <a href="/donate" className="block btn btn-primary w-full text-center">
                <i className="fas fa-donate mr-2"></i>Make a Donation
              </a>
              
              {/* Admin/Moderator specific actions */}
              {(userRole === 'admin' || userRole === 'moderator') && (
                <a href={`/admin/${user.id}/dashboard`} className="block btn btn-outline w-full text-center bg-blue-50 border-blue-200">
                  <i className="fas fa-cog mr-2"></i>Admin Panel
                </a>
              )}
            </div>
          </div>

          {/* Recent Activity */}
          <div className="bg-white rounded-lg shadow-md p-6 md:col-span-2 lg:col-span-1">
            <h2 className="text-lg font-bold mb-4">Recent Activity</h2>
            {recentDonations.length > 0 ? (
              <div className="space-y-3">
                {recentDonations.map((donation) => (
                  <div key={donation.id || donation._id} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                    <div>
                      <p className="font-medium">Donation</p>
                      <p className="text-sm text-gray-600">{formatDate(donation.date || donation.createdAt)}</p>
                    </div>
                    <span className="font-bold text-green-600">{formatCurrency(donation.amount)}</span>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-600 text-center py-4">No recent activity</p>
            )}
          </div>
        </div>

        {/* Volunteer Applications */}
        {volunteerApplications.length > 0 && (
          <div className="bg-white rounded-lg shadow-md p-6 mt-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold">Your Volunteer Applications</h2>
              <a href="/ministries" className="text-[#FF7E45] hover:text-[#F4B942] text-sm">
                View Ministries
              </a>
            </div>
            
            <div className="space-y-3">
              {volunteerApplications.slice(0, 3).map((application) => (
                <div key={application._id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <p className="font-medium">{application.ministryId?.name || 'Ministry'}</p>
                    <p className="text-sm text-gray-600">
                      Applied: {formatDate(application.createdAt)}
                    </p>
                  </div>
                  <div className="ml-4">
                    {getVolunteerStatusBadge(application.status)}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Upcoming Events */}
        <div className="bg-white rounded-lg shadow-md p-6 mt-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold">Upcoming Events</h2>
            <a href={`/my-rsvps/${user.id}`} className="text-[#FF7E45] hover:text-[#F4B942] text-sm">
              View All
            </a>
          </div>
          
          {upcomingEvents.length > 0 ? (
            <div className="space-y-3">
              {upcomingEvents.slice(0, 3).map((event) => (
                <div key={event.id || event._id} className="flex items-center p-3 bg-gray-50 rounded-lg">
                  <div className="flex-shrink-0 w-12 h-12 bg-[#FF7E45] rounded-lg flex items-center justify-center text-white font-bold mr-3">
                    {new Date(event.date || event.startTime).getDate()}
                  </div>
                  <div className="flex-1">
                    <p className="font-medium">{event.title}</p>
                    <p className="text-sm text-gray-600">
                      {formatDate(event.date || event.startTime)} • {event.location || 'TBA'}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-6">
              <i className="fas fa-calendar-plus text-3xl text-gray-300 mb-3"></i>
              <p className="text-gray-600 mb-4">No upcoming events</p>
              <a href="/events" className="btn btn-outline">
                Browse Events
              </a>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default UserPage;
)userpage.jsx,
(
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { apiClient } from '../utils/api';
import Loader from '../components/Loader';
import { useAlert } from '../utils/Alert';

const VerifyEmail = () => {
  const { token } = useParams();
  const navigate = useNavigate();
  const alert = useAlert();
  const hasVerified = useRef(false); // Prevent duplicate verification

  const [status, setStatus] = useState('verifying');
  const [isLoading, setIsLoading] = useState(true);
  const [countdown, setCountdown] = useState(5);
  const [userEmail, setUserEmail] = useState('');

  useEffect(() => {
    document.title = "SMC: - Verify-Email | St. Micheal`s & All Angels Church | Ifite-Awka";

    // Get email from localStorage
    const storedEmail = localStorage.getItem('pendingVerificationEmail');
    if (storedEmail) {
      setUserEmail(storedEmail);
    }
    
    if (!token) {
      setStatus('error');
      setIsLoading(false);
      alert.error('Invalid verification link. Please check your email for the correct link.');
      return;
    }

    console.log('Token from URL params:', token);
    
    // Prevent duplicate verification
    if (!hasVerified.current) {
      hasVerified.current = true;
      verifyEmailToken();
    }
  }, [token, alert]);

  useEffect(() => {
    if (status === 'success' && countdown > 0) {
      const timer = setTimeout(() => {
        setCountdown(countdown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (status === 'success' && countdown === 0) {
      localStorage.removeItem('pendingVerificationEmail');
      navigate('/login', {
        state: { message: 'Email verified successfully! You can now log in.' }
      });
    }
  }, [status, countdown, navigate]);

  const verifyEmailToken = async () => {
    try {
      setIsLoading(true);
      console.log('Verifying token:', token);

      const response = await apiClient.get(`/auth/verify-email/${token}`);
      console.log('Full verification response:', response);

      // FIX: Handle both response structures
      const success = response?.data?.success || response?.success;
      const message = response?.data?.message || response?.message;

      if (success) {
        setStatus('success');
        alert.success('Email verified successfully! You can now log in to your account.');
        localStorage.removeItem('pendingVerificationEmail');
      } else {
        setStatus('error');
        alert.error(message || 'Email verification failed. Please try again.');
      }
    } catch (error) {
      console.error('Email verification error:', error);
      
      // FIX: Correct error response structure - handle both formats
      const errorData = error.response?.data || error.response;
      const errorMessage = errorData?.message || error.message;

      if (error.response?.status === 400) {
        if (errorMessage?.includes('expired') || errorMessage?.includes('Expired')) {
          setStatus('expired');
          alert.info('Your verification link has expired. Please request a new one.');
        } else if (errorMessage?.includes('invalid') || errorMessage?.includes('Invalid')) {
          setStatus('error');
          alert.error('Invalid verification token. Please check your email for the correct link.');
        } else {
          setStatus('error');
          alert.error(errorMessage || 'Verification failed. Please try again.');
        }
      } else if (error.response?.status === 404) {
        setStatus('error');
        alert.error('Verification link not found. Please request a new verification email.');
      } else if (error.response?.status === 429) {
        setStatus('error');
        alert.error('Verification already in progress. Please wait a moment.');
      } else if (error.response?.status === 500) {
        setStatus('error');
        alert.error('Server error during verification. Please try again later.');
      } else {
        setStatus('error');
        alert.error('Email verification failed. Please try again later.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const resendVerificationEmail = async () => {
    try {
      setIsLoading(true);
      if (!userEmail) {
        alert.error('Email address is required to resend verification.');
        return;
      }

      const response = await apiClient.post('/auth/resend-verification', { email: userEmail });
      
      // FIX: Handle both response structures
      const success = response?.data?.success || response?.success;
      const message = response?.data?.message || response?.message;

      if (success) {
        alert.success('Verification email sent! Please check your inbox.');
      } else {
        alert.error(message || 'Failed to send verification email. Please try again.');
      }
    } catch (error) {
      console.error('Resend verification error:', error);
      
      // FIX: Correct error response structure
      const errorData = error.response?.data || error.response;
      const errorMsg = errorData?.message || 'Failed to send verification email. Please try again later.';
      
      alert.error(errorMsg);
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoToLogin = () => {
    localStorage.removeItem('pendingVerificationEmail');
    navigate('/login', {
      state: { message: 'Email verification completed' }
    });
  };

  const handleGoToHome = () => {
    localStorage.removeItem('pendingVerificationEmail');
    navigate('/');
  };

  if (isLoading) {
    return (
      <div className="page">
        <div className="container mx-auto px-4 py-12">
          <div className="max-w-md mx-auto text-center">
            <Loader type="spinner" text="Verifying your email..." />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="page">
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-md mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="w-20 h-20 mx-auto mb-4 flex items-center justify-center">
              {status === 'success' ? (
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
                  <i className="fas fa-check text-green-500 text-3xl"></i>
                </div>
              ) : status === 'error' ? (
                <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
                  <i className="fas fa-times text-red-500 text-3xl"></i>
                </div>
              ) : status === 'expired' ? (
                <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center">
                  <i className="fas fa-clock text-yellow-500 text-3xl"></i>
                </div>
              ) : (
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
                  <i className="fas fa-envelope text-blue-500 text-3xl"></i>
                </div>
              )}
            </div>

            <h1 className="text-3xl font-bold mb-2">
              {status === 'success' && 'Email Verified!'}
              {status === 'error' && 'Verification Failed'}
              {status === 'expired' && 'Link Expired'}
            </h1>

            <p className="text-gray-600">
              {status === 'success' && 'Your email has been successfully verified.'}
              {status === 'error' && 'We couldn\'t verify your email address.'}
              {status === 'expired' && 'Your verification link has expired.'}
            </p>
          </div>

          {/* Content based on status */}
          <div className="bg-white rounded-lg shadow-md p-6">
            {status === 'success' && (
              <div className="text-center">
                <p className="mb-6">
                  Thank you for verifying your email address. You will be redirected to the login page in {countdown} seconds.
                </p>
                <div className="space-y-3">
                  <button
                    onClick={handleGoToLogin}
                    className="w-full bg-[#FF7E45] text-white py-2 px-4 rounded-md hover:bg-[#FFA76A] transition-colors"
                  >
                    Go to Login Now
                  </button>
                  <button
                    onClick={handleGoToHome}
                    className="w-full border border-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition-colors"
                  >
                    Go to Homepage
                  </button>
                </div>
              </div>
            )}

            {(status === 'error' || status === 'expired') && (
              <div className="text-center">
                <p className="mb-6">
                  {status === 'error'
                    ? 'There was a problem verifying your email address. This could be due to an invalid or malformed verification link.'
                    : 'Your verification link has expired. Verification links are valid for 24 hours. Please request a new verification email.'
                  }
                </p>
                <div className="space-y-3">
                  {userEmail && (
                    <button
                      onClick={resendVerificationEmail}
                      disabled={isLoading}
                      className="w-full bg-[#FF7E45] text-white py-2 px-4 rounded-md hover:bg-[#FFA76A] transition-colors disabled:opacity-50"
                    >
                      {isLoading ? 'Sending...' : 'Resend Verification Email'}
                    </button>
                  )}
                  <button
                    onClick={handleGoToLogin}
                    className="w-full border border-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition-colors"
                  >
                    Go to Login
                  </button>
                  <button
                    onClick={handleGoToHome}
                    className="w-full border border-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition-colors"
                  >
                    Go to Homepage
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Help section */}
          <div className="mt-6 text-center text-sm text-gray-600">
            <p>Need help? Contact our support team at <a href="mailto:support@church.org" className="text-[#FF7E45] hover:underline">support@church.org</a></p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VerifyEmail;
)verifyemailpage.jsx,
],
routes[
(
// routes/ProtectedRoute.jsx
import React from "react";
import { Navigate, useLocation } from "react-router-dom";
import { 
  isAuthenticated as checkAuth, 
  isAdmin as checkAdmin, 
  getStoredUser 
} from "../utils/auth";
import useAuth from "../hooks/useAuth";


const ProtectedRoute = ({
  children,
  requiredRole,
  requireAdmin = false,
  requireAuth = true,
  fallbackPath = "/login",
  unauthorizedPath = "/unauthorized",
}) => {
  const location = useLocation();
  const { user } = useAuth();
  const isUserAuthenticated = checkAuth();
  const isUserAdmin = checkAdmin();

  // Handle unauthenticated case
  if (!requireAuth) {
    return children;
  }
  if (!isUserAuthenticated) {
    return (
      <Navigate
        to={fallbackPath}
        replace
        state={{ from: location, message: "Please log in to access this page" }}
      />
    );
  }

  // Handle admin-only routes
  if (requireAdmin && !isUserAdmin) {
    return (
      <Navigate
        to={unauthorizedPath}
        replace
        state={{
          from: location,
          message: "Admin privileges required",
          required: "Administrator",
        }}
      />
    );
  }

  // Role-based check
  const storedUser = getStoredUser();
  const userRole = (user?.role || storedUser?.role || "user").toLowerCase();

  // Debug logging
  console.log("🔐 ProtectedRoute check:", {
    requiredRole,
    userRole,
    isUserAuthenticated,
    isUserAdmin,
  });

  if (requiredRole && userRole !== requiredRole.toLowerCase()) {
    return (
      <Navigate
        to={unauthorizedPath}
        replace
        state={{
          from: location,
          message: "Insufficient permissions",
          required: requiredRole,
          current: userRole,
        }}
      />
    );
  }

  // ✅ Passed all checks
  return children;
};

export default ProtectedRoute;

)protectedroutes.jsx
],
services[
(
// services/apiService.js
import { apiClient } from '../utils/api';
import { FRONTEND_ENDPOINTS, AUTH_ENDPOINTS, PAYMENT_ENDPOINTS } from '../constants/API';

// Ministry Service
export const ministryService = {
  // Public endpoints
  getAll: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.MINISTRIES),
  getVolunteerOpportunities: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.MINISTRIES_VOLUNTEER),
  getUserMinistries: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.MINISTRIES_USER),
  volunteer: (id, formData) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.MINISTRIES_VOLUNTEER_ACTION(id), formData),
  contactLeaders: (id, message) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.MINISTRIES_CONTACT(id), { message }),

  // Admin endpoints
  create: (ministryData) => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.MINISTRIES.CREATE, ministryData),
  update: (id, ministryData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.MINISTRIES.UPDATE(id), ministryData),
  delete: (id) => apiClient.delete(FRONTEND_ENDPOINTS.ADMIN.MINISTRIES.DELETE(id)),
  getVolunteers: (id) => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.MINISTRIES.VOLUNTEERS(id)),
  getStats: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.MINISTRIES.STATS),
  getCategories: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.MINISTRIES.CATEGORIES),
};

// Sermon Service
export const sermonService = {
  // Public endpoints
  getAll: (params = {}) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.SERMONS, { params }),
  getFeatured: (limit = 3) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.SERMONS_FEATURED, { params: { limit } }),
  getLiveStatus: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.SERMONS_LIVE),
  getCategories: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.SERMONS_CATEGORIES),
  getFavorites: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.SERMONS_FAVORITES),
  addFavorite: (sermonId) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.SERMONS_FAVORITE_ACTION(sermonId)),
  removeFavorite: (sermonId) => apiClient.delete(FRONTEND_ENDPOINTS.PUBLIC.SERMONS_FAVORITE_ACTION(sermonId)),

  // Admin endpoints
  create: (sermonData) => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.SERMONS.CREATE, sermonData),
  update: (id, sermonData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.SERMONS.UPDATE(id), sermonData),
  delete: (id) => apiClient.delete(FRONTEND_ENDPOINTS.ADMIN.SERMONS.DELETE(id)),
  getStats: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.SERMONS.STATS),
  startLive: () => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.SERMONS.LIVE_START),
  stopLive: () => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.SERMONS.LIVE_STOP),
};

// Event Service
export const eventService = {
  // Public endpoints
  getAll: (params = {}) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.EVENTS, { params }),
  getUpcoming: (limit = 3) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.EVENTS_UPCOMING, { params: { limit } }),
  getUserRsvps: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.USER_RSVPS),
  getUserFavorites: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.USER_FAVORITES),
  rsvp: (eventId) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.EVENT_RSVP(eventId)),
  cancelRsvp: (eventId) => apiClient.delete(FRONTEND_ENDPOINTS.PUBLIC.EVENT_RSVP(eventId)),
  addFavorite: (eventId) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.EVENT_FAVORITE(eventId)),
  removeFavorite: (eventId) => apiClient.delete(FRONTEND_ENDPOINTS.PUBLIC.EVENT_FAVORITE(eventId)),

  // Admin endpoints
  create: (eventData) => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.EVENTS.CREATE, eventData),
  update: (id, eventData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.EVENTS.UPDATE(id), eventData),
  delete: (id) => apiClient.delete(FRONTEND_ENDPOINTS.ADMIN.EVENTS.DELETE(id)),
};

// Testimonial Service
export const testimonialService = {
  getAll: (params = {}) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.TESTIMONIALS, { params }),
  getApproved: (limit = 6) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.TESTIMONIALS_APPROVED, { params: { limit } }),
  getVideos: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.TESTIMONIALS_VIDEOS),
  getCategories: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.TESTIMONIALS_CATEGORIES),
  submit: (testimonialData) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.TESTIMONIALS, testimonialData, {
    headers: { 'Content-Type': 'multipart/form-data' }
  }),

  // Admin endpoints
  getAllAdmin: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.TESTIMONIALS.ALL),
  create: (testimonialData) => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.TESTIMONIALS.CREATE, testimonialData, {
    headers: { 'Content-Type': 'multipart/form-data' }
  }),
  update: (id, testimonialData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.TESTIMONIALS.UPDATE(id), testimonialData, {
    headers: { 'Content-Type': 'multipart/form-data' }
  }),
  delete: (id) => apiClient.delete(FRONTEND_ENDPOINTS.ADMIN.TESTIMONIALS.DELETE(id)),
  getStats: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.TESTIMONIALS.STATS),
};

// Prayer Service
export const prayerService = {
  // Public endpoints
  getAll: (page = 1, limit = 10) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.PRAYERS, { params: { page, limit } }),
  getTeam: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.PRAYERS_TEAM),
  getMeetings: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.PRAYERS_MEETINGS),
  submit: (prayerData) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.PRAYERS, prayerData),
  prayForRequest: (prayerId) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.PRAYER_ACTION(prayerId)),

  // Admin endpoints
  update: (id, prayerData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.PRAYERS.UPDATE(id), prayerData),
  delete: (id) => apiClient.delete(FRONTEND_ENDPOINTS.ADMIN.PRAYERS.DELETE(id)),
  getAllAdmin: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.PRAYERS.ALL),
  getStats: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.PRAYERS.STATS),
};

// Blog Service
export const blogService = {
  // Public endpoints
  getAll: (params = {}) => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.BLOG, { params }),
  getCategories: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.BLOG_CATEGORIES),
  getFavorites: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.BLOG_FAVORITES),
  addFavorite: (postId) => apiClient.post(FRONTEND_ENDPOINTS.PUBLIC.BLOG_FAVORITE_ACTION(postId)),
  removeFavorite: (postId) => apiClient.delete(FRONTEND_ENDPOINTS.PUBLIC.BLOG_FAVORITE_ACTION(postId)),
  subscribeNewsletter: (email) => apiClient.post('/api/blog/newsletter/subscribe', { email }),

  // Admin endpoints
  create: (postData) => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.BLOG.CREATE, postData),
  update: (id, postData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.BLOG.UPDATE(id), postData),
  delete: (id) => apiClient.delete(FRONTEND_ENDPOINTS.ADMIN.BLOG.DELETE(id)),
  getAllAdmin: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.BLOG.ALL),
  getCategoriesAdmin: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.BLOG.CATEGORIES),
};

// Donation Service
export const donationService = {
  // Public endpoints
  getUserDonations: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.DONATIONS),
  createDonation: (donationData) => apiClient.post(PAYMENT_ENDPOINTS.CREATE_DONATION, donationData),
  createPaymentIntent: (intentData) => apiClient.post(PAYMENT_ENDPOINTS.CREATE_PAYMENT_INTENT, intentData) .then(response => {
        console.log("API Response:", response);
        return response.data; 
      }),
  confirmPayment: (confirmationData) => apiClient.post(PAYMENT_ENDPOINTS.CONFIRM_PAYMENT, confirmationData),
  downloadReceipt: (donationId) => apiClient.get(PAYMENT_ENDPOINTS.DONATIONS_RECEIPT(donationId), { responseType: 'blob' }),

  // Admin endpoints
  getAll: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.DONATIONS.BASE),
  update: (id, donationData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.DONATIONS.UPDATE(id), donationData),
  getStats: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.DONATIONS.STATS),
  getRecent: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.DONATIONS.RECENT),
  exportDonations: (format = 'csv') => apiClient.get(`${FRONTEND_ENDPOINTS.ADMIN.DONATIONS.EXPORT}?format=${format}`, { responseType: 'blob' }),
};

// User Service
export const userService = {
  // Admin endpoints
  getAll: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.USERS.BASE),
  create: (userData) => apiClient.post(FRONTEND_ENDPOINTS.ADMIN.USERS.CREATE, userData),
  update: (id, userData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.USERS.UPDATE(id), userData),
  delete: (id) => apiClient.delete(FRONTEND_ENDPOINTS.ADMIN.USERS.DELETE(id)),
  getRoles: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.USERS.ROLES),
};

// Volunteer Service
export const volunteerService = {
  // Admin endpoints
  getAll: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.VOLUNTEERS.ALL),
  getStats: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.VOLUNTEERS.STATS),
  getById: (id) => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.VOLUNTEERS.BY_ID(id)),
  updateStatus: (id, statusData) => apiClient.put(FRONTEND_ENDPOINTS.ADMIN.VOLUNTEERS.UPDATE_STATUS(id), statusData),
  
  // User endpoints
  getUserApplications: () => apiClient.get('/api/volunteers/user/applications'),
  getMinistryVolunteers: (ministryId) => apiClient.get(`/api/volunteers/ministry/${ministryId}`),
};

// Auth Service
export const authService = {
  login: (credentials) => apiClient.post(AUTH_ENDPOINTS.LOGIN, credentials),
  register: (userData) => apiClient.post(AUTH_ENDPOINTS.REGISTER, userData),
  validateResetToken: (token) => apiClient.post(AUTH_ENDPOINTS.VALIDATE_RESET_TOKEN, { token }),
  changePassword: (passwordData) => apiClient.post(AUTH_ENDPOINTS.CHANGE_PASSWORD, passwordData),
  forgotPassword: (email) => apiClient.post(AUTH_ENDPOINTS.FORGOT_PASSWORD, { email }),
  resetPassword: (token, newPassword) => apiClient.post(AUTH_ENDPOINTS.RESET_PASSWORD, { token, newPassword }),
  verifyEmail: (token) => apiClient.get(`${AUTH_ENDPOINTS.VERIFY_EMAIL}/${token}`),
  resendVerification: (email) => apiClient.post(AUTH_ENDPOINTS.RESEND_VERIFICATION, { email }),
  getCurrentUser: () => apiClient.get(AUTH_ENDPOINTS.ME),
  logout: () => apiClient.post(AUTH_ENDPOINTS.LOGOUT),
  socialLogin: (provider, token) => apiClient.post(`/auth/social/${provider}`, { token }),
  validateSocialToken: (provider, token) => apiClient.post(`/auth/social/validate/${provider}`, { token })};

// Utility Services
export const utilityService = {
  getServiceTimes: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.SERVICE_TIMES),
  getChurchStats: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.CHURCH_STATS),
  getHeroContent: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.HERO_CONTENT),
  getLiveStatus: () => apiClient.get(FRONTEND_ENDPOINTS.PUBLIC.LIVE_STATUS),
  trackEvent: (eventData) => apiClient.post('/api/analytics/track', eventData),
  getDashboardStats: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.DASHBOARD.STATS),
  getRecentActivity: () => apiClient.get(FRONTEND_ENDPOINTS.ADMIN.DASHBOARD.ACTIVITY),
};

export const socialAuthService = {
  // OAuth Initiation (redirects)
  googleLogin: () => { window.location.href = `${import.meta.env.VITE_API_URL}${FRONTEND_ENDPOINTS.SOCIAL.GOOGLE}`; },
  facebookLogin: () => { window.location.href = `${import.meta.env.VITE_API_URL}${FRONTEND_ENDPOINTS.SOCIAL.FACEBOOK}`; },

  // Token Validation
  validateGoogleToken: (token) => apiClient.post(FRONTEND_ENDPOINTS.SOCIAL.VALIDATE_GOOGLE, { token }),
  validateFacebookToken: (token) => apiClient.post(FRONTEND_ENDPOINTS.SOCIAL.VALIDATE_FACEBOOK, { token }),

  // Social Account Management
  linkAccount: (linkData) => apiClient.post(FRONTEND_ENDPOINTS.SOCIAL.LINK_ACCOUNT, linkData),
  unlinkAccount: (provider) => apiClient.delete(FRONTEND_ENDPOINTS.SOCIAL.UNLINK_ACCOUNT(provider)),
  getLinkedAccounts: () => apiClient.get(FRONTEND_ENDPOINTS.SOCIAL.GET_ACCOUNTS),

  // Handle OAuth callback
  handleOAuthCallback: () => {
    const urlParams = new URLSearchParams(window.location.search);
    return {
      token: urlParams.get('token'),
      userId: urlParams.get('userId'),
      error: urlParams.get('error')
    };
  }
};

export default {
  ministryService,
  sermonService,
  eventService,
  testimonialService,
  prayerService,
  blogService,
  donationService,
  userService,
  volunteerService,
  authService,
  utilityService,
  socialAuthService,

};
)apiservice.js,
],
utils[
(
import React, { useState, useEffect, createContext, useContext } from 'react';

// Alert Context
const AlertContext = createContext();

// Alert Provider Component
export const AlertProvider = ({ children }) => {
  const [alerts, setAlerts] = useState([]);

  const addAlert = (message, type = 'info', options = {}) => {
    const id = Date.now() + Math.random();
    const alert = {
      id,
      message,
      type,
      duration: options.duration || 5000,
      position: options.position || 'top-right',
      dismissible: options.dismissible !== false, // Default to true
      onClose: options.onClose,
    };

    setAlerts(prev => [...prev, alert]);

    // Auto dismiss if duration is set
    if (alert.duration > 0) {
      setTimeout(() => {
        removeAlert(id);
      }, alert.duration);
    }

    return id;
  };

  const removeAlert = (id) => {
    setAlerts(prev => {
      const alertToRemove = prev.find(alert => alert.id === id);
      if (alertToRemove && alertToRemove.onClose) {
        alertToRemove.onClose();
      }
      return prev.filter(alert => alert.id !== id);
    });
  };

  const clearAllAlerts = () => {
    setAlerts([]);
  };

  // Predefined alert types
  const alertMethods = {
    success: (message, options) => addAlert(message, 'success', options),
    error: (message, options) => addAlert(message, 'error', options),
    warning: (message, options) => addAlert(message, 'warning', options),
    info: (message, options) => addAlert(message, 'info', options),
    remove: removeAlert,
    clear: clearAllAlerts,
  };

  return (
    <AlertContext.Provider value={alertMethods}>
      {children}
      <AlertContainer alerts={alerts} onRemove={removeAlert} />
    </AlertContext.Provider>
  );
};

// Alert Container Component
const AlertContainer = ({ alerts, onRemove }) => {
  // Group alerts by position
  const groupedAlerts = alerts.reduce((groups, alert) => {
    const position = alert.position || 'top-right';
    if (!groups[position]) {
      groups[position] = [];
    }
    groups[position].push(alert);
    return groups;
  }, {});

  return (
    <>
      {Object.entries(groupedAlerts).map(([position, positionAlerts]) => (
        <div
          key={position}
          className={`fixed z-50 ${getPositionClasses(position)} space-y-3 w-full max-w-sm`}
        >
          {positionAlerts.map(alert => (
            <Alert key={alert.id} alert={alert} onRemove={onRemove} />
          ))}
        </div>
      ))}
    </>
  );
};

// Individual Alert Component
const Alert = ({ alert, onRemove }) => {
  const [isExiting, setIsExiting] = useState(false);

  const handleDismiss = () => {
    setIsExiting(true);
    setTimeout(() => {
      onRemove(alert.id);
    }, 300); // Match this with the CSS transition duration
  };

  // Auto-dismiss when duration is set
  useEffect(() => {
    if (alert.duration > 0) {
      const timer = setTimeout(handleDismiss, alert.duration);
      return () => clearTimeout(timer);
    }
  }, [alert.duration]);

  const alertClasses = `
    transition-all duration-300 ease-in-out transform
    ${isExiting ? 'opacity-0 scale-95 translate-y-2' : 'opacity-100 scale-100'}
    rounded-lg shadow-lg p-4 border-l-4
    ${getAlertTypeClasses(alert.type)}
  `;

  const icon = getAlertIcon(alert.type);

  return (
    <div className={alertClasses} role="alert">
      <div className="flex items-start">
        {icon && (
          <div className="flex-shrink-0 mr-3 mt-0.5">
            {icon}
          </div>
        )}
        <div className="flex-1">
          <p className="text-sm font-medium">{alert.message}</p>
        </div>
        {alert.dismissible && (
          <button
            onClick={handleDismiss}
            className="ml-4 flex-shrink-0 inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:text-gray-500 transition ease-in-out duration-150"
          >
            <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        )}
      </div>
    </div>
  );
};

// Hook to use alerts
export const useAlert = () => {
  const context = useContext(AlertContext);
  if (!context) {
    throw new Error('useAlert must be used within an AlertProvider');
  }
  return context;
};

// Helper functions
const getPositionClasses = (position) => {
  const positions = {
    'top-right': 'top-4 right-4',
    'top-left': 'top-4 left-4',
    'top-center': 'top-4 left-1/2 transform -translate-x-1/2',
    'bottom-right': 'bottom-4 right-4',
    'bottom-left': 'bottom-4 left-4',
    'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2',
  };
  return positions[position] || positions['top-right'];
};

const getAlertTypeClasses = (type) => {
  const types = {
    success: 'bg-green-50 border-green-400 text-green-700',
    error: 'bg-red-50 border-red-400 text-red-700',
    warning: 'bg-yellow-50 border-yellow-400 text-yellow-700',
    info: 'bg-blue-50 border-blue-400 text-blue-700',
  };
  return types[type] || types.info;
};

const getAlertIcon = (type) => {
  const icons = {
    success: (
      <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
      </svg>
    ),
    error: (
      <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
      </svg>
    ),
    warning: (
      <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
      </svg>
    ),
    info: (
      <svg className="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
      </svg>
    ),
  };
  return icons[type];
};

// Higher Order Component for easy usage
export const withAlert = (Component) => {
  return function WithAlertComponent(props) {
    const alert = useAlert();
    return <Component {...props} alert={alert} />;
  };
};
)alert.jsx,
(
import axios from 'axios';
import { getAuthToken, removeAuthToken } from './auth';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

// Track pending requests to prevent duplicates
const pendingRequests = new Map();

// Create axios instance
const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000, // 10 seconds timeout
});

// Add request timing interceptor (for performance monitoring)
axiosInstance.interceptors.request.use(
  (config) => {
        const url = config.url || "";

    // Safely handle params & data
    const safeData =
      config.data && Object.keys(config.data).length > 0
        ? JSON.stringify(config.data)
        : "";

    const safeParams =
      config.params && Object.keys(config.params).length > 0
        ? JSON.stringify(config.params)
        : "";

    // Unique key considers method + url + params + data
    const requestKey = `${config.method}-${url}${safeParams ? `-${safeParams}` : ""}${safeData ? `-${safeData}` : ""}`;

    if (pendingRequests.has(requestKey)) {
      console.log("⚠️ Cancelling duplicate request:", requestKey);
      return Promise.reject(new axios.Cancel("Duplicate request cancelled"));
    }

    pendingRequests.set(requestKey, true);
    config.metadata = {
      startTime: Date.now(),
      requestKey,
    };
    return config;
  }
);


// Add request interceptor for authentication
axiosInstance.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add response interceptor with enhanced error handling
axiosInstance.interceptors.response.use(
  (response) => {
    // Remove from pending requests
    const requestKey = response.config.metadata?.requestKey;
    if (requestKey) {
      pendingRequests.delete(requestKey);
    }
    
    // Add duration tracking
    if (response.config.metadata) {
      response.config.metadata.endTime = Date.now();
      response.duration = response.config.metadata.endTime - response.config.metadata.startTime;
      
      // Optional: log request duration for performance monitoring
      console.debug(`API Request: ${response.config.url} took ${response.duration}ms`);
    }
    
    return response;
  },
  async (error) => {
    // Remove from pending requests
    const requestKey = error.config?.metadata?.requestKey;
    if (requestKey) {
      pendingRequests.delete(requestKey);
    }
    
    // Handle 401 unauthorized errors
    if (error.response?.status === 401) {
      removeAuthToken();
      window.location.href = '/login';
      return Promise.reject(error);
    }
    
    // Handle duplicate request cancellation
    if (axios.isCancel(error)) {
      console.log('Request cancelled:', error.message);
      return Promise.reject(error);
    }
    
    // Retry logic for network errors (no response received)
    if (!error.response && error.config && !axios.isCancel(error)) {
      error.config.retry = error.config.retry || 0;
      
      // Retry up to 3 times for network errors
      if (error.config.retry < 3) {
        error.config.retry += 1;
        
        // Add exponential backoff delay: 1s, 2s, 4s
        const delay = Math.pow(2, error.config.retry - 1) * 1000;
        
        console.warn(`Retrying request ${error.config.url} (attempt ${error.config.retry}) after ${delay}ms`);
        
        return new Promise((resolve) => 
          setTimeout(() => resolve(axiosInstance(error.config)), delay)
        );
      }
    }
    
    // For other errors, add additional context if available
    if (error.response) {
      // Enhance error object with more context
      error.apiError = {
        url: error.config?.url,
        method: error.config?.method,
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data
      };
    }
    
    return Promise.reject(error);
  }
);

// Export with the same interface as original
export const apiClient = {
  get: (endpoint, config) => axiosInstance.get(endpoint, config),
  post: (endpoint, data, config) => axiosInstance.post(endpoint, data, config),
  put: (endpoint, data, config) => axiosInstance.put(endpoint, data, config),
  delete: (endpoint, config) => axiosInstance.delete(endpoint, config),
  
  // Optional: Add additional utility methods
  withTimeout: (timeout) => {
    const instanceWithTimeout = axiosInstance.create();
    instanceWithTimeout.defaults.timeout = timeout;
    return instanceWithTimeout;
  }
};
)api.js
(
import { jwtDecode } from 'jwt-decode';

// Configuration constants
export const TOKEN_KEY = 'church_auth_token';
export const USER_KEY = 'church_user_data';
export const ADMIN_KEY = 'church_admin_status';
export const ADMIN_EXPIRY_KEY = 'church_admin_expiry';

// Admin codes - Use fallback codes for browser environment
const getValidAdminCodes = () => {
  // Try to get from environment variables (available during build)
  try {
    const envCodes = [
      import.meta.env.VITE_ADMIN_CODE_1,
      import.meta.env.VITE_ADMIN_CODE_2,
      import.meta.env.VITE_ADMIN_CODE_3
    ].filter(Boolean);
    
    if (envCodes.length > 0) {
      return new Set(envCodes);
    }
  } catch (error) {
    console.log('Environment variables not available in browser, using fallback codes');
  }
  
  // Fallback validation (development)
  return new Set(['STMICHAEL2024', 'ANGELSCHURCH', 'THRONEOFSRACE']);
};

const VALID_ADMIN_CODES = getValidAdminCodes();

// Admin session duration (24 hours)
const ADMIN_SESSION_DURATION = 24 * 60 * 60 * 1000;

/**
 * Validates if a string is a properly formatted JWT token
 * @param {string} token - The token to validate
 * @returns {boolean} - True if token has proper JWT format
 */
export const isValidTokenFormat = (token) => {
  if (!token || typeof token !== 'string') {
    return false;
  }
  
  // JWT tokens should have 3 parts separated by dots
  const parts = token.split('.');
  return parts.length === 3;
};

/**
 * Validates admin code and sets admin session
 * @param {string} code - The admin code to validate
 * @returns {Promise<boolean>} - True if valid, false otherwise
 */
export const validateAdminCode = async (code) => {
  try {
    if (!code || typeof code !== 'string') {
      return false;
    }

    const normalizedCode = code.toUpperCase().trim();
    
    // Check against valid admin codes
    const isValid = VALID_ADMIN_CODES.has(normalizedCode);
    if (isValid) {
      setAdminSession();
      return true;
    }

    return false;

  } catch (error) {
    console.error('Admin code validation error:', error);
    return false;
  }
};

/**
 * Sets admin session with expiration
 */
const setAdminSession = () => {
  const expiryTime = Date.now() + ADMIN_SESSION_DURATION;
  localStorage.setItem(ADMIN_KEY, 'true');
  localStorage.setItem(ADMIN_EXPIRY_KEY, expiryTime.toString());
};

/**
 * Checks if user has valid admin privileges
 * @returns {boolean} - True if user is admin and session is valid
 */
export const isAdmin = () => {
  try {
    const isAdminFlag = localStorage.getItem(ADMIN_KEY) === 'true';
    if (!isAdminFlag) return false;

    const expiryTime = localStorage.getItem(ADMIN_EXPIRY_KEY);
    if (!expiryTime) {
      revokeAdminAccess();
      return false;
    }

    const isExpired = Date.now() > parseInt(expiryTime, 10);
    if (isExpired) {
      revokeAdminAccess();
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  }
};

/**
 * Revokes admin access
 */
export const revokeAdminAccess = () => {
  localStorage.removeItem(ADMIN_KEY);
  localStorage.removeItem(ADMIN_EXPIRY_KEY);
};

/**
 * Sets authentication token and extracts user data
 * @param {string} token - JWT token
 */
export const setAuthToken = (token, extraUserData = {}) => {
  if (!token || typeof token !== 'string' || !isValidTokenFormat(token)) {
    throw new Error('Invalid token provided: Malformed JWT token');
  }

  try {
    localStorage.setItem(TOKEN_KEY, token);

    const userData = getUserFromToken(token) || {};
    const finalUserData = {
      ...userData,
      ...extraUserData,
      role: userData.role || extraUserData.role || "user"
    };

    // STORE USER DATA TOO
    localStorage.setItem(USER_KEY, JSON.stringify(finalUserData));
    
  } catch (error) {
    console.error('Error setting auth token:', error);
    throw new Error('Failed to set authentication token');
  }
};
/**
 * Retrieves authentication token
 * @returns {string|null} - Token or null if not found or invalid
 */
export const getAuthToken = () => {
  try {
    const token = localStorage.getItem(TOKEN_KEY);
    if (!token || !isValidTokenFormat(token)) {
      // Clean up invalid token
      if (token) {
        localStorage.removeItem(TOKEN_KEY);
        localStorage.removeItem(USER_KEY);
      }
      return null;
    }
    return token;
  } catch (error) {
    console.error('Error retrieving auth token:', error);
    return null;
  }
};

/**
 * Clears all authentication data
 */
export const removeAuthToken = () => {
  try {
    localStorage.removeItem(TOKEN_KEY);
    localStorage.removeItem(USER_KEY);
    revokeAdminAccess();
  } catch (error) {
    console.error('Error removing auth token:', error);
  }
};

/**
 * Gets the current authentication state
 * @returns {object} - Contains token, isValid, and user information
 */
export const getConsistentAuthState = () => {
  const token = getAuthToken();
  const isValid = token ? isTokenValid(token) : false;
  const user = isValid ? (getUserFromToken(token) || getStoredUser()) : null;
  
  return { token, isValid, user };
};

/**
 * Validates JWT token expiration
 * @param {string} token - JWT token to validate
 * @returns {boolean} - True if token is valid
 */
export const isTokenValid = (token) => {
  if (!token || !isValidTokenFormat(token)) {
    return false;
  }

  try {
    const decoded = jwtDecode(token);
    
    // Check expiration (with 5-second buffer)
    const currentTime = Date.now() / 1000;
    return decoded.exp > currentTime + 5;
    
  } catch (error) {
    console.error('Token validation error:', error);
    return false;
  }
};

/**
 * Extracts user data from JWT token
 * @param {string} token - JWT token
 * @returns {object|null} - Decoded token payload or null
 */
export const getUserFromToken = (token) => {
  if (!token || !isValidTokenFormat(token)) {
    return null;
  }

  try {
    return jwtDecode(token);
  } catch (error) {
    console.error('Error decoding token:', error);
    return null;
  }
};

/**
 * Retrieves stored user data
 * @returns {object|null} - Parsed user data or null
 */
export const getStoredUser = () => {
  try {
    const userData = localStorage.getItem(USER_KEY);
    console.log('Retrieved from localStorage:', userData);
    
    if (!userData) {
      console.log('No user data found in localStorage');
      return null;
    }

    const parsedData = JSON.parse(userData);
    console.log('Parsed user data:', parsedData);
    return parsedData;
  } catch (error) {
    console.error('Error retrieving stored user:', error);
    return null;
  }
};

/**
 * Stores user data in localStorage
 * @param {object} userData - User data to store
 */
export const setStoredUser = (userData) => {
  try {
    if (userData) {
      console.log('Setting stored user:', userData);
      localStorage.setItem(USER_KEY, JSON.stringify(userData));
    } else {
      console.log('Removing stored user');
      localStorage.removeItem(USER_KEY);
    }
  } catch (error) {
    console.error('Error storing user data:', error);
  }
};

/**
 * Checks if user is authenticated
 * @returns {boolean} - True if authenticated
 */
export const isAuthenticated = () => {
  const token = getAuthToken();
  return token ? isTokenValid(token) : false;
};

/**
 * Generates headers for authenticated requests
 * @returns {object} - Headers object with Authorization
 */
export const getAuthHeaders = () => {
  const token = getAuthToken();
  const headers = {
    'Content-Type': 'application/json'
  };

  if (token && isTokenValid(token)) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  return headers;
};

/**
 * Gets remaining token validity time in seconds
 * @returns {number} - Seconds until expiration
 */
export const getTokenExpiryTime = (token = null) => {
  const currentToken = token || getAuthToken();
  if (!currentToken) return 0;

  try {
    const decoded = jwtDecode(currentToken);
    const currentTime = Date.now() / 1000;
    return Math.max(0, decoded.exp - currentTime);
  } catch (error) {
    console.error('Error calculating token expiry:', error);
    return 0;
  }
};

/**
 * Gets remaining admin session time in milliseconds
 * @returns {number} - Milliseconds until admin session expiry
 */
export const getAdminSessionTime = () => {
  if (!isAdmin()) return 0;

  try {
    const expiryTime = localStorage.getItem(ADMIN_EXPIRY_KEY);
    if (!expiryTime) return 0;

    return Math.max(0, parseInt(expiryTime, 10) - Date.now());
  } catch (error) {
    console.error('Error calculating admin session time:', error);
    return 0;
  }
};

/**
 * Comprehensive cleanup of all auth data
 */
export const clearAllAuthData = () => {
  removeAuthToken();
  revokeAdminAccess();
};

// Optional: Add token refresh mechanism placeholder
export const refreshToken = async () => {
  // Implement token refresh logic based on your backend API
  // This should call your refresh token endpoint and return a new token
  throw new Error('Token refresh not implemented');
};

/**
 * Checks and refreshes token if about to expire
 * @returns {Promise<boolean>} - True if token is valid/refreshed, false if invalid
 */
export const checkAndRefreshAuthToken = async () => {
  try {
    const token = getAuthToken();
    
    if (!token) {
      return false;
    }
    
    // Check if token is valid
    if (isTokenValid(token)) {
      const expiryTime = getTokenExpiryTime(token);
      
      // Refresh token if it expires in less than 5 minutes
      if (expiryTime < 300) {
        try {
          const newToken = await refreshToken();
          if (newToken) {
            setAuthToken(newToken);
            return true;
          }
          return false;
        } catch (error) {
          console.error('Token refresh failed:', error);
          return false;
        }
      }
      return true;
    }
    
    // Token is invalid
    removeAuthToken();
    return false;
    
  } catch (error) {
    console.error('Error checking/refreshing token:', error);
    removeAuthToken();
    return false;
  }
};

/**
 * Gets user role from token or stored data
 * @returns {string} - User role (default: 'user')
 */
export const getUserRole = () => {
  try {
    const token = getAuthToken();
    if (token && isTokenValid(token)) {
      const userData = getUserFromToken(token);
      return userData?.role || 'user';
    }
    
    const storedUser = getStoredUser();
    return storedUser?.role || 'user';
  } catch (error) {
    console.error('Error getting user role:', error);
    return 'user';
  }
};

/**
 * Checks if current user has a specific role
 * @param {string} role - Role to check for
 * @returns {boolean} - True if user has the specified role
 */
export const hasRole = (role) => {
  const userRole = getUserRole();
  return userRole === role;
};

/**
 * Gets user ID from token or stored data
 * @returns {string|null} - User ID or null if not available
 */
export const getUserId = () => {
  try {
    const token = getAuthToken();
    if (token && isTokenValid(token)) {
      const userData = getUserFromToken(token);
      return userData?.id || userData?.userId || null;
    }
    
    const storedUser = getStoredUser();
    return storedUser?.id || storedUser?.userId || null;
  } catch (error) {
    console.error('Error getting user ID:', error);
    return null;
  }
};

// Check what's actually in localStorage
console.log('Token:', localStorage.getItem('church_auth_token'));
console.log('User:', localStorage.getItem('church_user_data'));

// Check if your functions work
console.log('getStoredUser():', getStoredUser());
console.log('getAuthToken():', getAuthToken());
console.log('isTokenValid():', isTokenValid(getAuthToken()));

export default {
  // Token operations
  setAuthToken,
  getAuthToken,
  removeAuthToken,
  isValidTokenFormat,
  isTokenValid,
  getTokenExpiryTime,
  
  // User operations
  getUserFromToken,
  getStoredUser,
  setStoredUser,
  getUserId,
  getUserRole,
  hasRole,
  isAuthenticated,
  
  // Admin operations
  validateAdminCode,
  isAdmin,
  revokeAdminAccess,
  getAdminSessionTime,
  
  // Utility functions
  getAuthHeaders,
  getConsistentAuthState,
  clearAllAuthData,
  checkAndRefreshAuthToken,
  refreshToken
};
)auth.js,
(
import { authService } from '../services/apiService';

// Initialize Google Auth
export const initGoogleAuth = (clientId) => {
  return new Promise((resolve) => {
    if (!clientId) {
      resolve(false);
      return;
    }

    if (window.google) {
      resolve(true);
    } else {
      const script = document.createElement('script');
      script.src = 'https://accounts.google.com/gsi/client';
      script.async = true;
      script.defer = true;
      script.onload = () => resolve(true);
      script.onerror = () => resolve(false);
      document.head.appendChild(script);
    }
  });
};

// Initialize Facebook Auth
export const initFacebookAuth = (appId) => {
  return new Promise((resolve) => {
    if (!appId) {
      resolve(false);
      return;
    }

    if (window.FB) {
      resolve(true);
    } else {
      window.fbAsyncInit = function() {
        window.FB.init({
          appId: appId,
          cookie: true,
          xfbml: true,
          version: 'v18.0'
        });
        resolve(true);
      };

      const script = document.createElement('script');
      script.src = 'https://connect.facebook.net/en_US/sdk.js';
      script.async = true;
      script.defer = true;
      script.onerror = () => resolve(false);
      document.head.appendChild(script);
    }
  });
};

// Handle social login callback
export const handleSocialLoginCallback = () => {
  return socialAuthService.handleOAuthCallback();
};

// Handle social login response
export const handleSocialLogin = async (provider, token) => {
  try {
    const response = await authService.socialLogin(provider, token);
    
    if (response.success) {
      // Store user data and tokens
      localStorage.setItem('user', JSON.stringify(response.data.user));
      localStorage.setItem('token', response.data.token);
      
      return response.data;
    } else {
      throw new Error(response.message || 'Social login failed');
    }
  } catch (error) {
    console.error(`${provider} login error:`, error);
    throw error;
  }
};

// Check if user is authenticated
export const isAuthenticated = () => {
  const token = localStorage.getItem('token');
  const user = localStorage.getItem('user');
  
  if (!token || !user) return false;
  
  try {
    const userData = JSON.parse(user);
    return !!userData && !!token;
  } catch {
    return false;
  }
};

// Get current user
export const getCurrentUser = () => {
  try {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  } catch {
    return null;
  }
};

// Logout
export const logout = () => {
  localStorage.removeItem('user');
  localStorage.removeItem('token');
  // Additional cleanup if needed
};

export default {
  initGoogleAuth,
  initFacebookAuth,
  handleSocialLogin,
  isAuthenticated,
  handleSocialLoginCallback,
  getCurrentUser,
  logout
};
)authutils.js,
(
import { useState } from 'react';
import { socialAuthService, authService } from '../services/apiService';

export const FacebookAuthButton = ({ onSuccess, onError, text = "Continue with Facebook" }) => {
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async () => {
    setIsLoading(true);
    try {
      socialAuthService.facebookLogin();
    } catch (error) {
      onError('Failed to initiate Facebook login');
      setIsLoading(false);
    }
  };

  return (
    <button
      onClick={handleLogin}
      disabled={isLoading}
      className="flex items-center justify-center bg-[#1877F2] text-white px-4 py-3 rounded-md hover:bg-[#166FE5] transition-colors w-full disabled:opacity-50"
    >
      {isLoading ? (
        <span>Loading...</span>
      ) : (
        <>
          <i className="fab fa-facebook-f mr-2"></i>
          {text}
        </>
      )}
    </button>
  );
};

export const handleFacebookLogin = async (accessToken) => {
  try {
    const response = await authService.socialLogin('facebook', accessToken);
    return response;
  } catch (error) {
    console.error('Facebook login error:', error);
    throw error;
  }
};

export const initFacebookSDK = (appId) => {
  return new Promise((resolve) => {
    if (window.FB) {
      window.FB.init({
        appId: appId,
        cookie: true,
        xfbml: true,
        version: 'v18.0'
      });
      resolve(true);
    } else {
      window.fbAsyncInit = function() {
        window.FB.init({
          appId: appId,
          cookie: true,
          xfbml: true,
          version: 'v18.0'
        });
        resolve(true);
      };

      const script = document.createElement('script');
      script.src = 'https://connect.facebook.net/en_US/sdk.js';
      script.async = true;
      script.defer = true;
      script.onerror = () => resolve(false);
      document.head.appendChild(script);
    }
  });
};

// Alternative: Custom Facebook login implementation
export const customFacebookLogin = () => {
  return new Promise((resolve, reject) => {
    window.FB.login(function(response) {
      if (response.authResponse) {
        resolve(response.authResponse.accessToken);
      } else {
        reject(new Error('User cancelled login or did not fully authorize.'));
      }
    }, { scope: 'email,public_profile' });
  });
};

export default FacebookAuthButton;
)facebookauth.jsx,
(
import { GoogleLogin, GoogleOAuthProvider } from '@react-oauth/google';
import { socialAuthService, authService } from '../services/apiService';

export const GoogleAuthButton = ({ onSuccess, onError, text = "Continue with Google" }) => {
  const handleSuccess = async (credentialResponse) => {
    try {
      // Send token to backend for validation
      const response = await socialAuthService.validateGoogleToken(credentialResponse.credential);
      
      if (response.success) {
        onSuccess(response.data);
      } else {
        onError(response.message || 'Google authentication failed');
      }
    } catch (error) {
      console.error('Google authentication error:', error);
      onError(error.response?.data?.message || 'Failed to authenticate with Google');
    }
  };

  const handleError = () => {
    onError('Google authentication was cancelled');
  };

  return (
    <GoogleOAuthProvider clientId={import.meta.env.VITE_GOOGLE_CLIENT_ID}>
      <GoogleLogin
        onSuccess={handleSuccess}
        onError={handleError}
        useOneTap={false}
        size="large"
        text={text.toLowerCase().includes('sign') ? 'signin_with' : 'continue_with'}
        shape="rectangular"
        width="300"
        logo_alignment="left"
      />
    </GoogleOAuthProvider>
  );
};

// Alternative: Direct redirect method
export const redirectToGoogleLogin = () => {
  socialAuthService.googleLogin();
};

export const handleGoogleLogin = async (token) => {
  try {
    const response = await authService.socialLogin('google', token);
    return response;
  } catch (error) {
    console.error('Google login error:', error);
    throw error;
  }
};

export const initGoogleAuth = (clientId) => {
  // This function can be used to initialize Google Auth SDK if needed
  return new Promise((resolve) => {
    // Google SDK is typically loaded via script tag in index.html
    if (window.google) {
      resolve(true);
    } else {
      // Fallback: load the script dynamically
      const script = document.createElement('script');
      script.src = 'https://accounts.google.com/gsi/client';
      script.async = true;
      script.defer = true;
      script.onload = () => resolve(true);
      script.onerror = () => resolve(false);
      document.head.appendChild(script);
    }
  });
};

export default GoogleAuthButton;
)googleauth.jsx,
],
.env(
VITE_API_URL=http://localhost:5000/api
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_51S4Wi6ChmgWsJLauutuaPwfQHKs4rIvaErdDw4t03Jqd3H3amLPN50aYEetNjTgz68vY9CiHXHMc3ws7hnwLzwta00C9tLMWbo
VITE_GOOGLE_ANALYTICS_ID=your_ga_id
VITE_GOOGLE_CLIENT_ID=1072457760612-aleee87cojlvo1mk6qhf74hu1tqcd8f2.apps.googleusercontent.com
VITE_FACEBOOK_APP_ID=1995190017686767

# VITE_API_URL=https://your-api.com


# Admin Access Codes
REACT_APP_ADMIN_CODE_1=STMICHAEL2024
REACT_APP_ADMIN_CODE_2=ANGELSCHURCH
REACT_APP_ADMIN_CODE_3=THRONEOFSRACE
JWT_SECRET=your_super_secret_jwt_key_here
),
.env.production(
VITE_API_URL=https://your-domain.com/api
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_51S4Wi6ChmgWsJLauutuaPwfQHKs4rIvaErdDw4t03Jqd3H3amLPN50aYEetNjTgz68vY9CiHXHMc3ws7hnwLzwta00C9tLMWbo
VITE_GOOGLE_ANALYTICS_ID=your_production_ga_id
VITE_GOOGLE_CLIENT_ID=1072457760612-aleee87cojlvo1mk6qhf74hu1tqcd8f2.apps.googleusercontent.com
VITE_FACEBOOK_APP_ID=1995190017686767
),
App.jsx(
import { useState, useEffect, Suspense, lazy } from "react";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import Header from "./components/Header";
import Footer from "./components/Footer";
import Loader from "./components/Loader";
import ProtectedRoute from "./routes/ProtectedRroute";
import {
  getAuthToken,
  isTokenValid,
  getUserFromToken,
  setAuthToken,
  removeAuthToken,
  isValidTokenFormat,
  getStoredUser,
  setStoredUser
} from "./utils/auth";
import { useAlert } from "./utils/Alert";
import "./index.css";
import useAuth from "./hooks/useAuth";

// Lazy load pages for performance
const HomePage = lazy(() => import("./pages/HOmePage"));
const EventsPage = lazy(() => import("./pages/EventsPage"));
const SermonsPage = lazy(() => import("./pages/SermonsPage"));
const DonatePage = lazy(() => import("./pages/DonatePage"));
const BlogPage = lazy(() => import("./pages/BlogPage"));
const MinistriesPage = lazy(() => import("./pages/MinistriesPage"));
const TestimonialsPage = lazy(() => import("./pages/TestimonialsPage"));
const PrayerPage = lazy(() => import("./pages/PrayerPage"));
const AdminPage = lazy(() => import("./pages/AdminPage"));
const LoginPage = lazy(() => import("./pages/LoginPage"));
const UserPage = lazy(() => import("./pages/UserPage"));
const ProfilePage = lazy(() => import("./pages/ProfilePage"));
const MyRsvpsPage = lazy(() => import("./pages/MyRsvpsPage"));
const VerifyEmail = lazy(() => import("./pages/VerifyEmail"));
const PasswordPage = lazy(() => import("./pages/PasswordPage"));
const NotFound = lazy(() => import("./pages/NotFound"));

const App = ({}) => {
  const { user, setUser } = useAuth(); // ✅ Get both user and setUser from useAuth
  const [isLoading, setIsLoading] = useState(true);
  const [showLoader, setShowLoader] = useState(true);
  const alert = useAlert();

useEffect(() => {
  console.log('LocalStorage contents:');
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    const value = localStorage.getItem(key);
    console.log(`${key}:`, value);
  }
}, []);

 // Add this to App.jsx to debug the auth flow
useEffect(() => {
  const debugAuth = () => {
    const token = getAuthToken();
    const userFromToken = getUserFromToken(token);
    const storedUser = getStoredUser();
    
    console.log('=== AUTH DEBUG ===');
    console.log('Token exists:', !!token);
    console.log('Token valid:', isTokenValid(token));
    console.log('User from token:', userFromToken);
    console.log('Stored user:', storedUser);
    console.log('User state:', user);
    console.log('==================');
  };
  
  debugAuth();
}, [user]); // Run when user state changes

  // Initialize authentication
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        const token = getAuthToken();

        if (token && isValidTokenFormat(token)) {
          if (isTokenValid(token)) {
            const userData = getUserFromToken(token);
            if (userData) {
              // Ensure user has an id property
              const userWithId = {
                ...userData,
                id: userData.id || userData._id || `user-${Date.now()}`
              };
              setUser(userWithId);
              setStoredUser(userWithId);
            } else {
              const storedUser = getStoredUser();
              if (storedUser) {
                // Ensure stored user has an id property
                const userWithId = {
                  ...storedUser,
                  id: storedUser.id || storedUser._id || `user-${Date.now()}`
                };
                setUser(userWithId);
              }
            }
          } else {
            console.warn("Token is invalid or expired");
            removeAuthToken();
            alert.info("Your session has expired. Please log in again.");
          }
        } else if (token) {
          console.warn("Invalid token format found, cleaning up");
          removeAuthToken();
        }
      } catch (error) {
        console.error("Auth initialization error:", error);
        removeAuthToken();
        alert.error("Authentication error. Please log in again.");
      } finally {
        setIsLoading(false);
        setTimeout(() => setShowLoader(false), 1000);
      }
    };

    initializeAuth();
  }, [alert, setUser]);

  // Login function
  const login = (token, userData) => {
    setAuthToken(token);

    // Ensure user has an id property
    const normalizedUser = {
      ...userData,
      id: userData.id || userData._id || `user-${Date.now()}`,
      role: userData.role || "user",
    };

    setUser(normalizedUser);
    setStoredUser(normalizedUser);
    alert.success(`Welcome back, ${normalizedUser.name || normalizedUser.email}!`);

    setTimeout(() => {
      if (normalizedUser.role.toLowerCase() === "admin") {
        window.location.href = `/admin/${normalizedUser.id}/dashboard`;
      } else {
        window.location.href = `/user/${normalizedUser.id}/dashboard`;
      }
    }, 100);
  };

  // Logout function
  const logout = () => {
    removeAuthToken();
    setUser(null);
    alert.info("You have been logged out successfully.");
    window.location.href = "/";
  };

  // Show loader on first load
  if (showLoader || isLoading) {
    return (
      <Loader
        type="spinner"
        size="large"
        color="#FF7E45"
        text="Loading St Michael's Church..."
        fullScreen={true}
        timeout={8000}
        onTimeout={() => console.log("App loading taking longer than expected")}
        timeoutMessage="Still loading... Thank you for your patience"
        showTimeoutMessage={true}
      />
    );
  }

  return (
    <Router>
      <div className="app">
        <Header user={user} logout={logout} />

        <main className="main-content">
          <Suspense
            fallback={
              <Loader type="spinner" text="Loading page..." fullScreen={false} />
            }
          >
            <Routes>
              {/* Public Routes */}
              <Route path="/" element={<HomePage />} />
              <Route path="/events" element={<EventsPage user={user} />} />
              <Route path="/sermons" element={<SermonsPage user={user} />} />
              <Route path="/donate" element={<DonatePage user={user} />} />
              <Route path="/blog" element={<BlogPage user={user} />} />
              <Route path="/ministries" element={<MinistriesPage user={user} />} />
              <Route path="/testimonials" element={<TestimonialsPage user={user} />} />
              <Route path="/prayer" element={<PrayerPage user={user} />} />
              <Route path="/verify-email/:token" element={<VerifyEmail />} />
              <Route path="/forgot-password" element={<PasswordPage />} />
              <Route path="/reset-password" element={<PasswordPage />} />
              <Route path="/change-password" element={<PasswordPage />} />

              {/* Auth Routes */}
              <Route path="/login" element={<LoginPage login={login} />} />

              {/* Protected Routes */}
              {user && user.id && (
                <>
                  <Route
                    path={`/admin/:userId/dashboard`}
                    element={
                      <ProtectedRoute user={user} requiredRole="admin">
                        <AdminPage user={user} />
                      </ProtectedRoute>
                    }
                  />

                  <Route
                    path={`/user/:userId/dashboard`}
                    element={
                      <ProtectedRoute user={user} requiredRole="user">
                        <UserPage user={user} />
                      </ProtectedRoute>
                    }
                  />

                  <Route
                    path={`/profile/:userId`}
                    element={
                      <ProtectedRoute user={user}>
                        <ProfilePage user={user} />
                      </ProtectedRoute>
                    }
                  />

                  <Route
                    path={`/my-rsvps/:userId`}
                    element={
                      <ProtectedRoute user={user}>
                        <MyRsvpsPage user={user} />
                      </ProtectedRoute>
                    }
                  />
                </>
              )}

              {/* Dashboard redirect based on role */}
              <Route
                path="/dashboard"
                element={
                  user && user.id ? (
                    user.role === "admin" ? (
                      <Navigate to={`/admin/${user.id}/dashboard`} replace />
                    ) : (
                      <Navigate to={`/user/${user.id}/dashboard`} replace />
                    )
                  ) : (
                    <Navigate to="/login" replace />
                  )
                }
              />

              {/* Catch-all 404 */}
              <Route path="*" element={<NotFound />} />
            </Routes>
          </Suspense>
        </main>

        <Footer />
      </div>
    </Router>
  );
};

export default App;
),
index.css(

 :root {
      --primary: #ff7e45;
      --danger: #e74c3c;
      --primary-light: #FFA76A;
      --secondary: #F4B942;
      --dark: #333333;
      --light: #F9F7F4;
      --gray: #E5E5E5;
    }
    
    body {
      font-family: 'Open Sans', sans-serif;
      color: var(--dark);
      background-color: var(--light);
    }
    
    h1, h2, h3, h4, h5, h6 {
      font-family: 'Montserrat', sans-serif;
      font-weight: 600;
    }
    
    .btn {
      @apply rounded-md px-6 py-2 font-medium transition duration-300 ease-in-out;
    }
    
    .btn-primary {
      @apply bg-[#FF7E45] text-white hover:bg-[#FFA76A];
    }
    
    .btn-outline {
      @apply border-2 border-[#FF7E45] text-[#FF7E45] hover:bg-[#FF7E45] hover:text-white;
    }
    
    .nav-link {
      @apply relative px-3 py-2 font-medium text-gray-800 hover:text-[#FF7E45] transition-colors duration-200;
    }
    
    .nav-link.active {
      @apply text-[#FF7E45];
    }
    
    .nav-link.active::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 20px;
      height: 2px;
      background-color: var(--primary);
    }
    
    .hero {
      background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('https://cdn.pixabay.com/photo/2019/08/09/19/35/church-4395760_1280.jpg');
      background-size: cover;
      background-position: center;
      height: 80vh;
      min-height: 500px;
    }
    
    .event-card {
      @apply bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-300 hover:shadow-lg hover:-translate-y-1;
    }
    
    .sermon-card {
      @apply bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-xl;
    }
    
    .testimonial-card {
      @apply bg-white rounded-lg shadow-md p-6;
    }
    
    .ministry-card {
      @apply bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-xl hover:scale-105;
    }
    
    .blog-card {
      @apply bg-white rounded-lg shadow-md overflow-hidden;
    }
    
    .swiper-pagination-bullet-active {
      background-color: var(--primary) !important;
    }
    
    .form-input {
      @apply w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#FF7E45] focus:border-transparent;
    }
    
    /* Mobile menu */
    .mobile-menu {
      transition: transform 0.3s ease-in-out;
      transform: translateX(-100%);
    }
    
    .mobile-menu.show {
      transform: translateX(0);
    }
    
    /* Calendar styles */
    .fc-button-primary {
      background-color: var(--primary) !important;
      border-color: var(--primary) !important;
    }
    
    .fc-button-primary:hover {
      background-color: var(--primary-light) !important;
      border-color: var(--primary-light) !important;
    }
    
    .fc-event {
      background-color: var(--primary) !important;
      border-color: var(--primary) !important;
      cursor: pointer;
    }
    
    /* Animate page transitions */
    .page {
      animation: fadeIn 0.5s;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    /* Custom scroll bar */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: var(--light);
    }
    
    ::-webkit-scrollbar-thumb {
      background-color: var(--primary);
      border-radius: 20px;
    }
),
main.jsx(
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";
import { AlertProvider } from './utils/Alert';
import { AuthProvider } from './hooks/useAuth';
// import { SocialAuthProvider } from "./contexts/SocialAuthContext";


ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <AuthProvider>
      <AlertProvider>
        {/* <SocialAuthProvider> */}
        <App />
        {/* </SocialAuthProvider> */}
      </AlertProvider>
    </AuthProvider>
  </React.StrictMode>
);
),
),
.gitignore(
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
.env
.env.production
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
),
eslint.config.js(
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])
),
index.html(
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/png+xml" href="./church-logo.png" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 
  <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/core@5.10.1/main.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@5.10.1/main.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@5.10.1/main.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/@fullcalendar/list@5.10.1/main.min.css" rel="stylesheet" />

  <link href="https://cdn.jsdelivr.net/npm/swiper@10.1.0/swiper-bundle.min.css" rel="stylesheet" />
  <link href="/src/index.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Open+Sans:wght@300;400;600&display=swap" rel="stylesheet">
  <title>SMC: | St. Micheals`s & All Angels Church | Ifite-Awka</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
 <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://tailwindcss.com/docs/installation"></script>

</body>

</html>
),
package.json(
{
  "name": "my-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "start": "vite"
  },
  "dependencies": {
    "@fullcalendar/daygrid": "^6.1.19",
    "@fullcalendar/interaction": "^6.1.19",
    "@fullcalendar/list": "^6.1.19",
    "@fullcalendar/react": "^6.1.19",
    "@fullcalendar/timegrid": "^6.1.19",
    "@react-oauth/google": "^0.12.2",
    "@stripe/react-stripe-js": "^3.9.1",
    "@stripe/stripe-js": "^7.8.0",
    "axios": "^1.11.0",
    "jwt-decode": "^4.0.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-facebook": "^10.0.1",
    "react-helmet": "^6.1.0",
    "react-router-dom": "^7.8.1",
    "swiper": "^11.2.10"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@fortawesome/fontawesome-free": "^7.0.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@types/stripe-v3": "^3.1.33",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.1.2"
  }
}
),
readme.md(
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
),
vite.config.js(
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    headers: {
      'X-Frame-Options': 'DENY',
      'X-Content-Type-Options': 'nosniff',
      'Referrer-Policy': 'strict-origin-when-cross-origin',
    },
  },
    esbuild: {
    jsx: 'automatic',
  },
});
),
),
] 



BACKEND
backend[
server(
src(
config[
(
import { v2 as cloudinary } from 'cloudinary';

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

export default cloudinary;
)cloudinary.mjs,
(
export const ROLES = {
    USER: 'user',
    MODERATOR: 'moderator',
    ADMIN: 'admin'
};
export const SERMON_CATEGORIES = [
    'sunday-service', 'bible-study', 'prayer-meeting', 'youth',
    'special', 'faith', 'hope', 'love'
];
export const EVENT_CATEGORIES = [
    'service', 'bible-study', 'prayer', 'youth', 'children',
    'men', 'women', 'fellowship', 'outreach', 'training'
];
export const TESTIMONIAL_CATEGORIES = [
    'salvation', 'healing', 'provision', 'relationship', 'other'
];
export const PRAYER_CATEGORIES = [
    'healing', 'guidance', 'financial', 'relationship', 'thanksgiving', 'other'
];
export const BLOG_CATEGORIES = [
    'announcements', 'devotional', 'testimony', 'teaching', 'news', 'events'
];
export const MINISTRY_STATUS = ['active', 'inactive', 'planning'];
export const VOLUNTEER_STATUS = ['pending', 'approved', 'rejected', 'active', 'inactive'];
export const PAGINATION = {
    DEFAULT_LIMIT: 10,
    MAX_LIMIT: 100
};
)constants.mjs,
(
import { connect } from 'mongoose';

const connectDB = async () => {
  try {
    const conn = await connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
};

export default connectDB;
)db.mjs,
(
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

// Webhook handler for Stripe events
const handleStripeWebhook = async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
  } catch (err) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  // Handle the event
  switch (event.type) {
    case 'payment_intent.succeeded':
      const paymentIntent = event.data.object;
      await handlePaymentIntentSucceeded(paymentIntent);
      break;
    case 'payment_intent.payment_failed':
      const failedPaymentIntent = event.data.object;
      await handlePaymentIntentFailed(failedPaymentIntent);
      break;
    default:
      console.log(`Unhandled event type ${event.type}`);
  }

  res.json({ received: true });
};

// Handle successful payment
const handlePaymentIntentSucceeded = async (paymentIntent) => {
  try {
    const donation = await Donation.findOne({
      stripePaymentIntentId: paymentIntent.id
    });

    if (donation) {
      donation.status = 'completed';
      donation.receiptSent = true;
      donation.receiptSentAt = new Date();
      await donation.save();

      // Send receipt email
      await sendDonationReceipt(donation);
    }
  } catch (error) {
    console.error('Error handling successful payment:', error);
  }
};

// Handle failed payment
const handlePaymentIntentFailed = async (paymentIntent) => {
  try {
    await Donation.findOneAndUpdate(
      { stripePaymentIntentId: paymentIntent.id },
      { status: 'failed' }
    );
  } catch (error) {
    console.error('Error handling failed payment:', error);
  }
};

export default {
  stripe,
  handleStripeWebhook
};
)stripe.mjs,
],
controllers[
(
import User from '../models/User.mjs';
import AdminCode from '../models/AdminCode.mjs';
import Analytics from '../models/Analyitics.mjs';
import { validationResult } from 'express-validator';

// Generate admin code
export async function generateAdminCode(req, res) {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }

        const { description, role = 'admin', maxUsage = 1, expiresInDays = 30 } = req.body;

        const adminCode = new AdminCode({
            description,
            role,
            maxUsage,
            expiresAt: new Date(Date.now() + expiresInDays * 24 * 60 * 60 * 1000),
            createdBy: req.user._id
        });

        await adminCode.save();

        res.status(201).json({
            message: 'Admin code generated successfully',
            code: adminCode.code
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Get all admin codes
export async function getAdminCodes(req, res) {
    try {
        const { page = 1, limit = 10, used } = req.query;

        const query = {};
        if (used !== undefined) {
            query.isUsed = used === 'true';
        }

        const adminCodes = await AdminCode.find(query)
            .populate('createdBy', 'name email')
            .populate('assignedTo', 'name email')
            .sort({ createdAt: -1 })
            .limit(limit * 1)
            .skip((page - 1) * limit);

        const total = await AdminCode.countDocuments(query);

        res.json({
            adminCodes,
            totalPages: Math.ceil(total / limit),
            currentPage: page,
            total
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Get all users
export async function getUsers(req, res) {
    try {
        const { page = 1, limit = 10, role, search } = req.query;

        const query = {};
        if (role) query.role = role;
        if (search) {
            query.$or = [
                { name: { $regex: search, $options: 'i' } },
                { email: { $regex: search, $options: 'i' } }
            ];
        }

        const users = await User.find(query)
            .select('-password -verificationToken -resetPasswordToken')
            .sort({ createdAt: -1 })
            .limit(limit * 1)
            .skip((page - 1) * limit);

        const total = await User.countDocuments(query);

        res.json({
            users,
            totalPages: Math.ceil(total / limit),
            currentPage: page,
            total
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Update user role
export async function updateUserRole(req, res) {
    try {
        const { userId } = req.params;
        const { role } = req.body;

        if (!['user', 'moderator', 'admin'].includes(role)) {
            return res.status(400).json({ message: 'Invalid role' });
        }

        // Prevent self-demotion
        if (userId === req.user._id.toString() && role !== 'admin') {
            return res.status(400).json({ message: 'Cannot change your own role from admin' });
        }

        const user = await User.findByIdAndUpdate(
            userId,
            { role },
            { new: true }
        ).select('-password -verificationToken -resetPasswordToken');

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        res.json({ message: 'User role updated successfully', user });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Deactivate user
export async function deactivateUser(req, res) {
    try {
        const { userId } = req.params;

        // Prevent self-deactivation
        if (userId === req.user._id.toString()) {
            return res.status(400).json({ message: 'Cannot deactivate your own account' });
        }

        const user = await User.findByIdAndUpdate(
            userId,
            { isActive: false },
            { new: true }
        ).select('-password -verificationToken -resetPasswordToken');

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        res.json({ message: 'User deactivated successfully', user });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Activate user
export async function activateUser(req, res) {
    try {
        const { userId } = req.params;

        const user = await User.findByIdAndUpdate(
            userId,
            { isActive: true },
            { new: true }
        ).select('-password -verificationToken -resetPasswordToken');

        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        res.json({ message: 'User activated successfully', user });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Get dashboard statistics
export async function getDashboardStats(req, res) {
    try {
        const [
            totalUsers,
            totalAdmins,
            totalModerators,
            activeUsers,
            newUsersThisWeek,
            totalDonations,
            totalPrayerRequests,
            totalTestimonials
        ] = await Promise.all([
            User.countDocuments(),
            User.countDocuments({ role: 'admin' }),
            User.countDocuments({ role: 'moderator' }),
            User.countDocuments({ isActive: true }),
            User.countDocuments({
                createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
            }),
            // Add counts for other models as needed
            Promise.resolve(0), // Placeholder for donations
            Promise.resolve(0), // Placeholder for prayer requests
            Promise.resolve(0)  // Placeholder for testimonials
        ]);

        // Get recent activity
        const recentActivity = await Analytics.find()
            .populate('userId', 'name email')
            .sort({ createdAt: -1 })
            .limit(10);

        res.json({
            stats: {
                totalUsers,
                totalAdmins,
                totalModerators,
                activeUsers,
                newUsersThisWeek,
                totalDonations,
                totalPrayerRequests,
                totalTestimonials
            },
            recentActivity
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}
)admincontroller.mjs,
(
import Analytics from '../models/Analyitics.mjs';
import User from '../models/User.mjs';
import Donation from '../models/Donation.mjs';
import Event from '../models/Event.mjs';
import Sermon from '../models/Sermon.mjs';
import PrayerRequest from '../models/Prayer.mjs';
import Testimonial from '../models/Testimonial.mjs';

// Get service times
export async function getServiceTimes(req, res) {
  try {
    // This would typically come from settings or a database
    // For now, return sample data
    const serviceTimes = [
      {
        day: 'Sunday',
        time: '10:00 AM',
        description: 'Morning Worship Service',
        type: 'main'
      },
      {
        day: 'Sunday',
        time: '6:00 PM',
        description: 'Evening Service',
        type: 'evening'
      },
      {
        day: 'Wednesday',
        time: '7:00 PM',
        description: 'Bible Study & Prayer Meeting',
        type: 'midweek'
      }
    ];

    res.json(serviceTimes);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get church stats
export async function getChurchStats(req, res) {
  try {
    const [
      totalMembers,
      activeMembers,
      totalDonations,
      totalEvents,
      totalSermons,
      totalPrayers,
      totalTestimonials
    ] = await Promise.all([
      User.countDocuments(),
      User.countDocuments({ isActive: true }),
      Donation.countDocuments({ status: 'completed' }),
      Event.countDocuments({ status: 'scheduled' }),
      Sermon.countDocuments({ status: 'published' }),
      PrayerRequest.countDocuments({ status: 'approved' }),
      Testimonial.countDocuments({ status: 'approved' })
    ]);

    // Calculate total donation amount
    const donationStats = await Donation.aggregate([
      { $match: { status: 'completed' } },
      { $group: { _id: null, totalAmount: { $sum: '$amount' } } }
    ]);

    const totalDonationAmount = donationStats[0]?.totalAmount || 0;

    res.json({
      totalMembers,
      activeMembers,
      totalDonations,
      totalDonationAmount: totalDonationAmount.toFixed(2),
      totalEvents,
      totalSermons,
      totalPrayers,
      totalTestimonials,
      updatedAt: new Date()
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get hero content
export async function getHeroContent(req, res) {
  try {
    // This would typically come from a CMS or database
    const heroContent = {
      title: 'Welcome to Our Church Family',
      subtitle: 'Where Faith, Community, and Love Grow Together',
      backgroundImage: '/images/hero-bg.jpg',
      ctaText: 'Join Us This Sunday',
      ctaLink: '/services',
      featuredVerses: [
        {
          text: '"For where two or three gather in my name, there am I with them."',
          reference: 'Matthew 18:20'
        }
      ]
    };

    res.json(heroContent);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get live status
export async function getLiveStatus(req, res) {
  try {
    const liveSermon = await Sermon.findOne({
      isLive: true,
      liveStreamStatus: { $in: ['scheduled', 'live'] }
    }).select('title speaker liveStreamUrl viewers startTime');

    res.json({
      isLive: !!liveSermon,
      liveSermon: liveSermon || null,
      viewers: liveSermon?.viewers || 0,
      nextService: await getNextServiceTime()
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get dashboard stats (Admin)
export async function getDashboardStats(req, res) {
  try {
    const [
      totalUsers,
      newUsersThisWeek,
      totalDonations,
      donationAmount,
      totalPrayerRequests,
      totalTestimonials,
      upcomingEvents
    ] = await Promise.all([
      User.countDocuments(),
      User.countDocuments({
        createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
      }),
      Donation.countDocuments({ status: 'completed' }),
      Donation.aggregate([
        { $match: { status: 'completed' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]),
      PrayerRequest.countDocuments(),
      Testimonial.countDocuments(),
      Event.countDocuments({
        startTime: { $gte: new Date() },
        status: 'scheduled'
      })
    ]);

    // Get recent activity
    const recentActivity = await Analytics.find()
      .populate('userId', 'name email')
      .sort({ createdAt: -1 })
      .limit(10);

    // Get donation statistics by time period
    const donationStats = await getDonationStats();

    res.json({
      overview: {
        totalUsers,
        newUsersThisWeek,
        totalDonations,
        donationAmount: donationAmount[0]?.total || 0,
        totalPrayerRequests,
        totalTestimonials,
        upcomingEvents
      },
      donationStats,
      recentActivity
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get recent activity (Admin)
export async function getRecentActivity(req, res) {
  try {
    const { page = 1, limit = 20, type } = req.query;

    const query = {};
    if (type) query.type = type;

    const activities = await Analytics.find(query)
      .populate('userId', 'name email')
      .populate('itemId')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Analytics.countDocuments(query);

    res.json({
      activities,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Track analytics event
export async function trackEvent(req, res) {
  try {
    const { type, itemId, metadata } = req.body;

    const analytics = new Analytics({
      type,
      itemId,
      userId: req.user?._id,
      ipAddress: req.ip,
      userAgent: req.get('User-Agent'),
      metadata
    });

    await analytics.save();

    // Update view counts for specific types
    if (type === 'sermon' && itemId) {
      await Sermon.findByIdAndUpdate(itemId, { $inc: { views: 1 } });
    } else if (type === 'event' && itemId) {
      await Event.findByIdAndUpdate(itemId, { $inc: { views: 1 } });
    }

    res.status(201).json({ message: 'Event tracked successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Helper functions
async function getNextServiceTime() {
  const now = new Date();
  const dayOfWeek = now.getDay(); // 0 = Sunday, 1 = Monday, etc.
  
  // Sample service times - in real app, this would come from database
  const serviceTimes = [
    { day: 0, time: '10:00', type: 'main' }, // Sunday 10:00 AM
    { day: 0, time: '18:00', type: 'evening' }, // Sunday 6:00 PM
    { day: 3, time: '19:00', type: 'midweek' } // Wednesday 7:00 PM
  ];

  // Find next service
  for (const service of serviceTimes) {
    const serviceDate = new Date(now);
    const [hours, minutes] = service.time.split(':').map(Number);
    
    // Adjust day if needed
    let daysToAdd = service.day - dayOfWeek;
    if (daysToAdd < 0) daysToAdd += 7;
    
    serviceDate.setDate(now.getDate() + daysToAdd);
    serviceDate.setHours(hours, minutes, 0, 0);

    if (serviceDate > now) {
      return {
        date: serviceDate,
        type: service.type,
        daysUntil: Math.ceil((serviceDate - now) / (1000 * 60 * 60 * 24))
      };
    }
  }

  return null;
}

async function getDonationStats() {
  const now = new Date();
  const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
  const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
  const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());

  const [monthly, quarterly, yearly, allTime] = await Promise.all([
    Donation.aggregate([
      { $match: { status: 'completed', createdAt: { $gte: oneMonthAgo } } },
      { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
    ]),
    Donation.aggregate([
      { $match: { status: 'completed', createdAt: { $gte: threeMonthsAgo } } },
      { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
    ]),
    Donation.aggregate([
      { $match: { status: 'completed', createdAt: { $gte: oneYearAgo } } },
      { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
    ]),
    Donation.aggregate([
      { $match: { status: 'completed' } },
      { $group: { _id: null, total: { $sum: '$amount' }, count: { $sum: 1 } } }
    ])
  ]);

  return {
    monthly: {
      amount: monthly[0]?.total || 0,
      donations: monthly[0]?.count || 0
    },
    quarterly: {
      amount: quarterly[0]?.total || 0,
      donations: quarterly[0]?.count || 0
    },
    yearly: {
      amount: yearly[0]?.total || 0,
      donations: yearly[0]?.count || 0
    },
    allTime: {
      amount: allTime[0]?.total || 0,
      donations: allTime[0]?.count || 0
    }
  };
}
)analyticscontroller.mjs,
(
import jwt from 'jsonwebtoken';
const { sign } = jwt;
import { randomBytes } from 'crypto';
import User from '../models/User.mjs';
import Session from '../models/Session.mjs';
import AuthAttempt from '../models/AuthAttempt.mjs';
import AdminCode from '../models/AdminCode.mjs';
import { sendVerificationEmail, sendPasswordResetEmail } from '../utils/emailService.mjs';
import { validationResult } from 'express-validator';

// Generate JWT token
const generateToken = (user) => {
  const normalizedRole = (user.role || "user").trim().toLowerCase();
  user.role = normalizedRole;

  return sign(
    { id: user._id, email: user.email, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN || "7d" }
  );
};

// Register new user
export async function register(req, res) {
  try {
    console.log('=== REGISTRATION STARTED ===');
    console.log('Request body:', JSON.stringify(req.body, null, 2));

    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('Validation errors:', errors.array());
      return res.status(400).json({
        success: false,
        message: 'Validation failed',
        errors: errors.array()
      });
    }

    const { name, email, password, adminCode } = req.body;
    console.log('Processing email:', email);

    // Check if user already exists
    const existingUser = await User.findOne({ email: email.toLowerCase() });
    console.log('Existing user check:', existingUser ? 'found' : 'not found');

    if (existingUser) {
      // If user exists but is a social login user, allow conversion to local auth
      if (existingUser.authMethod !== 'local') {
        existingUser.password = password;
        existingUser.authMethod = 'local';
        existingUser.name = name || existingUser.name;
        await existingUser.save();

        const token = generateToken(existingUser);

        return res.status(200).json({
          success: true,
          message: 'Account setup completed successfully. Please check your email for verification.',
          token,
          user: existingUser.getPublicProfile() ? existingUser.getPublicProfile() : null,
        });
      }
      return res.status(409).json({
        success: false,
        message: 'User already exists with this email'
      });
    }

    // Handle admin registration
    let role = 'user';
    let isAdminValid = false;

    if (adminCode) {
      isAdminValid = await AdminCode.validateCode(adminCode);
      if (isAdminValid) {
        role = 'admin';
      }
    }

    // Generate verification token FIRST
    console.log('Generating verification token...');
    const verificationToken = randomBytes(32).toString('hex');
    console.log('Generated token:', verificationToken);
    console.log('Token length:', verificationToken.length);

    // Create user WITH verification token
    console.log('Creating new user...');
    const user = new User({
      name: name.trim(),
      email: email.toLowerCase(),
      password,
      authMethod: 'local',
      role,
      verificationToken: verificationToken, // SET TOKEN HERE
      verificationExpires: Date.now() + 24 * 60 * 60 * 1000 // SET EXPIRATION HERE
    });

    // Save user ONCE with all data
    await user.save();
    console.log('User saved with ID:', user._id);

    // VERIFY THE TOKEN WAS ACTUALLY SAVED
    const savedUser = await User.findById(user._id);
    console.log('Token verification - saved token:', savedUser.verificationToken);
    console.log('Token verification - match:', savedUser.verificationToken === verificationToken);
    console.log('Token verification - expiration:', savedUser.verificationExpires);

    // Use admin code if provided and valid
    if (adminCode && isAdminValid) {
      await AdminCode.useCode(adminCode, user._id);
    }

    // Send verification email
    console.log('Sending verification email...');
    await sendVerificationEmail(user.email, verificationToken);
    console.log('Verification email sent successfully');

    // Generate JWT token
    console.log('Generating JWT token...');
    const token = generateToken(user);
    console.log('JWT token generated');

    // Create session
    console.log('Creating session...');
    const session = new Session({
      userId: user._id,
      token,
      userAgent: req.get('User-Agent'),
      ipAddress: req.ip,
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    });
    await session.save();
    console.log('Session created');

    // Log auth attempt
    console.log('Logging auth attempt...');
    await AuthAttempt.logAttempt({
      email: user.email,
      ipAddress: req.ip,
      userAgent: req.get('User-Agent'),
      attemptType: 'register',
      success: true
    });
    console.log('Auth attempt logged');

    console.log('=== REGISTRATION COMPLETED SUCCESSFULLY ===');
    res.status(201).json({
      success: true,
      message: 'User registered successfully. Please check your email for verification.',
      token,
      user: user.getPublicProfile()
    });

  } catch (error) {
    console.error('❌ REGISTRATION ERROR:', error.message);
    console.error('Error stack:', error.stack);
    console.error('Error code:', error.code);

    if (error.code === 11000) {
      return res.status(409).json({
        success: false,
        message: 'User already exists with this email'
      });
    }

    res.status(500).json({
      success: false,
      message: 'Server error during registration',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
}

// Login user
export async function login(req, res) {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: "Validation failed",
        errors: errors.array(),
      });
    }

    const { email, password } = req.body;
    const normalizedEmail = email.toLowerCase();

    // Rate limiting
    const recentAttempts = await AuthAttempt.getRecentAttempts(
      normalizedEmail,
      req.ip,
      15
    );
    if (recentAttempts >= 5) {
      return res.status(429).json({
        success: false,
        message: "Too many login attempts. Please try again later.",
      });
    }

    // Find user
    const user = await User.findOne({ email: normalizedEmail });
    if (!user) {
      await AuthAttempt.logAttempt({
        email: normalizedEmail,
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        attemptType: "login",
        success: false,
        reason: "User not found",
      });
      return res.status(401).json({
        success: false,
        message: "Invalid email or password",
      });
    }

    // Wrong auth method
    if (user.authMethod !== "local") {
      await AuthAttempt.logAttempt({
        email: normalizedEmail,
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        attemptType: "login",
        success: false,
        reason: `Wrong auth method: ${user.authMethod}`,
      });
      return res.status(401).json({
        success: false,
        message: `Please use ${user.authMethod} login or reset your password`,
      });
    }

    // Check password
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      await AuthAttempt.logAttempt({
        email: normalizedEmail,
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
        attemptType: "login",
        success: false,
        reason: "Invalid password",
      });
      return res.status(401).json({
        success: false,
        message: "Invalid email or password",
      });
    }

    // Account deactivated
    if (!user.isActive) {
      return res.status(403).json({
        success: false,
        message: "Account is deactivated. Please contact support.",
      });
    }

    // Email not verified
    if (!user.emailVerified) {
      return res.status(403).json({
        success: false,
        message:
          "Email not verified. Please check your email for verification instructions.",
        code: "EMAIL_NOT_VERIFIED",
        email: user.email,
      });
    }

    // Generate JWT
    const token = generateToken(user);

    // Save/update session (no duplicate token crash)
    await Session.saveOrUpdateSession({
      token,
      userId: user._id,
      userAgent: req.get("User-Agent"),
      ipAddress: req.ip,
      deviceType: "",
      browser: "",
      os: "",
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    });

    // Update last login
    user.lastLogin = new Date();
    user.loginCount += 1;
    await user.save();

    // Log successful attempt
    await AuthAttempt.logAttempt({
      email: normalizedEmail,
      ipAddress: req.ip,
      userAgent: req.get("User-Agent"),
      attemptType: "login",
      success: true,
    });

    // ✅ Single final response
    return res.status(201).json({
      success: true,
      message: "Login successful",
      token,
      user: user.getPublicProfile(),
    });

  } catch (error) {
    console.error("Login error:", error);
    return res.status(500).json({
      success: false,
      message: "Server error during login",
      error:
        process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
}

// Verify email
export async function verifyEmail(req, res) {
  let cleanToken;

  try {
    console.log('=== VERIFICATION REQUEST ===');
    console.log('Token:', req.params.token);
    console.log('IP:', req.ip);
    console.log('User Agent:', req.get('User-Agent'));

    const { token } = req.params;
    cleanToken = token.trim();

    // ADD: Check if this is a duplicate request
    if (global.pendingVerifications?.has(cleanToken)) {
      console.log('⚠️ Duplicate verification request detected');
      return res.status(429).json({
        success: false,
        message: 'Verification already in progress. Please wait a moment.'
      });
    }

    // Track pending verification
    if (!global.pendingVerifications) global.pendingVerifications = new Set();
    global.pendingVerifications.add(cleanToken);

    console.log('=== VERIFICATION DEBUG START ===');
    console.log('Token received:', req.params.token);
    console.log('Token length:', req.params.token.length);
    console.log('Cleaned token:', cleanToken);
    console.log('Cleaned token length:', cleanToken.length);

    // DEBUG: Check ALL users with verification tokens first
    const allUsersWithTokens = await User.find({
      verificationToken: { $exists: true }
    }, 'email verificationToken verificationExpires');

    console.log('All users with verification tokens:', allUsersWithTokens.map(u => ({
      email: u.email,
      token: u.verificationToken,
      tokenLength: u.verificationToken ? u.verificationToken.length : 0,
      expires: u.verificationExpires,
      isExpired: u.verificationExpires && u.verificationExpires < Date.now()
    })));

    // Find user with valid token
    const user = await User.findOne({
      verificationToken: cleanToken,
      verificationExpires: { $gt: Date.now() }
    });

    console.log('User found with matching token:', user ? {
      id: user._id,
      email: user.email,
      token: user.verificationToken,
      tokenLength: user.verificationToken.length,
      expires: user.verificationExpires,
      isExpired: user.verificationExpires < Date.now()
    } : 'NO USER FOUND');

    if (!user) {
      console.log('❌ No user found with valid token');

      // Check if token exists but expired
      const expiredUser = await User.findOne({ verificationToken: cleanToken });
      if (expiredUser) {
        console.log('❌ Token exists but expired for user:', expiredUser.email);
        console.log('Expiration:', expiredUser.verificationExpires);
        console.log('Current time:', new Date());
        console.log('Time difference:', (new Date() - expiredUser.verificationExpires) / 1000 / 60, 'minutes');
      }

      // Check if token exists with different casing/encoding
      const allUsers = await User.find({});
      const similarTokenUsers = allUsers.filter(u =>
        u.verificationToken && u.verificationToken.includes(cleanToken.substring(0, 20))
      );

      if (similarTokenUsers.length > 0) {
        console.log('⚠️  Similar tokens found:', similarTokenUsers.map(u => ({
          email: u.email,
          token: u.verificationToken,
          match: u.verificationToken === cleanToken
        })));
      }

      // Remove from pending before returning
      if (global.pendingVerifications) {
        global.pendingVerifications.delete(cleanToken);
      }

      return res.status(400).json({
        success: false,
        message: 'Invalid or expired verification token'
      });
    }

    console.log('✅ User found, marking email as verified...');
    user.emailVerified = true;
    user.verificationToken = undefined;
    user.verificationExpires = undefined;

    await user.save();
    console.log('✅ Email verified successfully for user:', user.email);

    // Log successful verification
    const jwtToken = generateToken(user);

    console.log('=== VERIFICATION DEBUG END ===');

    // Remove from pending after successful completion
    if (global.pendingVerifications) {
      global.pendingVerifications.delete(cleanToken);
    }

    res.json({
      success: true,
      message: 'Email verified successfully',
      token: jwtToken,
      user: user.getPublicProfile()
    });

  } catch (error) {
    console.error('❌ VERIFICATION ERROR:', error.message);
    console.error('Error stack:', error.stack);

    // Clean up on error
    if (global.pendingVerifications && cleanToken) {
      global.pendingVerifications.delete(cleanToken);
    }

    res.status(500).json({
      success: false,
      message: 'Server error during email verification'
    });
  }
}

// Forgot password
export async function forgotPassword(req, res) {
  try {
    const { email } = req.body;
    const normalizedEmail = email.toLowerCase();

    const user = await User.findOne({ email: normalizedEmail, authMethod: 'local' });
    if (!user) {
      // Don't reveal if email exists or not
      return res.json({
        success: true,
        message: 'If the email exists, password reset instructions will be sent'
      });
    }

    // Generate reset token
    const resetToken = randomBytes(32).toString('hex');
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = Date.now() + 1 * 60 * 60 * 1000;
    await user.save();

    // Send reset email
    await sendPasswordResetEmail(user.email, resetToken);

    res.json({
      success: true,
      message: 'Password reset instructions sent to your email'
    });
  } catch (error) {
    console.error('Forgot password error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error during password reset'
    });
  }
}

// Reset password
export async function resetPassword(req, res) {
  try {
    const { token } = req.params;
    const { password } = req.body;

    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() },
      authMethod: 'local'
    });

    if (!user) {
      return res.status(400).json({
        success: false,
        message: 'Invalid or expired reset token'
      });
    }

    user.password = password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    await user.save();

    res.json({
      success: true,
      message: 'Password reset successfully'
    });
  } catch (error) {
    console.error('Reset password error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error during password reset'
    });
  }
}

// Logout
export async function logout(req, res) {
  try {
    // Invalidate session
    await Session.findOneAndUpdate(
      { token: req.token },
      { isActive: false, loggedOutAt: new Date() }
    );

    res.json({
      success: true,
      message: 'Logged out successfully'
    });
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error during logout'
    });
  }
}

// Get current user
export async function getCurrentUser(req, res) {
  try {
    res.json({
      success: true,
      user: req.user.getPublicProfile()
    });
  } catch (error) {
    console.error('Get current user error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error fetching user data'
    });
  }
}

// Resend verification email
export async function resendVerification(req, res) {
  try {
    const { email } = req.body;
    const normalizedEmail = email.toLowerCase();

    const user = await User.findOne({ email: normalizedEmail, authMethod: 'local' });
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    if (user.emailVerified) {
      return res.status(400).json({
        success: false,
        message: 'Email is already verified'
      });
    }

    // Generate new verification token
    const verificationToken = randomBytes(32).toString('hex');
    user.verificationToken = verificationToken;
    user.verificationExpires = Date.now() + 24 * 60 * 60 * 1000;
    await user.save();

    // Send verification email
    await sendVerificationEmail(user.email, verificationToken);

    res.json({
      success: true,
      message: 'Verification email sent successfully'
    });
  } catch (error) {
    console.error('Resend verification error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error resending verification email'
    });
  }
}
)authcontroller.mjs,
(
import BlogPost from '../models/BlogPost.mjs';
import Favorite from '../models/Favorite.mjs';

// Get all blog posts
export async function getAllBlogPosts(req, res) {
  try {
    const { page = 1, limit = 10, category, status = 'published' } = req.query;
    
    const query = { status };
    if (category) query.category = category;

    const blogPosts = await BlogPost.find(query)
      .populate('author', 'name avatar')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await BlogPost.countDocuments(query);

    res.json({
      blogPosts,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get blog categories
export async function getBlogCategories(req, res) {
  try {
    const categories = await BlogPost.distinct('category');
    res.json(categories);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get favorite blog posts
export async function getFavoriteBlogPosts(req, res) {
  try {
    const favorites = await Favorite.find({
      userId: req.user._id,
      itemType: 'blog'
    }).populate('itemId');

    res.json(favorites.map(fav => fav.itemId));
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Add favorite blog post
export async function addFavoriteBlogPost(req, res) {
  try {
    const { id } = req.params;

    const existingFavorite = await Favorite.findOne({
      userId: req.user._id,
      itemType: 'blog',
      itemId: id
    });

    if (existingFavorite) {
      return res.status(400).json({ message: 'Blog post already in favorites' });
    }

    const favorite = new Favorite({
      userId: req.user._id,
      itemType: 'blog',
      itemId: id
    });

    await favorite.save();
    res.status(201).json({ message: 'Blog post added to favorites' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Remove favorite blog post
export async function removeFavoriteBlogPost(req, res) {
  try {
    const { id } = req.params;

    await Favorite.findOneAndDelete({
      userId: req.user._id,
      itemType: 'blog',
      itemId: id
    });

    res.json({ message: 'Blog post removed from favorites' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Subscribe to newsletter
export async function subscribeToNewsletter(req, res) {
  try {
    const { email } = req.body;

    // In a real application, you would add this email to your newsletter service
    res.json({ message: 'Successfully subscribed to newsletter' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get all blog posts (Admin)
export async function getAllBlogPostsAdmin(req, res) {
  try {
    const { page = 1, limit = 10, status } = req.query;
    
    const query = {};
    if (status) query.status = status;

    const blogPosts = await BlogPost.find(query)
      .populate('author', 'name email')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await BlogPost.countDocuments(query);

    res.json({
      blogPosts,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Create blog post (Admin)
export async function createBlogPost(req, res) {
  try {
    const blogData = req.body;
    
    if (req.file) {
      blogData.imageUrl = req.file.path;
    }

    blogData.author = req.user._id;

    const blogPost = new BlogPost(blogData);
    await blogPost.save();
    await blogPost.populate('author', 'name email');

    res.status(201).json({
      message: 'Blog post created successfully',
      blogPost
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update blog post (Admin)
export async function updateBlogPost(req, res) {
  try {
    const { id } = req.params;
    const blogData = req.body;

    if (req.file) {
      blogData.imageUrl = req.file.path;
    }

    const blogPost = await BlogPost.findByIdAndUpdate(id, blogData, {
      new: true,
      runValidators: true
    }).populate('author', 'name email');

    if (!blogPost) {
      return res.status(404).json({ message: 'Blog post not found' });
    }

    res.json({
      message: 'Blog post updated successfully',
      blogPost
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Delete blog post (Admin)
export async function deleteBlogPost(req, res) {
  try {
    const { id } = req.params;

    const blogPost = await BlogPost.findByIdAndDelete(id);
    
    if (!blogPost) {
      return res.status(404).json({ message: 'Blog post not found' });
    }

    await Favorite.deleteMany({ itemType: 'blog', itemId: id });

    res.json({ message: 'Blog post deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get blog categories (Admin)
export async function getBlogCategoriesAdmin(req, res) {
  try {
    const categories = await BlogPost.aggregate([
      {
        $group: {
          _id: '$category',
          count: { $sum: 1 }
        }
      },
      {
        $sort: { count: -1 }
      }
    ]);

    res.json(categories);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)blogcontroller.mjs,
(
// donationController.mjs
import Donation from '../models/Donation.mjs';
import Stripe from 'stripe';
import paymentService from '../utils/paymentService.mjs';
import User from '../models/User.mjs';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// Create PaymentIntent (for frontend)
export async function createPaymentIntent(req, res) {
  try {
    const { amount, currency = 'usd' } = req.body;

    if (!amount || amount <= 0) {
      return res.status(400).json({ message: 'Invalid donation amount' });
    }

    // Create Stripe PaymentIntent via paymentService
    const intentResponse = await paymentService.createPaymentIntent(
      amount, 
      currency, 
      {
        userId: req.user?._id?.toString() || 'guest',
        purpose: req.body.purpose || 'general'
      }
    );

    if (!intentResponse.success) {
      return res.status(500).json({ message: intentResponse.error });
    }

    res.json({
  clientSecret: intentResponse.clientSecret,
  paymentIntentId: intentResponse.paymentIntentId
});
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get user donations
export async function getUserDonations(req, res) {
  try {
    const { page = 1, limit = 10 } = req.query;

    const donations = await Donation.find({ userId: req.user._id })
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Donation.countDocuments({ userId: req.user._id });

    res.json({
      donations,
      totalPages: Math.ceil(total / limit),
      currentPage: Number(page),
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Create donation & Stripe PaymentIntent
export async function createDonation(req, res) {
  try {
    const { 
      amount, 
      frequency, 
      paymentMethod, 
      isAnonymous, 
      dedication, 
      purpose,
      bankDetails,
      email,
      name
    } = req.body;

    if (!amount || amount <= 0) {
      return res.status(400).json({ message: 'Invalid donation amount' });
    }

    let userId = req.user?._id;
    let donorName = req.user?.name;
    let donorEmail = req.user?.email;
    let stripePaymentIntentId = null;

    // Handle guest donations
    if (!userId) {
      if (!email) {
        return res.status(400).json({ message: 'Email is required for guest donations' });
      }
      donorEmail = email;
      donorName = isAnonymous ? 'Anonymous' : (name || 'Anonymous Donor');
    }

    // Handle card payments
    if (paymentMethod === 'card') {
      const intentResponse = await paymentService.createPaymentIntent(amount, 'usd', {
        userId: userId?.toString() || 'guest',
        frequency,
        isAnonymous: isAnonymous?.toString() || 'false',
        dedication: dedication || '',
        purpose: purpose || 'general'
      });

      if (!intentResponse.success) {
        return res.status(500).json({ message: intentResponse.error });
      }
      stripePaymentIntentId = intentResponse.paymentIntentId;
    }

    // Create donation record
    const donation = new Donation({
      userId: userId || null,
      amount,
      frequency,
      paymentMethod,
      isAnonymous,
      dedication,
      purpose: purpose || 'general',
      bankDetails: paymentMethod === 'bank' ? bankDetails : undefined,
      status: paymentMethod === 'bank' ? 'pending' : 'processing',
      stripePaymentIntentId,
      donorName,
      donorEmail
    });

    await donation.save();

    // For card payments, return client secret for frontend confirmation
    if (paymentMethod === 'card') {
      const intentResponse = await paymentService.createPaymentIntent(amount, 'usd', {
        userId: userId?.toString() || 'guest',
        frequency,
        isAnonymous: isAnonymous?.toString() || 'false',
        dedication: dedication || '',
        purpose: purpose || 'general'
      });

      res.json({
        success: true,
        donationId: donation._id,
        clientSecret: intentResponse.clientSecret,
        requiresAction: paymentMethod === 'card'
      });
    } else {
      // For bank transfers, just confirm creation
      res.json({
        success: true,
        donationId: donation._id,
        message: 'Bank transfer donation created successfully'
      });
    }
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Confirm card payment (after frontend confirmation)
export async function confirmCardPayment(req, res) {
  try {
    const { donationId, paymentIntentId } = req.body;
    
    const donation = await Donation.findById(donationId);
    if (!donation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    // Verify payment intent
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
    
    if (paymentIntent.status === 'succeeded') {
      donation.status = 'completed';
      await donation.save();
      
      res.json({ 
        success: true, 
        message: 'Payment confirmed successfully' 
      });
    } else {
      res.status(400).json({ 
        success: false, 
        message: 'Payment not completed' 
      });
    }
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Download receipt
export async function downloadReceipt(req, res) {
  try {
    const { id } = req.params;

    const donation = await Donation.findOne({
      _id: id,
      $or: [
        { userId: req.user?._id },
        { donorEmail: req.user?.email }
      ],
      status: 'completed'
    });

    if (!donation) {
      return res.status(404).json({ message: 'Receipt not found' });
    }

    res.json({
      message: 'Receipt generated successfully',
      receipt: {
        donationId: donation._id,
        date: donation.createdAt,
        amount: donation.amount,
        donorName: donation.donorName,
        isAnonymous: donation.isAnonymous,
        purpose: donation.purpose
      }
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Admin controllers
export async function getAllDonations(req, res) {
  try {
    const { page = 1, limit = 10, status, paymentMethod } = req.query;

    const query = {};
    if (status) query.status = status;
    if (paymentMethod) query.paymentMethod = paymentMethod;

    const donations = await Donation.find(query)
      .populate('userId', 'name email')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Donation.countDocuments(query);

    res.json({
      donations,
      totalPages: Math.ceil(total / limit),
      currentPage: Number(page),
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

export async function updateDonation(req, res) {
  try {
    const { id } = req.params;
    const donationData = req.body;

    const donation = await Donation.findByIdAndUpdate(id, donationData, {
      new: true,
      runValidators: true
    }).populate('userId', 'name email');

    if (!donation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    res.json({ message: 'Donation updated successfully', donation });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

export async function getDonationStats(req, res) {
  try {
    const totalDonations = await Donation.countDocuments();
    const completedDonations = await Donation.countDocuments({ status: 'completed' });
    
    const totalAmount = await Donation.aggregate([
      { $match: { status: 'completed' } },
      { $group: { _id: null, total: { $sum: '$amount' } } }
    ]);

    const frequencyStats = await Donation.aggregate([
      { $match: { status: 'completed' } },
      {
        $group: {
          _id: '$frequency',
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' }
        }
      }
    ]);

    const monthlyStats = await Donation.aggregate([
      {
        $match: {
          status: 'completed',
          createdAt: { $gte: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000) }
        }
      },
      {
        $group: {
          _id: {
            year: { $year: '$createdAt' },
            month: { $month: '$createdAt' }
          },
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' }
        }
      },
      { $sort: { '_id.year': 1, '_id.month': 1 } }
    ]);

    const paymentMethodStats = await Donation.aggregate([
      { $match: { status: 'completed' } },
      {
        $group: {
          _id: '$paymentMethod',
          count: { $sum: 1 },
          totalAmount: { $sum: '$amount' }
        }
      }
    ]);

    res.json({
      totalDonations,
      completedDonations,
      totalAmount: totalAmount[0]?.total || 0,
      frequencyStats,
      monthlyStats,
      paymentMethodStats
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

export async function getRecentDonations(req, res) {
  try {
    const donations = await Donation.find({ status: 'completed' })
      .populate('userId', 'name email')
      .sort({ createdAt: -1 })
      .limit(10);

    res.json(donations);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

export async function exportDonations(req, res) {
  try {
    const { format = 'csv' } = req.query;
    const donations = await Donation.find()
      .populate('userId', 'name email')
      .sort({ createdAt: -1 });

    if (format === 'csv') {
      const csvData = donations.map(d => ({
        id: d._id,
        date: d.createdAt,
        amount: d.amount,
        donorName: d.donorName,
        donorEmail: d.donorEmail,
        status: d.status,
        frequency: d.frequency,
        paymentMethod: d.paymentMethod,
        purpose: d.purpose
      }));

      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', 'attachment; filename=donations.csv');

      let csv = 'ID,Date,Amount,Donor Name,Donor Email,Status,Frequency,Payment Method,Purpose\n';
      csvData.forEach(row => {
        csv += `${row.id},${row.date},${row.amount},${row.donorName},${row.donorEmail},${row.status},${row.frequency},${row.paymentMethod},${row.purpose}\n`;
      });

      return res.send(csv);
    }

    res.json(donations);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)donationcontroller.mjs,
(
import Event from '../models/Event.mjs'; // FIXED: Only import models
import RSVP from '../models/RSVP.mjs';
import Favorite from '../models/Favorite.mjs';

// Get all events
export async function getAllEvents(req, res) {
    try {
        const { page = 1, limit = 10, category, upcoming } = req.query;

        const query = {};
        if (category) query.category = category;
        if (upcoming === 'true') {
            query.startTime = { $gte: new Date() };
        }

        // FIXED: Use Event.find() instead of find()
        const events = await Event.find(query)
            .sort({ startTime: 1 })
            .limit(limit * 1)
            .skip((page - 1) * limit);

        // FIXED: Use Event.countDocuments() instead of countDocuments()
        const total = await Event.countDocuments(query);

        res.json({
            events,
            totalPages: Math.ceil(total / limit),
            currentPage: page,
            total
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Get upcoming events
export async function getUpcomingEvents(req, res) {
    try {
        const { limit = 3 } = req.query;
        // FIXED: Use Event.find() instead of find()
        const events = await Event.find({
            startTime: { $gte: new Date() },
            status: 'scheduled'
        })
            .sort({ startTime: 1 })
            .limit(parseInt(limit));

        res.json(events);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Get user RSVPs
export async function getUserRsvps(req, res) {
    try {
        // FIXED: Use RSVP.find() instead of _find()
        const rsvps = await RSVP.find({ userId: req.user._id })
            .populate('eventId', 'title startTime location')
            .select('eventId status guests');

        res.json(rsvps);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Get user favorite events
export async function getUserFavorites(req, res) {
    try {
        // FIXED: Use Favorite.find() instead of __find()
        const favorites = await Favorite.find({
            userId: req.user._id,
            itemType: 'event'
        }).populate('itemId');

        res.json(favorites.map(fav => fav.itemId));
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// RSVP for event
export async function rsvpForEvent(req, res) {
    try {
        const { id } = req.params;
        const { guests = 1, guestNames = [], dietaryRestrictions, specialRequests } = req.body;

        // FIXED: Use Event.findById() instead of findById()
        const event = await Event.findById(id);
        if (!event) {
            return res.status(404).json({ message: 'Event not found' });
        }

        // Check capacity
        if (event.capacity > 0 && (event.registered + guests) > event.capacity) {
            return res.status(400).json({ message: 'Event is at capacity' });
        }

        // FIXED: Use RSVP.findOne() instead of findOne()
        const existingRsvp = await RSVP.findOne({
            userId: req.user._id,
            eventId: id
        });

        if (existingRsvp) {
            return res.status(400).json({ message: 'You have already RSVPed for this event' });
        }

        const rsvp = new RSVP({
            userId: req.user._id,
            eventId: id,
            guests,
            guestNames,
            dietaryRestrictions,
            specialRequests,
            status: 'confirmed'
        });

        await rsvp.save();

        // Update event registration count
        event.registered += guests;
        await event.save();

        res.status(201).json({
            message: 'RSVP submitted successfully',
            rsvp
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Cancel RSVP
export async function cancelRsvp(req, res) {
    try {
        const { id } = req.params;

        // FIXED: Use RSVP.findOneAndDelete() instead of findOneAndDelete()
        const rsvp = await RSVP.findOneAndDelete({
            userId: req.user._id,
            eventId: id
        });

        if (!rsvp) {
            return res.status(404).json({ message: 'RSVP not found' });
        }

        // Update event registration count
        // FIXED: Use Event.findById() instead of findById()
        const event = await Event.findById(id);
        if (event) {
            event.registered = Math.max(0, event.registered - rsvp.guests);
            await event.save();
        }

        res.json({ message: 'RSVP cancelled successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Add favorite event
export async function addFavoriteEvent(req, res) {
    try {
        const { id } = req.params;

        // FIXED: Use Favorite.findOne() instead of _findOne()
        const existingFavorite = await Favorite.findOne({
            userId: req.user._id,
            itemType: 'event',
            itemId: id
        });

        if (existingFavorite) {
            return res.status(400).json({ message: 'Event already in favorites' });
        }

        const favorite = new Favorite({
            userId: req.user._id,
            itemType: 'event',
            itemId: id
        });

        await favorite.save();
        res.status(201).json({ message: 'Event added to favorites' });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Remove favorite event
export async function removeFavoriteEvent(req, res) {
    try {
        const { id } = req.params;

        // FIXED: Use Favorite.findOneAndDelete() instead of _findOneAndDelete()
        await Favorite.findOneAndDelete({
            userId: req.user._id,
            itemType: 'event',
            itemId: id
        });

        res.json({ message: 'Event removed from favorites' });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Create event (Admin)
export async function createEvent(req, res) {
    try {
        const eventData = req.body;

        if (req.file) {
            eventData.imageUrl = req.file.path;
        }

        const event = new Event(eventData);
        await event.save();

        res.status(201).json({
            message: 'Event created successfully',
            event
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Update event (Admin)
export async function updateEvent(req, res) {
    try {
        const { id } = req.params;
        const eventData = req.body;

        if (req.file) {
            eventData.imageUrl = req.file.path;
        }

        // FIXED: Use Event.findByIdAndUpdate() instead of findByIdAndUpdate()
        const event = await Event.findByIdAndUpdate(id, eventData, {
            new: true,
            runValidators: true
        });

        if (!event) {
            return res.status(404).json({ message: 'Event not found' });
        }

        res.json({
            message: 'Event updated successfully',
            event
        });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// Delete event (Admin)
export async function deleteEvent(req, res) {
    try {
        const { id } = req.params;

        // FIXED: Use Event.findByIdAndDelete() instead of findByIdAndDelete()
        const event = await Event.findByIdAndDelete(id);

        if (!event) {
            return res.status(404).json({ message: 'Event not found' });
        }

        // Also delete related RSVPs and favorites
        // FIXED: Use RSVP.deleteMany() instead of deleteMany()
        await RSVP.deleteMany({ eventId: id });
        // FIXED: Use Favorite.deleteMany() instead of _deleteMany()
        await Favorite.deleteMany({ itemType: 'event', itemId: id });

        res.json({ message: 'Event deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}
)eventcontroller.mjs,
(
// ministryController.mjs

import Ministry from '../models/Ministry.mjs';
import Volunteer from '../models/Volunteer.mjs';
import User from '../models/User.mjs';

// Get all ministries
export async function getAllMinistries(req, res) {
  try {
    const { page = 1, limit = 10, status, category } = req.query;

    const query = {};
    if (status) query.status = status;
    if (category) query.tags = category;

    const ministries = await Ministry.find(query)
      .populate('leaders.user', 'name email avatar')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Ministry.countDocuments(query);

    res.json({
      ministries,
      totalPages: Math.ceil(total / limit),
      currentPage: Number(page),
      total,
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get volunteer opportunities
export async function getVolunteerOpportunities(req, res) {
  try {
    const ministries = await Ministry.find({ status: 'active' })
      .select('name description volunteerNeeds')
      .sort({ name: 1 });

    res.json(ministries);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get user's ministries and volunteer roles
export async function getUserMinistries(req, res) {
  try {
    const volunteerRoles = await Volunteer.find({ userId: req.user._id })
      .populate('ministryId', 'name description imageUrl')
      .select('ministryId role status');

    res.json(volunteerRoles);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Volunteer for ministry
export async function volunteerForMinistry(req, res) {
  try {
    const { id } = req.params;
    const { interests, availability, skills, experience, message } = req.body;

    const existingVolunteer = await Volunteer.findOne({
      userId: req.user._id,
      ministryId: id,
    });

    if (existingVolunteer) {
      return res
        .status(400)
        .json({ message: 'You have already applied to volunteer for this ministry' });
    }

    const volunteer = new Volunteer({
      userId: req.user._id,
      ministryId: id,
      interests,
      availability,
      skills,
      experience,
      message,
      status: 'pending',
    });

    await volunteer.save();
    await volunteer.populate('ministryId', 'name');

    res.status(201).json({
      message: 'Volunteer application submitted successfully',
      volunteer,
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Contact ministry leaders
export async function contactMinistryLeaders(req, res) {
  try {
    const { id } = req.params;
    const { message } = req.body;

    const ministry = await Ministry.findById(id).populate('leaders.user', 'email name');

    if (!ministry) {
      return res.status(404).json({ message: 'Ministry not found' });
    }

    // In a real application, send emails to ministry leaders here
    const leaderEmails = ministry.leaders.map((leader) => leader.user.email);

    res.json({
      message: 'Message sent to ministry leaders successfully',
      recipients: leaderEmails,
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Create ministry (Admin)
export async function createMinistry(req, res) {
  try {
    const ministryData = req.body;

    if (req.file) {
      ministryData.imageUrl = req.file.path;
    }

    const ministry = new Ministry(ministryData);
    await ministry.save();

    res.status(201).json({
      message: 'Ministry created successfully',
      ministry,
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update ministry (Admin)
export async function updateMinistry(req, res) {
  try {
    const { id } = req.params;
    const ministryData = req.body;

    if (req.file) {
      ministryData.imageUrl = req.file.path;
    }

    const ministry = await Ministry.findByIdAndUpdate(id, ministryData, {
      new: true,
      runValidators: true,
    });

    if (!ministry) {
      return res.status(404).json({ message: 'Ministry not found' });
    }

    res.json({
      message: 'Ministry updated successfully',
      ministry,
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Delete ministry (Admin)
export async function deleteMinistry(req, res) {
  try {
    const { id } = req.params;

    const ministry = await Ministry.findByIdAndDelete(id);

    if (!ministry) {
      return res.status(404).json({ message: 'Ministry not found' });
    }

    // Also delete related volunteers
    await Volunteer.deleteMany({ ministryId: id });

    res.json({ message: 'Ministry deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get ministry stats (Admin)
export async function getMinistryStats(req, res) {
  try {
    const totalMinistries = await Ministry.countDocuments();
    const activeMinistries = await Ministry.countDocuments({ status: 'active' });
    const totalVolunteers = await Volunteer.countDocuments();
    const pendingVolunteers = await Volunteer.countDocuments({ status: 'pending' });

    const ministryStats = await Ministry.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
        },
      },
    ]);

    res.json({
      totalMinistries,
      activeMinistries,
      totalVolunteers,
      pendingVolunteers,
      statusDistribution: ministryStats,
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get ministry volunteers (Admin)
export async function getMinistryVolunteers(req, res) {
  try {
    const { id } = req.params;
    const { status } = req.query;

    const query = { ministryId: id };
    if (status) query.status = status;

    const volunteers = await Volunteer.find(query)
      .populate('userId', 'name email avatar')
      .sort({ createdAt: -1 });

    res.json(volunteers);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get ministry categories
export async function getMinistryCategories(req, res) {
  try {
    const categories = await Ministry.distinct('tags');
    res.json(categories.filter((cat) => cat)); // Remove empty/null values
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)ministrycontroller.mjs,
(
import PrayerRequest from '../models/Prayer.mjs';

// Get all prayer requests
export async function getAllPrayerRequests(req, res) {
  try {
    const { page = 1, limit = 10, category } = req.query;

    const query = { status: 'approved', isPrivate: false };
    if (category) query.category = category;

    const prayerRequests = await PrayerRequest.find(query)
      .sort({ createdAt: -1 })
      .limit(Number(limit))
      .skip((page - 1) * limit);

    const total = await PrayerRequest.countDocuments(query);

    res.json({
      prayerRequests,
      totalPages: Math.ceil(total / limit),
      currentPage: Number(page),
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get prayer team
export async function getPrayerTeam(req, res) {
  try {
    res.json({
      team: [
        { name: 'Prayer Team Leader', role: 'Coordinator' },
        { name: 'Intercessory Prayer Group', role: 'Weekly Meeting' }
      ],
      meetingTimes: 'Wednesdays at 7:00 PM'
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get prayer meetings
export async function getPrayerMeetings(req, res) {
  try {
    res.json([
      {
        day: 'Wednesday',
        time: '7:00 PM',
        location: 'Church Sanctuary',
        type: 'Intercessory Prayer'
      },
      {
        day: 'Sunday',
        time: '8:30 AM',
        location: 'Prayer Room',
        type: 'Pre-Service Prayer'
      }
    ]);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Submit prayer request
export async function submitPrayerRequest(req, res) {
  try {
    const prayerData = req.body;

    if (req.user) {
      prayerData.userId = req.user._id;
    }

    const prayerRequest = new PrayerRequest(prayerData);
    await prayerRequest.save();

    res.status(201).json({
      message: 'Prayer request submitted successfully',
      prayerRequest
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Pray for request
export async function prayForRequest(req, res) {
  try {
    const { id } = req.params;

    const prayerRequest = await PrayerRequest.findById(id);
    if (!prayerRequest) {
      return res.status(404).json({ message: 'Prayer request not found' });
    }

    if (req.user) {
      const alreadyPrayed = prayerRequest.prayedBy.some(
        prayer => prayer.user.toString() === req.user._id.toString()
      );

      if (!alreadyPrayed) {
        prayerRequest.prayedBy.push({ user: req.user._id, prayedAt: new Date() });
        prayerRequest.prayerCount += 1;
        await prayerRequest.save();
      }
    } else {
      prayerRequest.prayerCount += 1;
      await prayerRequest.save();
    }

    res.json({
      message: 'Prayer recorded',
      prayerCount: prayerRequest.prayerCount
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get all prayer requests (Admin)
export async function getAllPrayerRequestsAdmin(req, res) {
  try {
    const { page = 1, limit = 10, status } = req.query;

    const query = {};
    if (status) query.status = status;

    const prayerRequests = await PrayerRequest.find(query)
      .populate('userId', 'name email')
      .sort({ createdAt: -1 })
      .limit(Number(limit))
      .skip((page - 1) * limit);

    const total = await PrayerRequest.countDocuments(query);

    res.json({
      prayerRequests,
      totalPages: Math.ceil(total / limit),
      currentPage: Number(page),
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update prayer request (Admin)
export async function updatePrayerRequest(req, res) {
  try {
    const { id } = req.params;
    const prayerData = req.body;

    const prayerRequest = await PrayerRequest.findByIdAndUpdate(id, prayerData, {
      new: true,
      runValidators: true
    });

    if (!prayerRequest) {
      return res.status(404).json({ message: 'Prayer request not found' });
    }

    res.json({
      message: 'Prayer request updated successfully',
      prayerRequest
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Delete prayer request (Admin)
export async function deletePrayerRequest(req, res) {
  try {
    const { id } = req.params;

    const prayerRequest = await PrayerRequest.findByIdAndDelete(id);
    if (!prayerRequest) {
      return res.status(404).json({ message: 'Prayer request not found' });
    }

    res.json({ message: 'Prayer request deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get prayer stats (Admin)
export async function getPrayerStats(req, res) {
  try {
    const totalPrayers = await PrayerRequest.countDocuments();
    const answeredPrayers = await PrayerRequest.countDocuments({ status: 'answered' });
    const pendingPrayers = await PrayerRequest.countDocuments({ status: 'pending' });
    const privatePrayers = await PrayerRequest.countDocuments({ isPrivate: true });

    const categoryStats = await PrayerRequest.aggregate([
      { $group: { _id: '$category', count: { $sum: 1 } } }
    ]);

    const urgencyStats = await PrayerRequest.aggregate([
      { $group: { _id: '$urgency', count: { $sum: 1 } } }
    ]);

    const totalPrayersCount = await PrayerRequest.aggregate([
      { $group: { _id: null, total: { $sum: '$prayerCount' } } }
    ]);

    res.json({
      totalPrayers,
      answeredPrayers,
      pendingPrayers,
      privatePrayers,
      totalPrayersCount: totalPrayersCount[0]?.total || 0,
      categoryStats,
      urgencyStats
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)prayercontrolller.mjs,
(
import Sermon from '../models/Sermon.mjs';
import Favorite from '../models/Favorite.mjs';

// Get all sermons
export async function getAllSermons(req, res) {
  try {
    const { page = 1, limit = 10, category, speaker, featured, series } = req.query;
    
    const query = {};
    if (category) query.category = category;
    if (speaker) query.speaker = { $regex: speaker, $options: 'i' };
    if (featured === 'true') query.isFeatured = true;
    if (series) query.series = { $regex: series, $options: 'i' };

    const sermons = await Sermon.find(query)
      .sort({ date: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Sermon.countDocuments(query);

    res.json({
      sermons,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get live sermons
export async function getLiveSermons(req, res) {
  try {
    const liveSermons = await Sermon.find({
      isLive: true,
      liveStreamStatus: { $in: ['scheduled', 'live'] }
    }).sort({ date: -1 });

    res.json(liveSermons);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get sermon categories
export async function getSermonCategories(req, res) {
  try {
    const categories = await Sermon.distinct('category');
    res.json(categories);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get featured sermons
export async function getFeaturedSermons(req, res) {
  try {
    const { limit = 3 } = req.query;
    const sermons = await Sermon.find({ isFeatured: true })
      .sort({ date: -1 })
      .limit(parseInt(limit));

    res.json(sermons);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get favorite sermons
export async function getFavoriteSermons(req, res) {
  try {
    const favorites = await Favorite.find({
      userId: req.user._id,
      itemType: 'sermon'
    }).populate('itemId');

    res.json(favorites.map(fav => fav.itemId));
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Add favorite sermon
export async function addFavoriteSermon(req, res) {
  try {
    const { id } = req.params;

    const existingFavorite = await Favorite.findOne({
      userId: req.user._id,
      itemType: 'sermon',
      itemId: id
    });

    if (existingFavorite) {
      return res.status(400).json({ message: 'Sermon already in favorites' });
    }

    const favorite = new Favorite({
      userId: req.user._id,
      itemType: 'sermon',
      itemId: id
    });

    await favorite.save();
    res.status(201).json({ message: 'Sermon added to favorites' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Remove favorite sermon
export async function removeFavoriteSermon(req, res) {
  try {
    const { id } = req.params;

    await Favorite.findOneAndDelete({
      userId: req.user._id,
      itemType: 'sermon',
      itemId: id
    });

    res.json({ message: 'Sermon removed from favorites' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Create sermon (Admin)
export async function createSermon(req, res) {
  try {
    const sermonData = req.body;
    
    if (req.files) {
      if (req.files.audio) sermonData.audioUrl = req.files.audio[0].path;
      if (req.files.video) sermonData.videoUrl = req.files.video[0].path;
      if (req.files.image) sermonData.imageUrl = req.files.image[0].path;
    }

    const sermon = new Sermon(sermonData);
    await sermon.save();

    res.status(201).json({
      message: 'Sermon created successfully',
      sermon
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update sermon (Admin)
export async function updateSermon(req, res) {
  try {
    const { id } = req.params;
    const sermonData = req.body;

    if (req.files) {
      if (req.files.audio) sermonData.audioUrl = req.files.audio[0].path;
      if (req.files.video) sermonData.videoUrl = req.files.video[0].path;
      if (req.files.image) sermonData.imageUrl = req.files.image[0].path;
    }

    const sermon = await Sermon.findByIdAndUpdate(id, sermonData, {
      new: true,
      runValidators: true
    });

    if (!sermon) {
      return res.status(404).json({ message: 'Sermon not found' });
    }

    res.json({
      message: 'Sermon updated successfully',
      sermon
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Delete sermon (Admin)
export async function deleteSermon(req, res) {
  try {
    const { id } = req.params;

    const sermon = await Sermon.findByIdAndDelete(id);
    
    if (!sermon) {
      return res.status(404).json({ message: 'Sermon not found' });
    }

    await Favorite.deleteMany({ itemType: 'sermon', itemId: id });

    res.json({ message: 'Sermon deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get sermon stats (Admin)
export async function getSermonStats(req, res) {
  try {
    const totalSermons = await Sermon.countDocuments();
    const publishedSermons = await Sermon.countDocuments({ status: 'published' });
    const liveSermons = await Sermon.countDocuments({ isLive: true });
    const totalViews = await Sermon.aggregate([
      { $group: { _id: null, total: { $sum: '$views' } } }
    ]);

    const categoryStats = await Sermon.aggregate([
      {
        $group: {
          _id: '$category',
          count: { $sum: 1 },
          totalViews: { $sum: '$views' }
        }
      }
    ]);

    res.json({
      totalSermons,
      publishedSermons,
      liveSermons,
      totalViews: totalViews[0]?.total || 0,
      categoryStats
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Start live stream (Admin)
export async function startLiveStream(req, res) {
  try {
    const { sermonId, liveStreamUrl } = req.body;

    const sermon = await Sermon.findByIdAndUpdate(
      sermonId,
      {
        isLive: true,
        liveStreamStatus: 'live',
        liveStreamUrl,
        date: new Date()
      },
      { new: true }
    );

    if (!sermon) {
      return res.status(404).json({ message: 'Sermon not found' });
    }

    res.json({
      message: 'Live stream started successfully',
      sermon
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Stop live stream (Admin)
export async function stopLiveStream(req, res) {
  try {
    const { sermonId } = req.body;

    const sermon = await Sermon.findByIdAndUpdate(
      sermonId,
      {
        isLive: false,
        liveStreamStatus: 'ended'
      },
      { new: true }
    );

    if (!sermon) {
      return res.status(404).json({ message: 'Sermon not found' });
    }

    res.json({
      message: 'Live stream stopped successfully',
      sermon
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)sermoncontroller.mjs,
(
import Setting from '../models/Setting.mjs';

// Get settings
export async function getSettings(req, res) {
  try {
    let settings = await Setting.findOne();
    
    if (!settings) {
      // Create default settings if none exist
      settings = new Setting({
        churchName: 'Our Church',
        contactEmail: 'info@church.com',
        contactPhone: '(555) 123-4567'
      });
      await settings.save();
    }

    res.json(settings);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update settings (Admin)
export async function updateSettings(req, res) {
  try {
    const settingsData = req.body;

    let settings = await Setting.findOne();
    
    if (!settings) {
      settings = new Setting(settingsData);
      await settings.save();
    } else {
      settings = await Setting.findOneAndUpdate(
        {},
        settingsData,
        { new: true, runValidators: true, upsert: true }
      );
    }

    res.json({
      message: 'Settings updated successfully',
      settings
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Reset settings to default (Admin)
export async function resetSettings(req, res) {
  try {
    await Setting.deleteMany({});

    const defaultSettings = new Setting({
      churchName: 'Our Church',
      contactEmail: 'info@church.com',
      contactPhone: '(555) 123-4567',
      serviceTimes: [
        { day: 'Sunday', time: '10:00 AM', description: 'Morning Service' },
        { day: 'Wednesday', time: '7:00 PM', description: 'Bible Study' }
      ]
    });

    await defaultSettings.save();

    res.json({
      message: 'Settings reset to default successfully',
      settings: defaultSettings
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)settingcontroller.mjs,
(
import Testimonial from '../models/Testimonial.mjs';

// Get all testimonials
export async function getAllTestimonials(req, res) {
  try {
    const { page = 1, limit = 10, category, approved } = req.query;

    const query = {};
    if (category) query.category = category;
    if (approved === 'true') query.status = { $in: ['approved', 'featured'] };

    const testimonials = await Testimonial.find(query)
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Testimonial.countDocuments(query);

    res.json({
      testimonials,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get approved testimonials
export async function getApprovedTestimonials(req, res) {
  try {
    const { limit = 6 } = req.query;
    const testimonials = await Testimonial.find({
      status: { $in: ['approved', 'featured'] }
    })
      .sort({ featuredAt: -1, createdAt: -1 })
      .limit(parseInt(limit));

    res.json(testimonials);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get video testimonials
export async function getVideoTestimonials(req, res) {
  try {
    const testimonials = await Testimonial.find({
      isVideo: true,
      status: { $in: ['approved', 'featured'] }
    }).sort({ createdAt: -1 });

    res.json(testimonials);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get testimonial categories
export async function getTestimonialCategories(req, res) {
  try {
    const categories = await Testimonial.distinct('category');
    res.json(categories);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Submit testimonial
export async function submitTestimonial(req, res) {
  try {
    const testimonialData = req.body;

    if (req.file) {
      testimonialData.imageUrl = req.file.path;
    }

    const testimonial = new Testimonial({
      ...testimonialData,
      status: 'pending'
    });

    await testimonial.save();

    res.status(201).json({
      message:
        'Testimonial submitted successfully. It will be reviewed before publishing.',
      testimonial
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get all testimonials (Admin)
export async function getAllTestimonialsAdmin(req, res) {
  try {
    const { page = 1, limit = 10, status } = req.query;

    const query = {};
    if (status) query.status = status;

    const testimonials = await Testimonial.find(query)
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await Testimonial.countDocuments(query);

    res.json({
      testimonials,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Create testimonial (Admin)
export async function createTestimonial(req, res) {
  try {
    const testimonialData = req.body;

    if (req.file) {
      testimonialData.imageUrl = req.file.path;
    }

    const testimonial = new Testimonial(testimonialData);
    await testimonial.save();

    res.status(201).json({
      message: 'Testimonial created successfully',
      testimonial
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update testimonial (Admin)
export async function updateTestimonial(req, res) {
  try {
    const { id } = req.params;
    const testimonialData = req.body;

    if (req.file) {
      testimonialData.imageUrl = req.file.path;
    }

    const testimonial = await Testimonial.findByIdAndUpdate(id, testimonialData, {
      new: true,
      runValidators: true
    });

    if (!testimonial) {
      return res.status(404).json({ message: 'Testimonial not found' });
    }

    res.json({
      message: 'Testimonial updated successfully',
      testimonial
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Delete testimonial (Admin)
export async function deleteTestimonial(req, res) {
  try {
    const { id } = req.params;

    const testimonial = await Testimonial.findByIdAndDelete(id);

    if (!testimonial) {
      return res.status(404).json({ message: 'Testimonial not found' });
    }

    res.json({ message: 'Testimonial deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get testimonial stats (Admin)
export async function getTestimonialStats(req, res) {
  try {
    const totalTestimonials = await Testimonial.countDocuments();
    const approvedTestimonials = await Testimonial.countDocuments({
      status: 'approved'
    });
    const featuredTestimonials = await Testimonial.countDocuments({
      status: 'featured'
    });
    const pendingTestimonials = await Testimonial.countDocuments({
      status: 'pending'
    });

    const categoryStats = await Testimonial.aggregate([
      {
        $group: {
          _id: '$category',
          count: { $sum: 1 }
        }
      }
    ]);

    const statusStats = await Testimonial.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    res.json({
      totalTestimonials,
      approvedTestimonials,
      featuredTestimonials,
      pendingTestimonials,
      categoryStats,
      statusStats
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)testimonialcontroller.mjs,
(
import User from '../models/User.mjs';

// Get current user profile
export async function getCurrentUser(req, res) {
  try {
    const user = await User.findById(req.user._id)
      .select('-password -verificationToken -resetPasswordToken -adminCode');
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update user profile
export async function updateProfile(req, res) {
  try {
    const { 
      firstName, 
      lastName, 
      phone, 
      address, 
      communicationPreferences,
      volunteerProfile
    } = req.body;

    const updateData = {};
    if (firstName !== undefined) updateData.firstName = firstName;
    if (lastName !== undefined) updateData.lastName = lastName;
    if (phone !== undefined) updateData.phone = phone;
    if (address !== undefined) updateData.address = address;
    if (communicationPreferences !== undefined) updateData.communicationPreferences = communicationPreferences;
    if (volunteerProfile !== undefined) updateData.volunteerProfile = volunteerProfile;

    const user = await User.findByIdAndUpdate(
      req.user._id,
      updateData,
      { new: true, runValidators: true }
    ).select('-password -verificationToken -resetPasswordToken -adminCode');

    res.json({
      message: 'Profile updated successfully',
      user
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Add family member
export async function addFamilyMember(req, res) {
  try {
    const { name, relationship, age } = req.body;

    const user = await User.findByIdAndUpdate(
      req.user._id,
      { $push: { familyMembers: { name, relationship, age } } },
      { new: true, runValidators: true }
    ).select('familyMembers');

    res.json({
      message: 'Family member added successfully',
      familyMembers: user.familyMembers
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Remove family member
export async function removeFamilyMember(req, res) {
  try {
    const { memberId } = req.params;

    const user = await User.findByIdAndUpdate(
      req.user._id,
      { $pull: { familyMembers: { _id: memberId } } },
      { new: true }
    ).select('familyMembers');

    res.json({
      message: 'Family member removed successfully',
      familyMembers: user.familyMembers
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get user dashboard data
export async function getUserDashboard(req, res) {
  try {
    const user = await User.findById(req.user._id)
      .select('name firstName lastName email role avatar memberSince membershipStatus smallGroup familyMembers volunteerStats');
    
    // In a real application, you would also fetch:
    // - Recent donations
    // - Upcoming events
    // - Volunteer applications
    // - etc.

    res.json({
      user,
      stats: {
        donationCount: 0, // Would come from donations service
        eventCount: 0,    // Would come from events service
        volunteerApplications: 0 // Would come from volunteer service
      }
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get all users (Admin)
export async function getAllUsers(req, res) {
  try {
    const { page = 1, limit = 10, role, search, membershipStatus } = req.query;
    
    const query = {};
    if (role) query.role = role;
    if (membershipStatus) query.membershipStatus = membershipStatus;
    if (search) {
      query.$or = [
        { name: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
        { firstName: { $regex: search, $options: 'i' } },
        { lastName: { $regex: search, $options: 'i' } }
      ];
    }

    const users = await User.find(query)
      .select('-password -verificationToken -resetPasswordToken -adminCode')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await User.countDocuments(query);

    res.json({
      users,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Create user (Admin)
export async function createUser(req, res) {
  try {
    const { name, email, password, role, phone, address, firstName, lastName } = req.body;

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists with this email' });
    }

    const user = new User({
      name: name || `${firstName} ${lastName}`.trim(),
      firstName,
      lastName,
      email,
      password,
      role: role || 'user',
      phone,
      address,
      emailVerified: true // Admin-created users are automatically verified
    });

    await user.save();

    res.status(201).json({
      message: 'User created successfully',
      user: {
        id: user._id,
        name: user.name,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        role: user.role,
        phone: user.phone,
        address: user.address
      }
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update user (Admin)
export async function updateUser(req, res) {
  try {
    const { id } = req.params;
    const { name, email, role, phone, address, isActive, firstName, lastName, membershipStatus } = req.body;

    const user = await User.findByIdAndUpdate(
      id,
      { name, firstName, lastName, email, role, phone, address, isActive, membershipStatus },
      { new: true, runValidators: true }
    ).select('-password -verificationToken -resetPasswordToken');

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json({
      message: 'User updated successfully',
      user
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Delete user (Admin)
export async function deleteUser(req, res) {
  try {
    const { id } = req.params;

    // Prevent self-deletion
    if (id === req.user._id.toString()) {
      return res.status(400).json({ message: 'Cannot delete your own account' });
    }

    const user = await User.findByIdAndDelete(id);
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json({ message: 'User deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get user roles (Admin)
export async function getUserRoles(req, res) {
  try {
    const roles = await User.distinct('role');
    res.json(roles);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get membership statuses (Admin)
export async function getMembershipStatuses(req, res) {
  try {
    const statuses = await User.distinct('membershipStatus');
    res.json(statuses);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)usercontroller.mjs,
(
import Volunteer from '../models/Volunteer.mjs';
import Ministry from '../models/Ministry.mjs';
import User from '../models/User.mjs';

// Get all volunteers (Admin)
export async function getAllVolunteers(req, res) {
  try {
    const { page = 1, limit = 10, status, ministryId } = req.query;
    
    const query = {};
    if (status) query.status = status;
    if (ministryId) query.ministryId = ministryId;

    const volunteers = await Volunteer.find(query)
      .populate('userId', 'name email avatar')
      .populate('ministryId', 'name description')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .skip((page - 1) * parseInt(limit));

    const total = await Volunteer.countDocuments(query);

    res.json({
      volunteers,
      totalPages: Math.ceil(total / limit),
      currentPage: parseInt(page),
      total
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get volunteer by ID
export async function getVolunteerById(req, res) {
  try {
    const { id } = req.params;

    const volunteer = await Volunteer.findById(id)
      .populate('userId', 'name email avatar phone address')
      .populate('ministryId', 'name description leaders');

    if (!volunteer) {
      return res.status(404).json({ message: 'Volunteer not found' });
    }

    res.json(volunteer);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Update volunteer status (Admin)
export async function updateVolunteerStatus(req, res) {
  try {
    const { id } = req.params;
    const { status, role, notes } = req.body;

    const volunteer = await Volunteer.findByIdAndUpdate(
      id,
      { status, role, ...(notes && { adminNotes: notes }) },
      { new: true, runValidators: true }
    )
    .populate('userId', 'name email')
    .populate('ministryId', 'name');

    if (!volunteer) {
      return res.status(404).json({ message: 'Volunteer not found' });
    }

    res.json({
      message: 'Volunteer status updated successfully',
      volunteer
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get user's volunteer applications
export async function getUserVolunteerApplications(req, res) {
  try {
    const volunteers = await Volunteer.find({ userId: req.user._id })
      .populate('ministryId', 'name description imageUrl')
      .sort({ createdAt: -1 });

    res.json(volunteers);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get ministry volunteers
export async function getMinistryVolunteers(req, res) {
  try {
    const { ministryId } = req.params;
    const { status } = req.query;

    const query = { ministryId };
    if (status) query.status = status;

    const volunteers = await Volunteer.find(query)
      .populate('userId', 'name email avatar skills')
      .sort({ createdAt: -1 });

    res.json(volunteers);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// Get volunteer stats
export async function getVolunteerStats(req, res) {
  try {
    const totalVolunteers = await Volunteer.countDocuments();
    const activeVolunteers = await Volunteer.countDocuments({ status: 'active' });
    const pendingVolunteers = await Volunteer.countDocuments({ status: 'pending' });
    
    const ministryStats = await Volunteer.aggregate([
      {
        $lookup: {
          from: 'ministries',
          localField: 'ministryId',
          foreignField: '_id',
          as: 'ministry'
        }
      },
      { $unwind: '$ministry' },
      {
        $group: {
          _id: '$ministry.name',
          count: { $sum: 1 },
          active: {
            $sum: { $cond: [{ $eq: ['$status', 'active'] }, 1, 0] }
          }
        }
      },
      { $sort: { count: -1 } }
    ]);

    const statusStats = await Volunteer.aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    res.json({
      totalVolunteers,
      activeVolunteers,
      pendingVolunteers,
      ministryStats,
      statusStats
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}
)volunteercontroller.mjs
(
import Stripe from 'stripe';
import Donation from '../models/Donation.mjs';
import User from '../models/User.mjs';
import { sendDonationReceipt } from '../utils/emailService.mjs';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// Handle Stripe webhooks
export async function handleStripeWebhook(req, res) {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
  } catch (err) {
    console.error('Webhook signature verification failed:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  // Handle the event types
  switch (event.type) {
    case 'payment_intent.succeeded':
      await handlePaymentIntentSucceeded(event.data.object);
      break;
    case 'payment_intent.payment_failed':
      await handlePaymentIntentFailed(event.data.object);
      break;
    case 'customer.subscription.created':
      await handleSubscriptionCreated(event.data.object);
      break;
    case 'customer.subscription.deleted':
      await handleSubscriptionDeleted(event.data.object);
      break;
    default:
      console.log(`Unhandled event type: ${event.type}`);
  }

  res.json({ received: true });
}

// Handle successful payment
const handlePaymentIntentSucceeded = async (paymentIntent) => {
  try {
    const donation = await Donation.findOne({
      stripePaymentIntentId: paymentIntent.id
    });

    if (donation) {
      donation.status = 'completed';
      donation.receiptSent = true;
      donation.receiptSentAt = new Date();
      await donation.save();

      // Send receipt email
      const user = await User.findById(donation.userId);
      if (user) {
        await sendDonationReceipt(user.email, donation);
      }
    }
  } catch (error) {
    console.error('Error handling successful payment:', error);
  }
};

// Handle failed payment
const handlePaymentIntentFailed = async (paymentIntent) => {
  try {
    await Donation.findOneAndUpdate(
      { stripePaymentIntentId: paymentIntent.id },
      { status: 'failed' }
    );
  } catch (error) {
    console.error('Error handling failed payment:', error);
  }
};

// Handle subscription created
const handleSubscriptionCreated = async (subscription) => {
  try {
    // Add recurring donation logic here
    console.log('Subscription created:', subscription.id);
  } catch (error) {
    console.error('Error handling subscription creation:', error);
  }
};

// Handle subscription deleted
const handleSubscriptionDeleted = async (subscription) => {
  try {
    // Add cancellation logic here
    console.log('Subscription cancelled:', subscription.id);
  } catch (error) {
    console.error('Error handling subscription cancellation:', error);
  }
};
)webhookcontroller.mjs,
],
middleware[
(
export const adminCheck = (req, res, next) => {
  if (!req.user || req.user.role !== 'admin') {
    return res.status(403).json({ 
      message: 'Access denied. Admin privileges required.' 
    });
  }
  next();
};

export const moderatorCheck = (req, res, next) => {
  if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'moderator')) {
    return res.status(403).json({ 
      message: 'Access denied. Moderator or admin privileges required.' 
    });
  }
  next();
};

// export default { adminCheck, moderatorCheck };
)admincheck.mjs,
(
import jwt from 'jsonwebtoken';
const { verify } = jwt;
import User from '../models/User.mjs'; // FIXED: Import User, not findById
import Session from '../models/Session.mjs';

const auth = async (req, res, next) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ message: 'Access denied. No token provided.' });
    }

    const decoded = verify(token, process.env.JWT_SECRET);
    
    // Check if session is still valid
    const session = await Session.findOne({ 
      token, 
      userId: decoded.userId, 
      isActive: true,
      expiresAt: { $gt: new Date() }
    });
    
    if (!session) {
      return res.status(401).json({ message: 'Session expired or invalid.' });
    }

    // FIXED: Use User.findById() instead of findById()
    const user = await User.findById(decoded.userId);
    if (!user || !user.isActive) {
      return res.status(401).json({ message: 'User not found or inactive.' });
    }

    req.user = user;
    req.token = token;
    req.session = session;
    
    // Update session activity
    session.updateActivity();
    
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token.' });
  }
};

const optionalAuth = async (req, res, next) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (token) {
      const decoded = verify(token, process.env.JWT_SECRET);
      // FIXED: Use User.findById() instead of findById()
      const user = await User.findById(decoded.userId).select('-password -__v');
      
      if (user && user.isActive) {
        req.user = user;
        
        // Update session activity if exists
        const session = await Session.findOne({ 
          token, 
          userId: decoded.userId, 
          isActive: true 
        });
        if (session) {
          session.updateActivity();
        }
      }
    }
    
    next();
  } catch (error) {
    next(); // Continue without authentication
  }
};

// At the end of the file:
export { auth, optionalAuth };
)authmiddleware.mjs,
(
const errorHandler = (err, req, res, next) => {
  let error = { ...err };
  error.message = err.message;

  // Log to console for dev
  console.log(err);

  // Mongoose bad ObjectId
  if (err.name === 'CastError') {
    const message = 'Resource not found';
    error = { message, statusCode: 404 };
  }

  // Mongoose duplicate key
  if (err.code === 11000) {
    const message = 'Duplicate field value entered';
    error = { message, statusCode: 400 };
  }

  // Mongoose validation error
  if (err.name === 'ValidationError') {
    const message = Object.values(err.errors).map(val => val.message);
    error = { message: message.join(', '), statusCode: 400 };
  }

  // JWT errors
  if (err.name === 'JsonWebTokenError') {
    const message = 'Invalid token';
    error = { message, statusCode: 401 };
  }

  if (err.name === 'TokenExpiredError') {
    const message = 'Token expired';
    error = { message, statusCode: 401 };
  }

  res.status(error.statusCode || 500).json({
    success: false,
    error: error.message || 'Server Error'
  });
};

export default errorHandler;
)errorhandlermiddleware.mjs,
(
import rateLimit from 'express-rate-limit';

// General rate limiter
const generalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.',
  standardHeaders: true,
  legacyHeaders: false,
});

// Auth rate limiter (stricter)
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 login attempts per windowMs
  message: 'Too many login attempts, please try again later.',
  standardHeaders: true,
  legacyHeaders: false,
});

// Donation rate limiter
const donationLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 10, // limit each IP to 10 donation attempts per hour
  message: 'Too many donation attempts, please try again later.',
  standardHeaders: true,
  legacyHeaders: false,
});

export default {
  generalLimiter,
  authLimiter,
  donationLimiter
};
)ratelimitmiddleware.mjs,
(
import multer from 'multer';
import { extname as _extname, parse } from 'path';
import { v2 as cloudinary } from 'cloudinary';
import { CloudinaryStorage } from 'multer-storage-cloudinary';

// Configure Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// Configure storage for different file types
const imageStorage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: 'church-app/images',
    allowed_formats: ['jpg', 'jpeg', 'png', 'gif', 'webp'],
    transformation: [{ width: 1000, height: 1000, crop: 'limit' }]
  }
});

const videoStorage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: 'church-app/videos',
    resource_type: 'video',
    allowed_formats: ['mp4', 'mov', 'avi', 'wmv', 'flv'],
    chunk_size: 6000000 // 6MB chunks
  }
});

const audioStorage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: 'church-app/audio',
    resource_type: 'video', // Cloudinary treats audio as video
    allowed_formats: ['mp3', 'wav', 'm4a', 'ogg'],
    chunk_size: 6000000 // 6MB chunks
  }
});

// File filters
const imageFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Only image files are allowed'), false);
  }
};

const videoFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('video/')) {
    cb(null, true);
  } else {
    cb(new Error('Only video files are allowed'), false);
  }
};

const audioFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('audio/')) {
    cb(null, true);
  } else {
    cb(new Error('Only audio files are allowed'), false);
  }
};

// Configure multer instances
export const uploadImage = multer({
  storage: imageStorage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: imageFilter
});

export const uploadVideo = multer({
  storage: videoStorage,
  limits: {
    fileSize: 100 * 1024 * 1024 // 100MB limit
  },
  fileFilter: videoFilter
});

export const uploadAudio = multer({
  storage: audioStorage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB limit
  },
  fileFilter: audioFilter
});

// Handle multiple file types
export const handleMediaUpload = (req, res, next) => {
  const upload = multer({
    storage: new CloudinaryStorage({
      cloudinary: cloudinary,
      params: (req, file) => {
        let folder = 'church-app/files';
        let resource_type = 'auto';
        
        if (file.mimetype.startsWith('image/')) {
          folder = 'church-app/images';
        } else if (file.mimetype.startsWith('video/')) {
          folder = 'church-app/videos';
          resource_type = 'video';
        } else if (file.mimetype.startsWith('audio/')) {
          folder = 'church-app/audio';
          resource_type = 'video'; // Cloudinary treats audio as video
        }
        
        return {
          folder,
          resource_type,
          allowed_formats: ['jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'avi', 'mp3', 'wav'],
          transformation: file.mimetype.startsWith('image/') 
            ? [{ width: 1000, height: 1000, crop: 'limit' }] 
            : []
        };
      }
    }),
    limits: {
      fileSize: 100 * 1024 * 1024 // 100MB limit
    },
    fileFilter: (req, file, cb) => {
      if (
        file.mimetype.startsWith('image/') ||
        file.mimetype.startsWith('video/') ||
        file.mimetype.startsWith('audio/')
      ) {
        cb(null, true);
      } else {
        cb(new Error('Only image, video, and audio files are allowed'), false);
      }
    }
  }).single('file');

  upload(req, res, (err) => {
    if (err) {
      return res.status(400).json({
        success: false,
        message: err.message
      });
    }
    next();
  });
};
)uploadmiddleware.mjs,
(
import { validationResult } from 'express-validator';

export const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      errors: errors.array()
    });
  }
  next();
};

// OR if you're using default export:
// export default { handleValidationErrors };
)validation.mjs,
],
models[
(
// models/AdminCode.js - UPDATED
import { Schema, model } from 'mongoose';
import { randomBytes } from 'crypto';

const adminCodeSchema = new Schema({
  code: {
    type: String,
    required: true,
    unique: true,
    uppercase: true
  },
  description: {
    type: String,
    required: true
  },
  createdBy: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  assignedTo: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  role: {
    type: String,
    enum: ['admin', 'moderator'],
    default: 'admin'
  },
  isUsed: {
    type: Boolean,
    default: false
  },
  usedAt: Date,
  expiresAt: {
    type: Date,
    default: function() {
      return new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days
    }
  },
  usageCount: {
    type: Number,
    default: 0
  },
  maxUsage: {
    type: Number,
    default: 1 // Default to single use
  }
}, {
  timestamps: true
});

// Index for efficient lookup
adminCodeSchema.index({ code: 1, isUsed: 1, expiresAt: 1 });

// Pre-save hook to generate code
adminCodeSchema.pre('save', function(next) {
  if (this.isNew && !this.code) {
    this.code = randomBytes(8).toString('hex').toUpperCase();
  }
  next();
});

// Static methods
adminCodeSchema.statics.validateCode = async function(code) {
  const adminCode = await this.findOne({ 
    code, 
    isUsed: false,
    expiresAt: { $gt: new Date() },
    $expr: { $lt: ['$usageCount', '$maxUsage'] } // Check if usage count is less than max usage
  });
  
  return !!adminCode;
};

adminCodeSchema.statics.useCode = async function(code, userId) {
  return this.findOneAndUpdate(
    { 
      code, 
      isUsed: false, 
      expiresAt: { $gt: new Date() },
      $expr: { $lt: ['$usageCount', '$maxUsage'] }
    },
    { 
      $inc: { usageCount: 1 },
      $set: { 
        assignedTo: userId,
        usedAt: new Date(),
        isUsed: { $gte: ['$usageCount', '$maxUsage'] } // Set isUsed if usageCount reaches maxUsage
      }
    },
    { new: true }
  );
};

// Instance methods
adminCodeSchema.methods.isExpired = function() {
  return this.expiresAt && this.expiresAt < new Date();
};

adminCodeSchema.methods.canBeUsed = function() {
  return !this.isUsed && !this.isExpired() && this.usageCount < this.maxUsage;
};

export default model('AdminCode', adminCodeSchema);
)admincode.mjs,
(
// models/Analytics.js
import { Schema, model } from 'mongoose';

const analyticsSchema = new Schema({
  type: {
    type: String,
    enum: ['pageview', 'donation', 'event', 'sermon', 'prayer', 'testimonial', 'user'],
    required: true
  },
  itemId: {
    type: Schema.Types.ObjectId,
    required: true
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  ipAddress: String,
  userAgent: String,
  referrer: String,
  country: String,
  region: String,
  city: String,
  deviceType: {
    type: String,
    enum: ['desktop', 'tablet', 'mobile', 'other']
  },
  browser: String,
  os: String,
  duration: Number, // in seconds
  conversionValue: Number
}, {
  timestamps: true
});

// Indexes
analyticsSchema.index({ type: 1, createdAt: 1 });
analyticsSchema.index({ itemId: 1, type: 1 });
analyticsSchema.index({ userId: 1 });

export default model('Analytics', analyticsSchema);
)analytics.mjs,
(
import { Schema, model } from 'mongoose';

const authAttemptSchema = new Schema({
  email: {
    type: String,
    required: true,
    lowercase: true
  },
  ipAddress: {
    type: String,
    required: true
  },
  userAgent: String,
  attemptType: {
    type: String,
    enum: ['login', 'register', 'social_login', 'password_reset'],
    required: true
  },
  provider: {
    type: String,
    enum: ['google', 'facebook', null],
    default: null
  },
  success: {
    type: Boolean,
    required: true
  },
  reason: String,
  metadata: {
    type: Map,
    of: Schema.Types.Mixed
  }
}, {
  timestamps: true
});

// Indexes
authAttemptSchema.index({ email: 1 });
authAttemptSchema.index({ ipAddress: 1 });
authAttemptSchema.index({ createdAt: 1 });
authAttemptSchema.index({ attemptType: 1 });

// Static methods for rate limiting
authAttemptSchema.statics.getRecentAttempts = function(email, ipAddress, minutes = 15) {
  const timeAgo = new Date(Date.now() - minutes * 60 * 1000);
  
  return this.countDocuments({
    $or: [{ email }, { ipAddress }],
    createdAt: { $gte: timeAgo },
    success: false
  });
};

authAttemptSchema.statics.logAttempt = function(data) {
  return this.create(data);
};

// Static method to clean old records
authAttemptSchema.statics.cleanOldRecords = function(days = 30) {
  const cutoffDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
  return this.deleteMany({ createdAt: { $lt: cutoffDate } });
};

export default model('AuthAttempt', authAttemptSchema);
)authattempt.mjs,
(
// models/BlogPost.js
import { Schema, model } from 'mongoose';

const blogPostSchema = new Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  excerpt: {
    type: String,
    required: true
  },
  content: {
    type: String,
    required: true
  },
author: {
  type: Schema.Types.ObjectId,
  ref: 'User',
  required: true
},
  category: {
    type: String,
    enum: ['announcements', 'devotional', 'testimony', 'teaching', 'news', 'events'],
    default: 'announcements'
  },
  imageUrl: String,
  readTime: {
    type: Number,
    default: 5
  },
  tags: [String],
  status: {
    type: String,
    enum: ['draft', 'published', 'archived'],
    default: 'draft'
  },
  views: {
    type: Number,
    default: 0
  },
  likes: {
    type: Number,
    default: 0
  },
  comments: [{
    user: {
      type: Schema.Types.ObjectId,
      ref: 'User'
    },
    content: String,
    createdAt: {
      type: Date,
      default: Date.now
    },
    isApproved: {
      type: Boolean,
      default: false
    }
  }],
  seoTitle: String,
  seoDescription: String,
  slug: {
    type: String,
    unique: true,
    lowercase: true
  }
}, {
  timestamps: true
});

// Indexes
blogPostSchema.index({ author: 1 });
blogPostSchema.index({ category: 1 });
blogPostSchema.index({ status: 1 });
blogPostSchema.index({ createdAt: -1 });
blogPostSchema.index({ slug: 1 });

// Generate slug before saving
blogPostSchema.pre('save', function(next) {
  if (this.isModified('title') && this.title) {
    this.slug = this.title
      .toLowerCase()
      .replace(/[^a-z0-9 -]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim('-');
  }
  next();
});

export default model('BlogPost', blogPostSchema);
)blogpost.mjs,
(
// models/Donation.js
import { Schema, model } from 'mongoose';

const donationSchema = new Schema({
userId: {
  type: Schema.Types.ObjectId,
  ref: 'User',
  required: false
},
  amount: {
    type: Number,
    required: true,
    min: 0
  },
  currency: {
    type: String,
    default: 'USD'
  },
  frequency: {
    type: String,
    enum: ['one-time', 'weekly', 'monthly', 'quarterly', 'yearly'],
    default: 'one-time'
  },
  status: {
    type: String,
    enum: ['pending', 'processing', 'completed', 'failed', 'refunded'],
    default: 'pending'
  },
  paymentMethod: {
    type: String,
    enum: ['card', 'bank', 'paypal', 'cash', 'other'],
    required: true
  },
  stripePaymentIntentId: {
    type: String,
    sparse: true,
    unique: true
  },
  stripeCustomerId: String,
  donorName: {
    type: String,
    required: true
  },
  donorEmail: {
    type: String,
    required: true
  },
  isAnonymous: {
    type: Boolean,
    default: false
  },
  dedication: {
    type: String,
    default: ''
  },
  receiptSent: {
    type: Boolean,
    default: false
  },
  receiptSentAt: Date,
  refundedAmount: {
    type: Number,
    default: 0
  },
  refundReason: String
}, {
  timestamps: true
});

// Indexes
donationSchema.index({ userId: 1, createdAt: -1 });
donationSchema.index({ status: 1 });
donationSchema.index({ stripePaymentIntentId: 1 }, { sparse: true });
donationSchema.index({ createdAt: 1 });
donationSchema.index({ donorEmail: 1 });

export default model('Donation', donationSchema);
)donation.mjs,
(
// models/Event.js
import { Schema, model } from 'mongoose';

const eventSchema = new Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true
  },
  startTime: {
    type: Date,
    required: true
  },
  endTime: {
    type: Date,
    required: true
  },
  location: {
    type: String,
    required: true
  },
  address: {
    street: String,
    city: String,
    state: String,
    zipCode: String
  },
  category: {
    type: String,
    enum: ['service', 'bible-study', 'prayer', 'youth', 'children', 'men', 'women', 'fellowship', 'outreach', 'training'],
    default: 'service'
  },
  imageUrl: String,
  capacity: {
    type: Number,
    default: 0
  },
  registered: {
    type: Number,
    default: 0
  },
  status: {
    type: String,
    enum: ['draft', 'scheduled', 'cancelled', 'completed'],
    default: 'draft'
  },
  isRecurring: {
    type: Boolean,
    default: false
  },
  recurrencePattern: {
    frequency: {
      type: String,
      enum: ['daily', 'weekly', 'monthly', 'yearly']
    },
    interval: Number,
    endDate: Date
  },
  requiresRSVP: {
    type: Boolean,
    default: false
  },
  price: {
    type: Number,
    default: 0
  },
  leaders: [{
    name: String,
    role: String
  }],
  tags: [String]
}, {
  timestamps: true
});

// Indexes
eventSchema.index({ startTime: 1 });
eventSchema.index({ category: 1 });
eventSchema.index({ status: 1 });
eventSchema.index({ requiresRSVP: 1 });

export default model('Event', eventSchema);
)event.mjs,
(
// models/Favorite.js
import { Schema, model } from 'mongoose';

const favoriteSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  itemType: {
    type: String,
    enum: ['sermon', 'event', 'blog', 'ministry'],
    required: true
  },
  itemId: {
    type: Schema.Types.ObjectId,
    required: true,
    refPath: 'itemType'
  }
}, {
  timestamps: true
});

// Compound index to ensure a user can only favorite an item once
favoriteSchema.index({ userId: 1, itemType: 1, itemId: 1 }, { unique: true });

// Index for querying by item
favoriteSchema.index({ itemType: 1, itemId: 1 });

export default model('Favorite', favoriteSchema);
)favourite.mjs,
(
// models/Ministry.js
import { Schema, model } from 'mongoose';

const ministrySchema = new Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true
  },
  missionStatement: String,
  visionStatement: String,
  icon: {
    type: String,
    default: 'users'
  },
  imageUrl: String,
leaders: [{
  user: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  role: String,
  isPrimary: {
    type: Boolean,
    default: false
  }
}],
  programs: [{
    name: String,
    description: String,
    schedule: String,
    location: String
  }],
  volunteerNeeds: [{
    role: String,
    description: String,
    requirements: String,
    timeCommitment: String
  }],
  contactEmail: String,
  contactPhone: String,
  meetingSchedule: String,
  meetingLocation: String,
  status: {
    type: String,
    enum: ['active', 'inactive', 'planning'],
    default: 'active'
  },
  tags: [String],
  socialMedia: {
    facebook: String,
    instagram: String,
    twitter: String,
    youtube: String
  }
}, {
  timestamps: true
});

// Indexes
ministrySchema.index({ name: 1 });
ministrySchema.index({ status: 1 });
ministrySchema.index({ tags: 1 });

export default model('Ministry', ministrySchema);
)ministry.mjs,
(
// models/PrayerRequest.js
import { Schema, model } from 'mongoose';

const prayerRequestSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  request: {
    type: String,
    required: true,
    trim: true
  },
  isPrivate: {
    type: Boolean,
    default: false
  },
  name: {
    type: String,
    required: true,
    trim: true
  },
  email: {
    type: String,
    lowercase: true,
    trim: true
  },
  phone: String,
  prayerCount: {
    type: Number,
    default: 0
  },
  prayedBy: [{
    user: {
      type: Schema.Types.ObjectId,
      ref: 'User'
    },
    prayedAt: {
      type: Date,
      default: Date.now
    }
  }],
  notifyOnPray: {
    type: Boolean,
    default: false
  },
  status: {
    type: String,
    enum: ['pending', 'approved', 'answered', 'rejected'],
    default: 'pending'
  },
  category: {
    type: String,
    enum: ['healing', 'guidance', 'financial', 'relationship', 'thanksgiving', 'other'],
    default: 'other'
  },
  urgency: {
    type: String,
    enum: ['normal', 'urgent', 'critical'],
    default: 'normal'
  },
  answeredAt: Date,
  answerDetails: String,
  allowSharing: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Indexes
prayerRequestSchema.index({ userId: 1 });
prayerRequestSchema.index({ status: 1 });
prayerRequestSchema.index({ category: 1 });
prayerRequestSchema.index({ createdAt: -1 });
prayerRequestSchema.index({ isPrivate: 1 });

export default model('PrayerRequest', prayerRequestSchema);
)prayerrequest.mjs,
(
// models/RSVP.js
import { Schema, model } from 'mongoose';

const rsvpSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  eventId: {
    type: Schema.Types.ObjectId,
    ref: 'Event',
    required: true
  },
  status: {
    type: String,
    enum: ['confirmed', 'waiting', 'cancelled'],
    default: 'confirmed'
  },
  guests: {
    type: Number,
    default: 1,
    min: 1
  },
  guestNames: [String],
  dietaryRestrictions: String,
  specialRequests: String,
  checkedIn: {
    type: Boolean,
    default: false
  },
  checkedInAt: Date,
  reminderSent: {
    type: Boolean,
    default: false
  },
  reminderSentAt: Date
}, {
  timestamps: true
});

// Compound index to ensure a user can only RSVP once per event
rsvpSchema.index({ userId: 1, eventId: 1 }, { unique: true });

// Index for querying by event
rsvpSchema.index({ eventId: 1, status: 1 });

export default model('RSVP', rsvpSchema);
)rsvp.mjs,
(
// models/Sermon.js
import { Schema, model } from 'mongoose';

const sermonSchema = new Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  speaker: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    required: true
  },
  scripture: {
    type: String,
    trim: true
  },
  category: {
    type: String,
    enum: ['sunday-service', 'bible-study', 'prayer-meeting', 'youth', 'special', 'faith', 'hope', 'love'],
    default: 'sunday-service'
  },
  videoUrl: String,
  audioUrl: String,
  imageUrl: String,
  duration: {
    type: String,
    default: '00:00'
  },
  date: {
    type: Date,
    required: true
  },
  isLive: {
    type: Boolean,
    default: false
  },
  liveStreamUrl: String,
  liveStreamStatus: {
    type: String,
    enum: ['scheduled', 'live', 'ended', 'cancelled'],
    default: 'scheduled'
  },
  viewers: {
    type: Number,
    default: 0
  },
  likes: {
    type: Number,
    default: 0
  },
  downloads: {
    type: Number,
    default: 0
  },
  status: {
    type: String,
    enum: ['draft', 'published', 'archived'],
    default: 'draft'
  },
  tags: [String],
  series: String,
  seriesPart: Number
}, {
  timestamps: true
});

// Indexes
sermonSchema.index({ date: -1 });
sermonSchema.index({ category: 1 });
sermonSchema.index({ isLive: 1 });
sermonSchema.index({ status: 1 });
sermonSchema.index({ speaker: 1 });

export default model('Sermon', sermonSchema);
)sermon.mjs,
(
import { Schema, model } from "mongoose";

const sessionSchema = new Schema(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    token: {
      type: String,
      required: true,
      unique: true, // ensures no duplicates
    },
    userAgent: String,
    ipAddress: String,
    deviceType: {
      type: String,
      enum: ["desktop", "mobile", "tablet", "unknown"],
      default: "unknown",
    },
    browser: String,
    os: String,
    location: {
      country: String,
      region: String,
      city: String,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
    expiresAt: {
      type: Date,
      default: () => new Date(Date.now() + 1000 * 60 * 60 * 24 * 7), // 7 days
      required: true,
    },
    lastActivity: {
      type: Date,
      default: Date.now,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
sessionSchema.index({ userId: 1 });
sessionSchema.index({ token: 1 }, { unique: true });
sessionSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 }); // TTL index

// Instance methods
sessionSchema.methods.isExpired = function () {
  return this.expiresAt < new Date();
};

sessionSchema.methods.updateActivity = function () {
  this.lastActivity = new Date();
  return this.save();
};

// Static helper for upsert (no duplicate token crash)
sessionSchema.statics.saveOrUpdateSession = async function ({
  token,
  userId,
  userAgent,
  ipAddress,
  deviceType,
  browser,
  os,
  location,
  expiresAt,
}) {
  return this.findOneAndUpdate(
    { token },
    {
      $set: {
        userId,
        userAgent,
        ipAddress,
        deviceType,
        browser,
        os,
        location,
        isActive: true,
        lastActivity: new Date(),
        expiresAt: expiresAt || new Date(Date.now() + 1000 * 60 * 60 * 24 * 7), // default 7 days
      },
    },
    { upsert: true, new: true }
  );
};

export default model("Session", sessionSchema);
)session.mjs,
(
// models/Setting.js
import { Schema, model } from 'mongoose';

const settingSchema = new Schema({
  churchName: {
    type: String,
    required: true,
    default: 'Our Church'
  },
  churchAddress: {
    street: String,
    city: String,
    state: String,
    zipCode: String
  },
  contactEmail: String,
  contactPhone: String,
  pastorName: String,
  serviceTimes: [{
    day: String,
    time: String,
    description: String
  }],
  socialMedia: {
    facebook: String,
    instagram: String,
    twitter: String,
    youtube: String
  },
  liveStreamUrl: String,
  givingOptions: {
    enableOnlineGiving: {
      type: Boolean,
      default: false
    },
    stripePublishableKey: String,
    stripeSecretKey: String
  },
  emailSettings: {
    host: String,
    port: Number,
    secure: Boolean,
    auth: {
      user: String,
      pass: String
    }
  },
  sermonSettings: {
    defaultCategory: String,
    autoPublish: {
      type: Boolean,
      default: false
    }
  },
  eventSettings: {
    requireApproval: {
      type: Boolean,
      default: false
    },
    allowPublicRSVP: {
      type: Boolean,
      default: true
    }
  },
  prayerRequestSettings: {
    requireApproval: {
      type: Boolean,
      default: true
    },
    allowAnonymous: {
      type: Boolean,
      default: true
    }
  },
  testimonialSettings: {
    requireApproval: {
      type: Boolean,
      default: true
    },
    allowVideo: {
      type: Boolean,
      default: true
    }
  }
}, {
  timestamps: true
});

export default model('Setting', settingSchema);
)setting.mjs,
(
import { Schema, model } from 'mongoose';

const socialAuthSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  provider: {
    type: String,
    enum: ['google', 'facebook'],
    required: true
  },
  providerId: {
    type: String,
    required: true
  },
  accessToken: String,
  refreshToken: String,
  profile: {
    type: Map,
    of: Schema.Types.Mixed
  },
  expiresAt: Date,
  scopes: [String],
  lastUsed: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Compound index
socialAuthSchema.index({ provider: 1, providerId: 1 }, { unique: true });
socialAuthSchema.index({ userId: 1 });

// Static methods
socialAuthSchema.statics.findByProviderId = function(provider, providerId) {
  return this.findOne({ provider, providerId });
};

socialAuthSchema.statics.findByUserId = function(userId, provider = null) {
  const query = { userId };
  if (provider) query.provider = provider;
  return this.find(query);
};

// Instance methods
socialAuthSchema.methods.isExpired = function() {
  return this.expiresAt && this.expiresAt < new Date();
};

socialAuthSchema.methods.updateUsage = function() {
  this.lastUsed = new Date();
  return this.save();
};

export default model('SocialAuth', socialAuthSchema);
)socialauth.mjs,
(
// models/Testimonial.js
import { Schema, model } from 'mongoose';

const testimonialSchema = new Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  email: {
    type: String,
    lowercase: true,
    trim: true
  },
  content: {
    type: String,
    required: true
  },
  imageUrl: String,
  relationship: {
    type: String,
    enum: ['member', 'visitor', 'volunteer', 'staff', 'other'],
    default: 'member'
  },
  yearsInChurch: Number,
  allowSharing: {
    type: Boolean,
    default: false
  },
  allowContact: {
    type: Boolean,
    default: false
  },
  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'featured'],
    default: 'pending'
  },
  category: {
    type: String,
    enum: ['salvation', 'healing', 'provision', 'relationship', 'other'],
    default: 'other'
  },
  rating: {
    type: Number,
    min: 1,
    max: 5,
    default: 5
  },
  isVideo: {
    type: Boolean,
    default: false
  },
  videoUrl: String,
  featuredAt: Date
}, {
  timestamps: true
});

// Indexes
testimonialSchema.index({ status: 1 });
testimonialSchema.index({ category: 1 });
testimonialSchema.index({ createdAt: -1 });
testimonialSchema.index({ rating: -1 });

export default model('Testimonial', testimonialSchema);
)testimonial.mjs,
(
import { Schema, model } from 'mongoose';
import bcrypt from 'bcryptjs';
const { genSalt, hash, compare } = bcrypt;

const userSchema = new Schema({
  // Basic information
  name: {
    type: String,
    required: true,
    trim: true
  },
  firstName: {
    type: String,
    trim: true
  },
  lastName: {
    type: String,
    trim: true
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
  },
  password: {
    type: String,
    required: function () {
      return this.authMethod === 'local';
    },
    minlength: 6
  },

  // Authentication method
  authMethod: {
    type: String,
    enum: ['local', 'google', 'facebook'],
    default: 'local'
  },

  isActive: {
    type: Boolean,
    default: true
  },

  // Social authentication
  socialAuth: {
    googleId: { type: String, sparse: true },
    facebookId: { type: String, sparse: true }
  },

  // Verification
  emailVerified: {
    type: Boolean,
    default: false
  },

  verificationToken: {
    type: String,
    index: true,
    sparse: true
  },

  verificationExpires: Date,

  // Password reset
  resetPasswordToken: {
    type: String,
    index: true,
    sparse: true
  },

  resetPasswordExpires: Date,

  // Roles and permissions
  role: {
    type: String,
    enum: ["user", "admin", "moderator"],
    default: "user",
    set: v => v.trim().toLowerCase()
  },
  adminCode: String,

  // Profile
  avatar: String,
  phone: {
    type: String,
    match: [/^\+?[\d\s\-\(\)]{10,}$/, 'Please enter a valid phone number']
  },
  address: {
    street: String,
    city: String,
    state: String,
    zipCode: String,
    country: String
  },

  // Church membership
  memberSince: Date,
  membershipStatus: {
    type: String,
    enum: ['active', 'inactive', 'pending'],
    default: 'active'
  },
  smallGroup: String,
  familyMembers: [{
    name: String,
    relationship: String,
    age: Number
  }],

  // Communication preferences
  communicationPreferences: {
    emailNotifications: { type: Boolean, default: true },
    smsNotifications: { type: Boolean, default: false },
    newsletter: { type: Boolean, default: true },
    eventReminders: { type: Boolean, default: true },
    prayerUpdates: { type: Boolean, default: true }
  },

  // Volunteer preferences
  volunteerProfile: {
    skills: [String],
    availability: {
      days: [{
        type: String,
        enum: ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
      }],
      times: [{
        type: String,
        enum: ['morning', 'afternoon', 'evening']
      }]
    },
    interests: [String],
    experience: String
  },
  
  // Volunteer stats
  volunteerStats: {
    totalHours: { type: Number, default: 0 },
    completedTrainings: [String],
    activeApplications: { type: Number, default: 0 }
  },

  // Timestamps
  lastLogin: Date,
  loginCount: { type: Number, default: 0 }
}, {
  timestamps: true,
  toJSON: {
    transform: function (doc, ret) {
      delete ret.password;
      delete ret.verificationToken;
      delete ret.resetPasswordToken;
      delete ret.resetPasswordExpires;
      delete ret.adminCode;
      return ret;
    }
  }
});

// Indexes
userSchema.index({ email: 1 }, { unique: true });
userSchema.index({ 'socialAuth.googleId': 1 }, { sparse: true });
userSchema.index({ 'socialAuth.facebookId': 1 }, { sparse: true });
userSchema.index({ verificationToken: 1 });
userSchema.index({ resetPasswordToken: 1 });
userSchema.index({ authMethod: 1 });
userSchema.index({ role: 1 });
userSchema.index({ membershipStatus: 1 });

// Hash password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password') || !this.password) return next();

  try {
    const salt = await genSalt(12);
    this.password = await hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

// Compare password method
userSchema.methods.comparePassword = async function (candidatePassword) {
  if (!this.password) return false;
  return await compare(candidatePassword, this.password);
};

// Check if user is admin
userSchema.methods.isAdmin = function () {
  return this.role === 'admin';
};

// Check if user is moderator
userSchema.methods.isModerator = function () {
  return this.role === 'moderator' || this.role === 'admin';
};

//  Check if user is User
userSchema.methods.isUser = function () {
  return this.role === 'user';
};

// Virtual for full address
userSchema.virtual('fullAddress').get(function () {
  if (!this.address) return '';
  const { street, city, state, zipCode, country } = this.address;
  return [street, city, state, zipCode, country].filter(Boolean).join(', ');
});

// Virtual for full name
userSchema.virtual('fullName').get(function () {
  if (this.firstName && this.lastName) {
    return `${this.firstName} ${this.lastName}`;
  }
  return this.name;
});

// Method to get public profile
userSchema.methods.getPublicProfile = function () {
  return {
    _id: this._id,
    name: this.name,
    firstName: this.firstName,
    lastName: this.lastName,
    email: this.email,
    role: this.role,
    avatar: this.avatar,
    emailVerified: this.emailVerified,
    lastLogin: this.lastLogin,
    memberSince: this.memberSince,
    membershipStatus: this.membershipStatus
  };
};

// Method to get dashboard data
userSchema.methods.getDashboardData = function () {
  return {
    _id: this._id,
    name: this.name,
    firstName: this.firstName,
    lastName: this.lastName,
    email: this.email,
    role: this.role,
    avatar: this.avatar,
    memberSince: this.memberSince,
    membershipStatus: this.membershipStatus,
    smallGroup: this.smallGroup,
    familyMembers: this.familyMembers,
    communicationPreferences: this.communicationPreferences,
    volunteerStats: this.volunteerStats
  };
};

export default model('User', userSchema);
)user.mjs,
(
// models/Volunteer.js
import { Schema, model } from 'mongoose';

const volunteerSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  ministryId: {
    type: Schema.Types.ObjectId,
    ref: 'Ministry',
    required: true
  },
  interests: [String],
  availability: {
    days: [{
      type: String,
      enum: ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
    }],
    times: [{
      type: String,
      enum: ['morning', 'afternoon', 'evening']
    }]
  },
  skills: [String],
  experience: String,
  message: String,
  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'active', 'inactive'],
    default: 'pending'
  },
  startDate: Date,
  endDate: Date,
  hoursVolunteered: {
    type: Number,
    default: 0
  },
  trainingCompleted: [{
    name: String,
    completedAt: Date
  }]
}, {
  timestamps: true
});

// Indexes
volunteerSchema.index({ userId: 1, ministryId: 1 }, { unique: true });
volunteerSchema.index({ ministryId: 1 });
volunteerSchema.index({ status: 1 });

export default model('Volunteer', volunteerSchema);
)volunteer.mjs,
],
routes[
(
import { Router } from 'express';
const router = Router();
import { body } from 'express-validator';
import {
     generateAdminCode, 
     getAdminCodes, 
     getUsers, 
     updateUserRole, 
     deactivateUser, 
     activateUser, 
     getDashboardStats 
    } from '../controllers/adminController.mjs';
import { auth } from '../middleware/auth.mjs';
import { adminCheck } from '../middleware/adminCheck.mjs';
 

// Validation rules
const generateAdminCodeValidation = [
  body('description').notEmpty().withMessage('Description is required'),
  body('role').isIn(['admin', 'moderator']).withMessage('Role must be admin or moderator'),
  body('maxUsage').isInt({ min: 1 }).withMessage('Max usage must be at least 1'),
  body('expiresInDays').isInt({ min: 1 }).withMessage('Expires in days must be at least 1')
];

const updateUserRoleValidation = [
  body('role').isIn(['user', 'moderator', 'admin']).withMessage('Invalid role')
];

// Routes
router.post('/generate-code', auth, adminCheck, generateAdminCodeValidation, generateAdminCode);
router.get('/codes', auth, adminCheck, getAdminCodes);
router.get('/users', auth, adminCheck, getUsers);
router.patch('/users/:userId/role', auth, adminCheck, updateUserRoleValidation, updateUserRole);
router.patch('/users/:userId/deactivate', auth, adminCheck, deactivateUser);
router.patch('/users/:userId/activate', auth, adminCheck, activateUser);
router.get('/dashboard/stats', auth, adminCheck, getDashboardStats);

export default router;
)admin.mjs,
(
import { Router } from 'express';
const router = Router();
import { 
    getServiceTimes, 
    getChurchStats, 
    getHeroContent, 
    getLiveStatus, 
    trackEvent, 
    getDashboardStats, 
    getRecentActivity 
} from '../controllers/analyticsController.mjs';
import { auth } from '../middleware/auth.mjs';
import { adminCheck } from '../middleware/adminCheck.mjs';

// Public routes
router.get('/service-times', getServiceTimes);
router.get('/stats', getChurchStats);
router.get('/hero-content', getHeroContent);
router.get('/live-status', getLiveStatus);

// Authenticated routes
router.post('/track', auth, trackEvent);

// Admin routes
router.get('/admin/dashboard/stats', auth, adminCheck, getDashboardStats);
router.get('/admin/activity/recent', auth, adminCheck, getRecentActivity);

export default router;
)analytics.mjs,
(
import express from 'express';
import { body } from 'express-validator';
import { register, login, verifyEmail, forgotPassword, resetPassword, logout, getCurrentUser } from '../controllers/authController.mjs';
import { auth } from '../middleware/auth.mjs';
import { handleValidationErrors } from '../middleware/validation.mjs';

const router = express.Router();

// Validation rules
const registerValidation = [
  body('name').trim().isLength({ min: 2 }).withMessage('Name must be at least 2 characters'),
  body('email').isEmail().withMessage('Please enter a valid email'),
  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters')
];

const loginValidation = [
  body('email').isEmail().withMessage('Please enter a valid email'),
  body('password').notEmpty().withMessage('Password is required')
];

const forgotPasswordValidation = [
  body('email').isEmail().withMessage('Please enter a valid email')
];

const resetPasswordValidation = [
  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters')
];

// Routes
router.post('/register', registerValidation, handleValidationErrors, register);
router.post('/login', loginValidation, handleValidationErrors, login);
router.get('/verify-email/:token', verifyEmail);
router.post('/forgot-password', forgotPasswordValidation, handleValidationErrors, forgotPassword);
router.post('/reset-password/:token', resetPasswordValidation, handleValidationErrors, resetPassword);
router.post('/logout', auth, logout);
router.get('/me', auth, getCurrentUser);

export default router;
)auth.mjs,
(
import { Router } from 'express';
const router = Router();
import { 
    getAllBlogPosts, 
    getBlogCategories, 
    subscribeToNewsletter, 
    getFavoriteBlogPosts, 
    addFavoriteBlogPost, 
    removeFavoriteBlogPost, 
    getAllBlogPostsAdmin, 
    createBlogPost, 
    updateBlogPost, 
    deleteBlogPost, 
    getBlogCategoriesAdmin 
} from '../controllers/blogController.mjs';
import { auth, optionalAuth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';
import { uploadImage } from '../middleware/upload.mjs';

// Public routes
router.get('/posts', optionalAuth, getAllBlogPosts);
router.get('/categories', optionalAuth, getBlogCategories);
router.post('/newsletter/subscribe', optionalAuth, subscribeToNewsletter);

// Authenticated routes
router.get('/favorites', optionalAuth, getFavoriteBlogPosts);
router.post('/favorites/:id', auth, addFavoriteBlogPost);
router.delete('/favorites/:id', auth, removeFavoriteBlogPost);

// Admin routes - ADDED /admin PREFIX
router.get('/admin/all', auth, moderatorCheck, getAllBlogPostsAdmin);
router.post('/admin/create', auth, moderatorCheck, uploadImage.single('image'), createBlogPost);
router.put('/admin/update/:id', auth, moderatorCheck, uploadImage.single('image'), updateBlogPost);
router.delete('/admin/delete/:id', auth, moderatorCheck, deleteBlogPost);
router.get('/admin/categories', auth, moderatorCheck, getBlogCategoriesAdmin);

export default router;
)blog.mjs,
(
// donationRoutes.mjs
import { Router } from 'express';
const router = Router();
import { 
    getUserDonations, 
    createDonation, 
    downloadReceipt, 
    getAllDonations, 
    updateDonation, 
    getDonationStats, 
    getRecentDonations, 
    exportDonations,
    createPaymentIntent,
    confirmCardPayment
} from '../controllers/donationController.mjs';
import { auth, optionalAuth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';

// Payment intent creation (public)
router.post('/create-payment-intent', optionalAuth, createPaymentIntent);

// Authenticated routes
router.get('/', auth, getUserDonations);
router.post('/create', optionalAuth, createDonation); // Changed to optionalAuth
router.post('/confirm-payment', optionalAuth, confirmCardPayment); // New endpoint
router.get('/receipt/:id', auth, downloadReceipt);

// Admin routes
router.get('/admin/all', auth, moderatorCheck, getAllDonations);
router.put('/admin/update/:id', auth, moderatorCheck, updateDonation);
router.get('/admin/stats', auth, moderatorCheck, getDonationStats);
router.get('/admin/recent', auth, moderatorCheck, getRecentDonations);
router.get('/admin/export', auth, moderatorCheck, exportDonations);

export default router;
)donation.mjs,
(
import { Router } from 'express';
const router = Router();
import { 
    getAllEvents, 
    getUpcomingEvents, 
    getUserRsvps, 
    getUserFavorites, 
    rsvpForEvent, 
    cancelRsvp, 
    addFavoriteEvent, 
    removeFavoriteEvent, 
    createEvent, 
    updateEvent, 
    deleteEvent 
} from '../controllers/eventController.mjs';
import { auth, optionalAuth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';
import { uploadImage } from '../middleware/upload.mjs';

// Public routes
router.get('/', getAllEvents);
router.get('/upcoming', getUpcomingEvents);

// Authenticated routes
router.get('/user/rsvps', auth, getUserRsvps);
router.get('/user/favorites', auth, getUserFavorites);
router.post('/:id/rsvp', auth, rsvpForEvent);
router.delete('/:id/rsvp', auth, cancelRsvp);
router.post('/:id/favorite', auth, addFavoriteEvent);
router.delete('/:id/favorite', auth, removeFavoriteEvent);

// Admin routes - ADDED /admin PREFIX
router.post('/admin/create', auth, moderatorCheck, uploadImage.single('image'), createEvent);
router.put('/admin/update/:id', auth, moderatorCheck, uploadImage.single('image'), updateEvent);
router.delete('/admin/delete/:id', auth, moderatorCheck, deleteEvent);

export default router;
)events.mjs,
(
import { Router } from 'express';
const router = Router();
import { 
    getAllMinistries, 
    getVolunteerOpportunities, 
    getMinistryCategories, 
    getUserMinistries, 
    volunteerForMinistry, 
    contactMinistryLeaders, 
    createMinistry, 
    updateMinistry, 
    deleteMinistry, 
    getMinistryStats, 
    getMinistryVolunteers 
} from '../controllers/ministryController.mjs';
import { auth, optionalAuth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';
import { uploadImage } from '../middleware/upload.mjs';

// Public routes
router.get('/', getAllMinistries);
router.get('/volunteer-opportunities', getVolunteerOpportunities);
router.get('/categories', getMinistryCategories);

// Authenticated routes
router.get('/user/ministries', optionalAuth, getUserMinistries);
router.post('/:id/volunteer', auth, volunteerForMinistry);
router.post('/:id/contact', auth, contactMinistryLeaders);

// Admin routes - ADDED /admin PREFIX
router.post('/admin/create', auth, moderatorCheck, uploadImage.single('image'), createMinistry);
router.put('/admin/update/:id', auth, moderatorCheck, uploadImage.single('image'), updateMinistry);
router.delete('/admin/delete/:id', auth, moderatorCheck, deleteMinistry);
router.get('/admin/stats', auth, moderatorCheck, getMinistryStats);
router.get('/admin/:id/volunteers', auth, moderatorCheck, getMinistryVolunteers);

export default router;
)ministry.mjs
(
import { Router } from 'express';
const router = Router();
import { 
    getAllPrayerRequests, 
    getPrayerTeam, 
    getPrayerMeetings, 
    submitPrayerRequest, 
    prayForRequest, 
    getAllPrayerRequestsAdmin, 
    updatePrayerRequest, 
    deletePrayerRequest, 
    getPrayerStats 
} from '../controllers/prayerController.mjs';
import { auth, optionalAuth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';

// Public routes
router.get('/', getAllPrayerRequests);
router.get('/team', getPrayerTeam);
router.get('/meetings', getPrayerMeetings);
router.post('/', submitPrayerRequest);
router.post('/:id/pray', optionalAuth, prayForRequest);

// Admin routes - ADDED /admin PREFIX
router.get('/admin/all', auth, moderatorCheck, getAllPrayerRequestsAdmin);
router.put('/admin/update/:id', auth, moderatorCheck, updatePrayerRequest);
router.delete('/admin/delete/:id', auth, moderatorCheck, deletePrayerRequest);
router.get('/admin/stats', auth, moderatorCheck, getPrayerStats);

export default router;
)prayers.mjs,
(
import { Router } from 'express';
const router = Router();
import multer from 'multer';
import { 
  getAllSermons, 
  getLiveSermons, 
  getSermonCategories, 
  getFeaturedSermons, 
  getFavoriteSermons, 
  addFavoriteSermon, 
  removeFavoriteSermon, 
  createSermon, 
  updateSermon, 
  deleteSermon, 
  getSermonStats, 
  startLiveStream, 
  stopLiveStream 
} from '../controllers/sermonController.mjs';
import { auth, optionalAuth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';

// Configure multer for file uploads (using memory storage)
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 100 * 1024 * 1024, // 100MB limit
  },
  fileFilter: (req, file, cb) => {
    if (
      file.mimetype.startsWith('image/') ||
      file.mimetype.startsWith('video/') ||
      file.mimetype.startsWith('audio/')
    ) {
      cb(null, true);
    } else {
      cb(new Error('Only image, video, and audio files are allowed'), false);
    }
  }
});

// Public routes
router.get('/', getAllSermons);
router.get('/live', getLiveSermons);
router.get('/categories', getSermonCategories);
router.get('/featured', getFeaturedSermons);

// Authenticated routes
router.get('/favorites', optionalAuth, getFavoriteSermons);
router.post('/favorites/:id', auth, addFavoriteSermon);
router.delete('/favorites/:id', auth, removeFavoriteSermon);

// Admin routes - ADDED /admin PREFIX
router.post('/admin', auth, moderatorCheck, upload.fields([
  { name: 'audio', maxCount: 1 },
  { name: 'video', maxCount: 1 },
  { name: 'image', maxCount: 1 }
]), createSermon);

router.put('/admin/:id', auth, moderatorCheck, upload.fields([
  { name: 'audio', maxCount: 1 },
  { name: 'video', maxCount: 1 },
  { name: 'image', maxCount: 1 }
]), updateSermon);

router.delete('/admin/:id', auth, moderatorCheck, deleteSermon);
router.get('/admin/stats', auth, moderatorCheck, getSermonStats);
router.post('/admin/live/start', auth, moderatorCheck, startLiveStream);
router.post('/admin/live/stop', auth, moderatorCheck, stopLiveStream);

export default router;
)sermons.mjs,
(
import { Router } from 'express';
const router = Router();
import { getSettings, updateSettings, resetSettings } from '../controllers/settingController.mjs';
import { auth } from '../middleware/auth.mjs';
import { adminCheck } from '../middleware/adminCheck.mjs';

// Public route
router.get('/', getSettings);

// Admin routes
router.put('/update', auth, adminCheck, updateSettings);
router.post('/reset', auth, adminCheck, resetSettings);

export default router;
)settings.mjs,
(
import express from 'express';
import passport from 'passport';
import { Strategy as GoogleStrategy } from 'passport-google-oauth20';
import { Strategy as FacebookStrategy } from 'passport-facebook';
import jwt from 'jsonwebtoken';
import User from '../models/User.mjs';
import SocialAuth from '../models/SocialAuth.mjs';

const router = express.Router();

// Validate environment variables
const validateEnvVars = () => {
  const requiredVars = [
    'GOOGLE_CLIENT_ID',
    'GOOGLE_CLIENT_SECRET',
    'FACEBOOK_APP_ID', 
    'FACEBOOK_APP_SECRET',
    'API_BASE_URL',
    'CLIENT_URL',
    'JWT_SECRET'
  ];

  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.warn('⚠️ Missing environment variables:', missingVars.join(', '));
    return false;
  }
  
  return true;
};

// Configure Passport Strategies
const configurePassport = () => {
  const envVarsValid = validateEnvVars();
  
  if (!envVarsValid) {
    console.warn('⚠️ Social authentication disabled due to missing environment variables');
    return;
  }

  console.log('Configuring Google Strategy with Client ID:', process.env.GOOGLE_CLIENT_ID ? '✅ Set' : '❌ Missing');
  console.log('Configuring Facebook Strategy with App ID:', process.env.FACEBOOK_APP_ID ? '✅ Set' : '❌ Missing');

  // Google Strategy - only configure if env vars exist
  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {
    passport.use(new GoogleStrategy({
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: `${process.env.API_BASE_URL}/auth/social/google/callback`,
      scope: ['profile', 'email'],
      passReqToCallback: true
    }, async (req, accessToken, refreshToken, profile, done) => {
      try {
        await handleSocialLogin('google', profile, accessToken, refreshToken, done);
      } catch (error) {
        console.error('Google OAuth error:', error);
        done(error);
      }
    }));
    console.log('✅ Google OAuth strategy configured');
  } else {
    console.warn('❌ Google OAuth not configured - missing environment variables');
  }

  // Facebook Strategy - only configure if env vars exist
  if (process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET) {
    passport.use(new FacebookStrategy({
      clientID: process.env.FACEBOOK_APP_ID,
      clientSecret: process.env.FACEBOOK_APP_SECRET,
      callbackURL: `${process.env.API_BASE_URL}/auth/social/facebook/callback`,
      profileFields: ['id', 'emails', 'name', 'displayName', 'photos'],
      enableProof: true
    }, async (accessToken, refreshToken, profile, done) => {
      try {
        await handleSocialLogin('facebook', profile, accessToken, refreshToken, done);
      } catch (error) {
        console.error('Facebook OAuth error:', error);
        done(error);
      }
    }));
    console.log('✅ Facebook OAuth strategy configured');
  } else {
    console.warn('❌ Facebook OAuth not configured - missing environment variables');
  }

  // Serialization
  passport.serializeUser((user, done) => {
    done(null, user._id);
  });

  passport.deserializeUser(async (id, done) => {
    try {
      const user = await User.findById(id);
      done(null, user);
    } catch (error) {
      console.error('Deserialize user error:', error);
      done(error);
    }
  });
};

// Social Login Handler
const handleSocialLogin = async (provider, profile, accessToken, refreshToken, done) => {
  try {
    console.log(`${provider} OAuth successful for:`, profile.displayName);
    
    // Check if social account already exists
    let socialAuth = await SocialAuth.findByProviderId(provider, profile.id);
    
    if (socialAuth) {
      // Update existing social auth
      socialAuth.accessToken = accessToken;
      socialAuth.refreshToken = refreshToken;
      socialAuth.profile = profile._json;
      socialAuth.expiresAt = new Date(Date.now() + 3600 * 1000); // 1 hour
      socialAuth.lastUsed = new Date();
      await socialAuth.save();
      
      const user = await User.findById(socialAuth.userId);
      if (!user) {
        return done(new Error('User not found for existing social account'));
      }
      return done(null, user);
    }

    // Check if user email already exists
    const email = profile.emails?.[0]?.value;
    let user = email ? await User.findOne({ email }) : null;

    if (!user) {
      // Create new user
      user = new User({
        name: profile.displayName || `${profile.name?.givenName} ${profile.name?.familyName}`,
        email: email,
        avatar: profile.photos?.[0]?.value,
        isEmailVerified: !!email,
        authMethod: provider,
        role: 'user' // Default role
      });
      await user.save();
      console.log('Created new user from social login:', user.email);
    }

    // Create social auth record
    socialAuth = new SocialAuth({
      userId: user._id,
      provider,
      providerId: profile.id,
      accessToken,
      refreshToken,
      profile: profile._json,
      expiresAt: new Date(Date.now() + 3600 * 1000), // 1 hour
      scopes: ['profile', 'email'],
      lastUsed: new Date()
    });
    await socialAuth.save();

    console.log('Social auth record created for user:', user.email);
    done(null, user);
  } catch (error) {
    console.error('Social login handler error:', error);
    done(error);
  }
};

// Generate JWT Token
const generateToken = (user) => {
  if (!process.env.JWT_SECRET) {
    throw new Error('JWT_SECRET environment variable is required');
  }

  return jwt.sign(
    { 
      userId: user._id, 
      email: user.email,
      role: user.role 
    },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
  );
};

// Check if social auth is configured
const isSocialAuthConfigured = () => {
  return (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) ||
         (process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET);
};

// Initialize passport
configurePassport();

// Routes

// Google Authentication (only if configured)
if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {
  router.get('/google', passport.authenticate('google', {
    scope: ['profile', 'email'],
    session: false
  }));

  router.get('/google/callback', passport.authenticate('google', {
    session: false,
    failureRedirect: `${process.env.CLIENT_URL || 'http://localhost:5173'}/login?error=auth_failed`
  }), (req, res) => {
    try {
      const token = generateToken(req.user);
      res.redirect(`${process.env.CLIENT_URL || 'http://localhost:5173'}/auth/success?token=${token}&userId=${req.user._id}`);
    } catch (error) {
      console.error('Google callback error:', error);
      res.redirect(`${process.env.CLIENT_URL || 'http://localhost:5173'}/login?error=token_generation_failed`);
    }
  });
} else {
  router.get('/google', (req, res) => {
    res.status(501).json({ error: 'Google OAuth not configured' });
  });
  
  router.get('/google/callback', (req, res) => {
    res.status(501).json({ error: 'Google OAuth not configured' });
  });
}

// Facebook Authentication (only if configured)
if (process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET) {
  router.get('/facebook', passport.authenticate('facebook', {
    scope: ['email'],
    session: false
  }));

  router.get('/facebook/callback', passport.authenticate('facebook', {
    session: false,
    failureRedirect: `${process.env.CLIENT_URL || 'http://localhost:5173'}/login?error=auth_failed`
  }), (req, res) => {
    try {
      const token = generateToken(req.user);
      res.redirect(`${process.env.CLIENT_URL || 'http://localhost:5173'}/auth/success?token=${token}&userId=${req.user._id}`);
    } catch (error) {
      console.error('Facebook callback error:', error);
      res.redirect(`${process.env.CLIENT_URL || 'http://localhost:5173'}/login?error=token_generation_failed`);
    }
  });
} else {
  router.get('/facebook', (req, res) => {
    res.status(501).json({ error: 'Facebook OAuth not configured' });
  });
  
  router.get('/facebook/callback', (req, res) => {
    res.status(501).json({ error: 'Facebook OAuth not configured' });
  });
}

// Link social account to existing user
router.post('/link', async (req, res) => {
  try {
    const { userId, provider, accessToken, providerId, profile } = req.body;
    
    if (!userId || !provider || !accessToken || !providerId) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // Verify user exists
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // Check if social account already linked
    const existingLink = await SocialAuth.findOne({ 
      $or: [
        { provider, providerId },
        { userId, provider }
      ]
    });

    if (existingLink) {
      return res.status(400).json({ error: 'Social account already linked' });
    }

    // Create social auth record
    const socialAuth = new SocialAuth({
      userId,
      provider,
      providerId,
      accessToken,
      profile: profile || {},
      expiresAt: new Date(Date.now() + 3600 * 1000),
      scopes: ['profile', 'email'],
      lastUsed: new Date()
    });

    await socialAuth.save();

    res.json({ 
      message: 'Social account linked successfully',
      socialAuth 
    });
  } catch (error) {
    console.error('Link account error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Unlink social account
router.delete('/unlink/:provider', async (req, res) => {
  try {
    const { provider } = req.params;
    const userId = req.user._id; // Assuming authenticated user

    const result = await SocialAuth.findOneAndDelete({ 
      userId, 
      provider 
    });

    if (!result) {
      return res.status(404).json({ error: 'Social account not found' });
    }

    res.json({ message: 'Social account unlinked successfully' });
  } catch (error) {
    console.error('Unlink account error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Get user's linked social accounts
router.get('/accounts', async (req, res) => {
  try {
    const userId = req.user._id; // Assuming authenticated user
    const socialAccounts = await SocialAuth.findByUserId(userId);
    
    res.json(socialAccounts);
  } catch (error) {
    console.error('Get accounts error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Health check endpoint
router.get('/status', (req, res) => {
  res.json({
    google: !!(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET),
    facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),
    configured: isSocialAuthConfigured()
  });
});

export default router;
)socialauth.mjs,
(
import { Router } from 'express';
const router = Router();
import { 
    getAllTestimonials,
    getApprovedTestimonials, 
    getVideoTestimonials, 
    getTestimonialCategories, 
    submitTestimonial, 
    getAllTestimonialsAdmin, 
    createTestimonial, 
    updateTestimonial, 
    deleteTestimonial, 
    getTestimonialStats 
} from '../controllers/testimonialController.mjs';
import { auth, optionalAuth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';
import { uploadImage } from '../middleware/upload.mjs';

// Public routes
router.get('/', optionalAuth, getAllTestimonials);
router.get('/approved', optionalAuth, getApprovedTestimonials);
router.get('/videos', optionalAuth, getVideoTestimonials);
router.get('/categories', optionalAuth, getTestimonialCategories);
router.post('/', optionalAuth, uploadImage.single('image'), submitTestimonial);

// Admin routes - ADDED /admin PREFIX
router.get('/admin/all', auth, moderatorCheck, getAllTestimonialsAdmin);
router.post('/admin/create', auth, moderatorCheck, uploadImage.single('image'), createTestimonial);
router.put('/admin/update/:id', auth, moderatorCheck, uploadImage.single('image'), updateTestimonial);
router.delete('/admin/delete/:id', auth, moderatorCheck, deleteTestimonial);
router.get('/admin/stats', auth, moderatorCheck, getTestimonialStats);

export default router;
)testimonial.mjs,
(
import { Router } from 'express';
const router = Router();
import {
  getCurrentUser,
  updateProfile,
  addFamilyMember,
  removeFamilyMember,
  getUserDashboard,
  getAllUsers,
  createUser,
  updateUser,
  deleteUser,
  getUserRoles,
  getMembershipStatuses
} from '../controllers/userController.mjs';
import { auth } from '../middleware/auth.mjs';
import { adminCheck, moderatorCheck } from '../middleware/adminCheck.mjs';

// User routes (authenticated)
router.get('/me', auth, getCurrentUser);
router.put('/profile', auth, updateProfile);
router.post('/family', auth, addFamilyMember);
router.delete('/family/:memberId', auth, removeFamilyMember);
router.get('/dashboard', auth, getUserDashboard);

// Admin routes
router.get('/admin', auth, adminCheck, getAllUsers);
router.post('/admin/create', auth, adminCheck, createUser);
router.put('/admin/update/:id', auth, adminCheck, updateUser);
router.delete('/admin/delete/:id', auth, adminCheck, deleteUser);
router.get('/admin/roles', auth, adminCheck, getUserRoles);
router.get('/admin/membership-statuses', auth, adminCheck, getMembershipStatuses);

export default router;
)user.mjs,
(
import { Router } from 'express';
const router = Router();
import { 
    getAllVolunteers, 
    getVolunteerStats, 
    getVolunteerById, 
    updateVolunteerStatus, 
    getUserVolunteerApplications, 
    getMinistryVolunteers 
} from '../controllers/volunteerController.mjs';
import { auth } from '../middleware/auth.mjs';
import { moderatorCheck } from '../middleware/adminCheck.mjs';

// Admin routes - ADDED /admin PREFIX
router.get('/admin/all', auth, moderatorCheck, getAllVolunteers);
router.get('/admin/stats', auth, moderatorCheck, getVolunteerStats);
router.get('/admin/:id', auth, moderatorCheck, getVolunteerById);
router.put('/admin/:id/status', auth, moderatorCheck, updateVolunteerStatus);

// Authenticated routes
router.get('/user/applications', auth, getUserVolunteerApplications);
router.get('/ministry/:ministryId', auth, getMinistryVolunteers);

export default router;
)volunteer.mjs,
(
import { Router, raw } from 'express';
const router = Router();
import { handleStripeWebhook } from '../controllers/webhookController.mjs';

// Stripe webhook endpoint
router.post('/stripe', raw({ type: 'application/json' }), handleStripeWebhook);

export default router;
)
],scripts[
(
// scripts/migrateUsers.js
import mongoose from 'mongoose';
import User from '../../models/User.mjs';
import dotenv from 'dotenv';

dotenv.config();

const migrateUsers = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('Connected to MongoDB');

    // Update existing users to have authMethod: 'local'
    const result = await User.updateMany(
      { 
        password: { $exists: true, $ne: null },
        authMethod: { $exists: false }
      },
      { 
        $set: { authMethod: 'local' }
      }
    );

    console.log(`Updated ${result.modifiedCount} users with authMethod: 'local'`);

    // Remove any empty password fields
    const cleanupResult = await User.updateMany(
      { 
        password: { $exists: true, $in: [null, ''] }
      },
      { 
        $unset: { password: '' }
      }
    );

    console.log(`Cleaned up ${cleanupResult.modifiedCount} users with empty passwords`);

    process.exit(0);
  } catch (error) {
    console.error('Migration error:', error);
    process.exit(1);
  }
};

migrateUsers();
)migrateusers.mjs,
],
utils[
(
import nodemailer from 'nodemailer';

// Create transporter with better error handling
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: parseInt(process.env.EMAIL_PORT),
    secure: process.env.EMAIL_SECURE === 'true',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    },
    connectionTimeout: 30000, // 30 seconds
    greetingTimeout: 30000,
    socketTimeout: 30000,
    logger: process.env.NODE_ENV === 'development',
    debug: process.env.NODE_ENV === 'development'
  });
};

// Verify connection (call this once on server startup)
export const verifyEmailConnection = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('✅ Email server connection verified');
    return true;
  } catch (error) {
    console.error('❌ Email connection failed:', error.message);
    return false;
  }
};

// ---------------------- UPDATED FUNCTIONS ----------------------

// Send verification email
export async function sendVerificationEmail(email, token) {
  try {
    const transporter = createTransporter();
    
    // FIX: Ensure URL has no line breaks
    const verificationUrl = `${process.env.CLIENT_URL}/verify-email/${token}`;
    
    console.log('Generated verification URL:', verificationUrl);

    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME,
        address: process.env.EMAIL_FROM_ADDRESS
      },
      to: email,
      subject: "Verify Your Email Address - St. Michael's Church",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #FF7E45;">Welcome to St. Michael's Church!</h2>
          <p>Thank you for registering. Please verify your email address to complete your account setup.</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${verificationUrl}" 
               style="background-color: #FF7E45; color: white; padding: 12px 24px; 
                      text-decoration: none; border-radius: 5px; display: inline-block;">
              Verify Email Address
            </a>
          </div>
          <p>Or copy and paste this link in your browser:</p>
          <p style="word-break: break-all; color: #667; font-family: monospace; font-size: 12px;">
            ${verificationUrl}
          </p>
          <p>If you didn't create this account, please ignore this email.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            St. Michael's Church & All Angels | Ifite-Awka
          </p>
        </div>
      `,
      // FIX: Remove line break in text version
      text: `Welcome to St. Michael's Church! Please verify your email by visiting: ${verificationUrl}\n\nIf you didn't create this account, please ignore this email.`
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('✅ Verification email sent to:', email);
    return result;
  } catch (error) {
    console.error('❌ Failed to send verification email:', error);
    throw new Error('Failed to send verification email');
  }
}

// Send password reset email
export async function sendPasswordResetEmail(email, token) {
  try {
    const transporter = createTransporter();
    const resetUrl = `${process.env.CLIENT_URL}/reset-password/${token}`;

    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME,
        address: process.env.EMAIL_FROM_ADDRESS
      },
      to: email,
      subject: "Password Reset Request - St. Michael's Church",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #FF7E45;">Password Reset Request</h2>
          <p>You requested to reset your password. Click the button below to proceed:</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetUrl}" 
               style="background-color: #FF7EAC; color: white; padding: 12px 24px; 
                      text-decoration: none; border-radius: 5px; display: inline-block;">
              Reset Password
            </a>
          </div>
          <p>Or use this token: <strong>${token}</strong></p>
          <p>This link will expire in 1 hour.</p>
          <p>If you didn't request this reset, please ignore this email.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            St. Michael's Church & All Angels | Ifite-Awka
          </p>
        </div>
      `,
      text: `You requested a password reset. Reset here: ${resetUrl}\n\nThis link will expire in 1 hour.\nIf you didn't request this reset, please ignore this email.`
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('✅ Password reset email sent to:', email);
    return result;
  } catch (error) {
    console.error('❌ Failed to send password reset email:', error);
    throw new Error('Failed to send password reset email');
  }
}

// ---------------------- FIXED UNCHANGED FUNCTIONS ----------------------

// Send password change email
export async function sendPasswordChangeEmail(email) {
  try {
    const transporter = createTransporter();
    const changeUrl = `${process.env.CLIENT_URL}/change-password`;

    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME,
        address: process.env.EMAIL_FROM_ADDRESS
      },
      to: email,
      subject: 'Password Change Notification - St. Michael\'s Church',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #FF7E45;">Password Change Notification</h2>
          <p>Your password has been changed successfully.</p>
          <div style="text-align: center; margin: 20px 0;">
            <a href="${changeUrl}" 
               style="background-color: #FF7E45; color: white; padding: 12px 24px; 
                      text-decoration: none; border-radius: 5px; display: inline-block;">
              Manage Your Account
            </a>
          </div>
          <p>If you did not initiate this change, please contact support immediately.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            St. Michael's Church & All Angels | Ifite-Awka
          </p>
        </div>
      `,
      text: `Your password has been changed successfully. If you did not initiate this change, please contact support immediately.\n\nManage your account: ${changeUrl}`
    };

    await transporter.sendMail(mailOptions);
    console.log('✅ Password change notification sent to:', email);
  } catch (error) {
    console.error('❌ Failed to send password change email:', error);
    throw new Error('Failed to send password change notification');
  }
}

// Send admin code email
export async function sendAdminCodeEmail(email, code, description) {
  try {
    const transporter = createTransporter();
    
    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME,
        address: process.env.EMAIL_FROM_ADDRESS
      },
      to: email,
      subject: 'Admin Registration Code - St. Michael\'s Church',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #FF7E45;">Admin Registration Code</h2>
          <p>Your admin registration code: <strong style="font-size: 18px;">${code}</strong></p>
          <p>Description: ${description}</p>
          <p>Use this code during registration to gain admin privileges.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            St. Michael's Church & All Angels | Ifite-Awka
          </p>
        </div>
      `,
      text: `Your admin registration code: ${code}\nDescription: ${description}\nUse this code during registration to gain admin privileges.`
    };

    await transporter.sendMail(mailOptions);
    console.log('✅ Admin code email sent to:', email);
  } catch (error) {
    console.error('❌ Failed to send admin code email:', error);
    throw new Error('Failed to send admin code email');
  }
}

// Send donation receipt
export async function sendDonationReceipt(email, donation) {
  try {
    const transporter = createTransporter();
    
    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME,
        address: process.env.EMAIL_FROM_ADDRESS
      },
      to: email,
      subject: 'Donation Receipt - St. Michael\'s Church',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #FF7E45;">Thank You for Your Donation</h2>
          <p>We appreciate your generous support of our ministry.</p>
          <h3>Donation Details:</h3>
          <ul style="list-style: none; padding: 0;">
            <li><strong>Amount:</strong> $${donation.amount}</li>
            <li><strong>Date:</strong> ${donation.createdAt.toDateString()}</li>
            <li><strong>Payment Method:</strong> ${donation.paymentMethod}</li>
            <li><strong>Donation ID:</strong> ${donation._id}</li>
          </ul>
          <p>This email serves as your official receipt for tax purposes.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            St. Michael's Church & All Angels | Ifite-Awka
          </p>
        </div>
      `,
      text: `Thank you for your donation of $${donation.amount} on ${donation.createdAt.toDateString()}.\nPayment Method: ${donation.paymentMethod}\nDonation ID: ${donation._id}\n\nThis email serves as your official receipt for tax purposes.`
    };

    await transporter.sendMail(mailOptions);
    console.log('✅ Donation receipt sent to:', email);
  } catch (error) {
    console.error('❌ Failed to send donation receipt:', error);
    throw new Error('Failed to send donation receipt');
  }
}

// Send volunteer application confirmation
export async function sendVolunteerConfirmation(email, ministryName) {
  try {
    const transporter = createTransporter();
    
    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME,
        address: process.env.EMAIL_FROM_ADDRESS
      },
      to: email,
      subject: 'Volunteer Application Received - St. Michael\'s Church',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #FF7E45;">Volunteer Application Received</h2>
          <p>Thank you for applying to volunteer for <strong>${ministryName}</strong>.</p>
          <p>Our team will review your application and contact you soon.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            St. Michael's Church & All Angels | Ifite-Awka
          </p>
        </div>
      `,
      text: `Thank you for applying to volunteer for ${ministryName}. Our team will review your application and contact you soon.`
    };

    await transporter.sendMail(mailOptions);
    console.log('✅ Volunteer confirmation sent to:', email);
  } catch (error) {
    console.error('❌ Failed to send volunteer confirmation:', error);
    throw new Error('Failed to send volunteer confirmation');
  }
}

// Send volunteer status update
export async function sendVolunteerStatusUpdate(email, ministryName, status) {
  try {
    const transporter = createTransporter();
    
    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME,
        address: process.env.EMAIL_FROM_ADDRESS
      },
      to: email,
      subject: `Volunteer Application Update - St. Michael's Church`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #FF7E45;">Volunteer Application Update</h2>
          <p>Your application to volunteer for <strong>${ministryName}</strong> has been <strong>${status}</strong>.</p>
          <p>${status === 'approved' ? 'We will contact you soon with next steps.' : 'Thank you for your interest in serving.'}</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="color: #999; font-size: 12px;">
            St. Michael's Church & All Angels | Ifite-Awka
          </p>
        </div>
      `,
      text: `Your application to volunteer for ${ministryName} has been ${status}.\n${status === 'approved' ? 'We will contact you soon with next steps.' : 'Thank you for your interest in serving.'}`
    };

    await transporter.sendMail(mailOptions);
    console.log('✅ Volunteer status update sent to:', email);
  } catch (error) {
    console.error('❌ Failed to send volunteer status update:', error);
    throw new Error('Failed to send volunteer status update');
  }
}

export default {
  verifyEmailConnection,
  sendVerificationEmail,
  sendPasswordResetEmail,
  sendPasswordChangeEmail,
  sendAdminCodeEmail,
  sendDonationReceipt,
  sendVolunteerConfirmation,
  sendVolunteerStatusUpdate
};
)emailservice.mjs,
(
import multer from 'multer';
import path from 'path';
import { CloudinaryStorage } from 'multer-storage-cloudinary';
import cloudinary from '../config/cloudinarym';

// Configure storage for different file types
const imageStorage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: 'church-app/images',
    allowed_formats: ['jpg', 'jpeg', 'png', 'gif', 'webp'],
    transformation: [{ width: 1000, height: 1000, crop: 'limit' }]
  }
});

const videoStorage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: 'church-app/videos',
    resource_type: 'video',
    allowed_formats: ['mp4', 'mov', 'avi', 'wmv', 'flv'],
    chunk_size: 6000000 // 6MB chunks
  }
});

const audioStorage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: 'church-app/audio',
    resource_type: 'video', // Cloudinary treats audio as video
    allowed_formats: ['mp3', 'wav', 'm4a', 'ogg'],
    chunk_size: 6000000 // 6MB chunks
  }
});

// File filters
const imageFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Only image files are allowed'), false);
  }
};

const videoFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('video/')) {
    cb(null, true);
  } else {
    cb(new Error('Only video files are allowed'), false);
  }
};

const audioFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('audio/')) {
    cb(null, true);
  } else {
    cb(new Error('Only audio files are allowed'), false);
  }
};

// Configure multer instances
const uploadImage = multer({
  storage: imageStorage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: imageFilter
});

const uploadVideo = multer({
  storage: videoStorage,
  limits: {
    fileSize: 100 * 1024 * 1024 // 100MB limit
  },
  fileFilter: videoFilter
});

const uploadAudio = multer({
  storage: audioStorage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB limit
  },
  fileFilter: audioFilter
});

// Middleware for different upload types
const handleImageUpload = uploadImage.single('image');
const handleVideoUpload = uploadVideo.single('video');
const handleAudioUpload = uploadAudio.single('audio');

// Handle multiple file types
const handleMediaUpload = (req, res, next) => {
  const upload = multer({
    storage: new CloudinaryStorage({
      cloudinary: cloudinary,
      params: (req, file) => {
        let folder = 'church-app/files';
        let resource_type = 'auto';
        
        if (file.mimetype.startsWith('image/')) {
          folder = 'church-app/images';
        } else if (file.mimetype.startsWith('video/')) {
          folder = 'church-app/videos';
          resource_type = 'video';
        } else if (file.mimetype.startsWith('audio/')) {
          folder = 'church-app/audio';
          resource_type = 'video'; // Cloudinary treats audio as video
        }
        
        return {
          folder,
          resource_type,
          allowed_formats: ['jpg', 'jpeg', 'png', 'gif', 'mp4', 'mov', 'avi', 'mp3', 'wav'],
          transformation: file.mimetype.startsWith('image/') 
            ? [{ width: 1000, height: 1000, crop: 'limit' }] 
            : []
        };
      }
    }),
    limits: {
      fileSize: 100 * 1024 * 1024 // 100MB limit
    },
    fileFilter: (req, file, cb) => {
      if (
        file.mimetype.startsWith('image/') ||
        file.mimetype.startsWith('video/') ||
        file.mimetype.startsWith('audio/')
      ) {
        cb(null, true);
      } else {
        cb(new Error('Only image, video, and audio files are allowed'), false);
      }
    }
  }).single('file');

  upload(req, res, (err) => {
    if (err) {
      return res.status(400).json({
        success: false,
        message: err.message
      });
    }
    next();
  });
};

export default {
  uploadImage,
  uploadVideo,
  uploadAudio,
  handleImageUpload,
  handleVideoUpload,
  handleAudioUpload,
  handleMediaUpload
};
)fileupload,mjs,
(
import jwt from 'jsonwebtoken';
const { sign, verify } = jwt;
import { randomBytes } from 'crypto';

// Generate JWT token
const generateAuthToken = (userId) => {
  return sign({ userId }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN || '7d'
  });
};

// Generate refresh token
const generateRefreshToken = () => {
  return randomBytes(40).toString('hex');
};

// Generate random token for email verification, password reset, etc.
const generateRandomToken = (length = 32) => {
  return randomBytes(length).toString('hex');
};

// Verify JWT token
const verifyAuthToken = (token) => {
  try {
    return verify(token, process.env.JWT_SECRET);
  } catch (error) {
    throw new Error('Invalid token');
  }
};

// Generate admin code
const generateAdminCode = () => {
  return randomBytes(8).toString('hex').toUpperCase();
};

export default {
  generateAuthToken,
  generateRefreshToken,
  generateRandomToken,
  verifyAuthToken,
  generateAdminCode
};
)generatetoken.mjs,
(
import { randomBytes } from 'crypto';

// Generate random string
const generateRandomString = (length = 32) => {
  return randomBytes(length).toString('hex');
};

// Format date
const formatDate = (date, format = 'YYYY-MM-DD') => {
  const d = new Date(date);
  const year = d.getFullYear();
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  
  if (format === 'YYYY-MM-DD') {
    return `${year}-${month}-${day}`;
  }
  
  return d.toISOString();
};

// Pagination helper
const getPagination = (page, size) => {
  const limit = size ? +size : 10;
  const offset = page ? (page - 1) * limit : 0;
  
  return { limit, offset };
};

// Get pagination data
const getPagingData = (data, page, limit) => {
  const { count: totalItems, rows: items } = data;
  const currentPage = page ? +page : 1;
  const totalPages = Math.ceil(totalItems / limit);
  
  return { totalItems, items, totalPages, currentPage };
};

// Sanitize object (remove undefined fields)
const sanitizeObject = (obj) => {
  Object.keys(obj).forEach(key => {
    if (obj[key] === undefined || obj[key] === null) {
      delete obj[key];
    }
  });
  return obj;
};

// Generate slug from title
const generateSlug = (title) => {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9 -]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim('-');
};

export default {
  generateRandomString,
  formatDate,
  getPagination,
  getPagingData,
  sanitizeObject,
  generateSlug
};
)helpers.mjs,
(
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// Create payment intent
const createPaymentIntent = async (amount, currency = 'usd', metadata = {}) => {
  try {
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(amount * 100), // Convert to cents
      currency,
      metadata,
      automatic_payment_methods: {
        enabled: true,
      },
      // Add shipping if needed for billing address verification
      shipping: metadata.billingAddress ? {
        address: {
          line1: metadata.billingAddress.line1,
          line2: metadata.billingAddress.line2,
          city: metadata.billingAddress.city,
          state: metadata.billingAddress.state,
          postal_code: metadata.billingAddress.postal_code,
          country: metadata.billingAddress.country,
        },
        name: metadata.name || 'Customer',
      } : undefined,
    });

    return {
      success: true,
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id
    };
  } catch (error) {
    console.error('Error creating payment intent:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Retrieve payment intent
const retrievePaymentIntent = async (paymentIntentId) => {
  try {
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
    return {
      success: true,
      paymentIntent
    };
  } catch (error) {
    console.error('Error retrieving payment intent:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Create customer
const createCustomer = async (email, name, metadata = {}) => {
  try {
    const customer = await stripe.customers.create({
      email,
      name,
      metadata
    });

    return {
      success: true,
      customer
    };
  } catch (error) {
    console.error('Error creating customer:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Create subscription
const createSubscription = async (customerId, priceId, metadata = {}) => {
  try {
    const subscription = await stripe.subscriptions.create({
      customer: customerId,
      items: [{ price: priceId }],
      metadata,
      expand: ['latest_invoice.payment_intent'],
    });

    return {
      success: true,
      subscription
    };
  } catch (error) {
    console.error('Error creating subscription:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Confirm payment with billing details
const confirmPaymentWithBilling = async (paymentIntentId, billingAddress) => {
  try {
    const paymentIntent = await stripe.paymentIntents.confirm(paymentIntentId, {
      payment_method_data: {
        billing_details: {
          address: {
            line1: billingAddress.line1,
            line2: billingAddress.line2,
            city: billingAddress.city,
            state: billingAddress.state,
            postal_code: billingAddress.postal_code,
            country: billingAddress.country,
          }
        }
      }
    });

    return {
      success: true,
      paymentIntent
    };
  } catch (error) {
    console.error('Error confirming payment:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

export default {
  createPaymentIntent,
  retrievePaymentIntent,
  createCustomer,
  createSubscription,
  confirmPaymentWithBilling
};
)paymentservice.mjs,
(
import { body } from 'express-validator';

// User validation rules
const userValidationRules = () => {
  return [
    body('name')
      .trim()
      .isLength({ min: 2, max: 50 })
      .withMessage('Name must be between 2 and 50 characters'),
    body('email')
      .isEmail()
      .normalizeEmail()
      .withMessage('Please provide a valid email'),
    body('password')
      .isLength({ min: 6 })
      .withMessage('Password must be at least 6 characters long')
      .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
      .withMessage('Password must contain at least one lowercase letter, one uppercase letter, and one number')
  ];
};

// Login validation rules
const loginValidationRules = () => {
  return [
    body('email')
      .isEmail()
      .normalizeEmail()
      .withMessage('Please provide a valid email'),
    body('password')
      .notEmpty()
      .withMessage('Password is required')
  ];
};

// Donation validation rules
const donationValidationRules = () => {
  return [
    body('amount')
      .isFloat({ min: 1 })
      .withMessage('Amount must be at least $1'),
    body('paymentMethod')
      .isIn(['card', 'bank', 'paypal', 'cash', 'other'])
      .withMessage('Invalid payment method')
  ];
};

// Event validation rules
const eventValidationRules = () => {
  return [
    body('title')
      .trim()
      .isLength({ min: 2, max: 100 })
      .withMessage('Title must be between 2 and 100 characters'),
    body('description')
      .trim()
      .isLength({ min: 10 })
      .withMessage('Description must be at least 10 characters long'),
    body('startTime')
      .isISO8601()
      .withMessage('Please provide a valid start time'),
    body('endTime')
      .isISO8601()
      .withMessage('Please provide a valid end time'),
    body('location')
      .trim()
      .notEmpty()
      .withMessage('Location is required')
  ];
};

// Sermon validation rules
const sermonValidationRules = () => {
  return [
    body('title')
      .trim()
      .isLength({ min: 2, max: 100 })
      .withMessage('Title must be between 2 and 100 characters'),
    body('speaker')
      .trim()
      .isLength({ min: 2, max: 50 })
      .withMessage('Speaker name must be between 2 and 50 characters'),
    body('description')
      .trim()
      .isLength({ min: 10 })
      .withMessage('Description must be at least 10 characters long'),
    body('date')
      .isISO8601()
      .withMessage('Please provide a valid date')
  ];
};

export default {
  userValidationRules,
  loginValidationRules,
  donationValidationRules,
  eventValidationRules,
  sermonValidationRules
};
)validators.mjs,
],
.env(
# Server Configuration
NODE_ENV=development
PORT=5000
CLIENT_URL=http://localhost:5173

# Database Configuration
MONGODB_URI=mongodb+srv://ugones:vlPbTDXusqtgs1RV@scraper.ohw1pzz.mongodb.net/churchDB?retryWrites=true&w=majority&appName=SMC_DB&tls=true
# mongodb+srv://ugones:vlPbTDXusqtgs1RV@scraper.ohw1pzz.mongodb.net/?retryWrites=true&w=majority&appName=SMC_DB
# JWT Configuration
JWT_SECRET=984ae46adb6c95d3fbfd579b88687ae77df11c154a0ea3ccb98859c5a5e778921970412e411fde9ff2b5b0149c12d32c4eff0bf40af557987bb6df4bb13cdbd6  
JWT_EXPIRES_IN=7d

# Cloudinary Configuration (Optional - can use local storage for development)
CLOUDINARY_CLOUD_NAME=dbjtzczvv
CLOUDINARY_API_KEY=752613618484582
CLOUDINARY_API_SECRET=ofNHlTBTmFONG1gUYPnsVy5pX8A

# Google Cloud Platform (GCP) Configuration
GOOGLE_CLIENT_ID=1072457760612-aleee87cojlvo1mk6qhf74hu1tqcd8f2.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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

# Facebook Configuration
FACEBOOK_APP_ID=1995190017686767
FACEBOOK_APP_SECRET=c70c950bb07a15b560b32512fc18af8c

# Stripe Configuration (Use test keys for development)
STRIPE_SECRET_KEY=sk_test_51S4Wi6ChmgWsJLaurk3SooWZmjhMEdc7PATS5PFkNU0ryfFSkxiLtyJyAiXfNpayoOHyodBu9JL4Eifm62uEjYBv009tMApzxn
STRIPE_PUBLISHABLE_KEY=pk_test_51S4Wi6ChmgWsJLauutuaPwfQHKs4rIvaErdDw4t03Jqd3H3amLPN50aYEetNjTgz68vY9CiHXHMc3ws7hnwLzwta00C9tLMWbo
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret_here

# Email Service (Optional for development - can use console logging)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=465
EMAIL_SECURE=true
EMAIL_USER=ugochukwuezeamakuhumphrey@gmail.com
EMAIL_PASS=xtkw zvzs tuob olnr
EMAIL_FROM_NAME="St. Michael's Church"
EMAIL_FROM_ADDRESS=ugochukwuezeamakuhumphrey@gmail.com

# Admin Configuration
ADMIN_INITIAL_CODE=STMICHAEL2024
DEFAULT_ADMIN_EMAIL=admin@example.com
DEFAULT_ADMIN_PASSWORD=admin123

# File Upload Limits
MAX_FILE_SIZE=5242880
MAX_IMAGE_SIZE=2097152

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=1000
RATE_LIMIT_AUTH_MAX_REQUESTS=10

# CORS Configuration
CORS_ORIGIN=http://localhost:5173
CORS_CREDENTIALS=true

# Session Configuration
SESSION_SECRET=dev_session_secret_12345
SESSION_MAX_AGE=86400000

# Cookie Configuration
COOKIE_SECRET=dev_cookie_secret_12345
COOKIE_HTTP_ONLY=true
COOKIE_SECURE=false
COOKIE_SAME_SITE=lax

# Logging Configuration
LOG_LEVEL=debug
LOG_FILE=logs/app.log
ERROR_LOG_FILE=logs/error.log
),
.env.example(
# =======================================
# CHURCH BACKEND SERVER CONFIGURATION
# =======================================

# Server Configuration
# ====================
NODE_ENV=development
PORT=5000
CLIENT_URL=http://localhost:5173

# Database Configuration
# ======================
MONGODB_URI=mongodb+srv://ugones:vlPbTDXusqtgs1RV@scraper.ohw1pzz.mongodb.net/?retryWrites=true&w=majority&appName=SMC_DB&tls=true
MONGODB_TEST_URI=mongodb://localhost:27017/church_test_db

# JWT Configuration
# =================
JWT_SECRET=your_super_secret_jwt_key_change_in_production_12345
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=your_refresh_token_secret_change_this_12345
JWT_REFRESH_EXPIRES_IN=30d

# Cloudinary Configuration (File Uploads)
# =======================================
CLOUDINARY_CLOUD_NAME=your_cloudinary_cloud_name
CLOUDINARY_API_KEY=your_cloudinary_api_key
CLOUDINARY_API_SECRET=your_cloudinary_api_secret

# Stripe Configuration (Payments)
# ===============================
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret_here

# Email Service Configuration
# ===========================
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=465
EMAIL_SECURE=true
EMAIL_USER=ugochukwuezeamakuhumphrey@gmail.com
EMAIL_PASS=xtkw zvzs tuob olnr
EMAIL_FROM_NAME="Church Administration"
EMAIL_FROM_ADDRESS=noreply@yourchurch.com

# Admin Configuration
# ===================
ADMIN_INITIAL_CODE=STMICHAEL2024
DEFAULT_ADMIN_EMAIL=admin@yourchurch.com
DEFAULT_ADMIN_PASSWORD=admin123

# File Upload Limits
# ==================
MAX_FILE_SIZE=5242880
MAX_IMAGE_SIZE=2097152
MAX_VIDEO_SIZE=104857600

# Rate Limiting
# =============
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_AUTH_MAX_REQUESTS=5

# CORS Configuration
# ==================
CORS_ORIGIN=http://localhost:5173
CORS_CREDENTIALS=true

# Session Configuration
# =====================
SESSION_SECRET=your_session_secret_key_change_in_production
SESSION_MAX_AGE=86400000

# Cookie Configuration
# ====================
COOKIE_SECRET=your_cookie_secret_change_in_production
COOKIE_HTTP_ONLY=true
COOKIE_SECURE=false
COOKIE_SAME_SITE=lax

# Analytics (Optional)
# ====================
GOOGLE_ANALYTICS_ID=your_google_analytics_id
FACEBOOK_PIXEL_ID=your_facebook_pixel_id

# Social Media API Keys (Optional)
# ================================
FACEBOOK_APP_ID=your_facebook_app_id
FACEBOOK_APP_SECRET=your_facebook_app_secret
GOOGLE_CLIENT_ID=1072457760612-aleee87cojlvo1mk6qhf74hu1tqcd8f2.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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

# Backup Configuration (Optional)
# ===============================
BACKUP_PATH=./backups
BACKUP_SCHEDULE=0 0 * * 0
BACKUP_RETENTION_DAYS=30

# Logging Configuration
# =====================
LOG_LEVEL=info
LOG_FILE=logs/app.log
ERROR_LOG_FILE=logs/error.log

# Security Headers
# ================
HELMET_ENABLED=true
CSP_ENABLED=true
HSTS_ENABLED=true
),
),
.gitignore(
node_modules
.env
.env.local
.env.example
),
package.json(
{
  "name": "church-server",
  "version": "1.0.0",
  "description": "Backend for Church Management System",
  "keywords": [
    "church",
    "backend",
    "management"
  ],
  "license": "MIT",
  "author": "Your Name",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cloudinary": "^1.40.0",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "dotenv": "^16.6.1",
    "express": "^4.18.2",
    "express-rate-limit": "^6.8.1",
    "express-validator": "^7.0.1",
    "geoip-lite": "^1.4.7",
    "helmet": "^7.0.0",
    "jsonwebtoken": "^9.0.2",
    "moment": "^2.29.4",
    "mongoose": "^7.5.0",
    "multer": "^1.4.5-lts.1",
    "multer-storage-cloudinary": "^4.0.0",
    "nodemailer": "^6.10.1",
    "passport": "^0.7.0",
    "passport-facebook": "^3.0.0",
    "passport-google-oauth20": "^2.0.0",
    "stripe": "^12.18.0",
    "ua-parser-js": "^1.0.35"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "jest": "^29.6.4",
    "nodemon": "^3.0.1"
  }
}
),
server.js(
import express from 'express';
import passport from 'passport';
import mongoose from 'mongoose';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import 'dotenv/config';

// Import routes - ES Module syntax
import authRoutes from './src/routes/auth.mjs';
import userRoutes from './src/routes/users.mjs';
import eventRoutes from './src/routes/events.mjs';
import sermonRoutes from './src/routes/sermons.mjs';
import donationRoutes from './src/routes/donations.mjs';
import prayerRoutes from './src/routes/prayers.mjs';
import testimonialRoutes from './src/routes/testimonials.mjs';
import ministryRoutes from './src/routes/ministries.mjs';
import volunteerRoutes from './src/routes/volunteers.mjs';
import blogRoutes from './src/routes/blogs.mjs';
import analyticsRoutes from './src/routes/analytics.mjs';
import adminRoutes from './src/routes/admin.mjs';
import settingsRoutes from './src/routes/settings.mjs';
import webhookRoutes from './src/routes/webhooks.mjs';
import socialAuthRoutes from './src/routes/socialAuth.mjs';
import { verifyEmailConnection } from './src/utils/emailService.mjs';



// Import error handler middleware
import errorHandler from './src/middleware/errorHandlers.mjs';

const app = express();

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.CLIENT_URL || 'http://localhost:5173',
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);


// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(passport.initialize());


// Database connection
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log('🚀 MongoDB connected successfully'))
  .catch(err => console.error('MongoDB connection error:', err));

// Use routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/events', eventRoutes);
app.use('/api/sermons', sermonRoutes);
app.use('/api/donations', donationRoutes);
app.use('/api/prayers', prayerRoutes);
app.use('/api/testimonials', testimonialRoutes);
app.use('/api/ministries', ministryRoutes);
app.use('/api/volunteers', volunteerRoutes);
app.use('/api/blogs', blogRoutes);
app.use('/api/analytics', analyticsRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/settings', settingsRoutes);
app.use('/api/webhooks', webhookRoutes);
app.use('/auth/social', socialAuthRoutes);


// Error handling middleware
app.use(errorHandler);

// Root route - essential!
app.get('/', (req, res) => {
  res.json({
    message: 'Church API Server is running!',
    status: 'OK',
    timestamp: new Date().toISOString()
  });
});

// Handle 404 errors
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route not found',
    path: req.originalUrl,
    method: req.method
  });
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    message: 'Server is running',
    timestamp: new Date().toISOString()
  });
});

const PORT = process.env.PORT || 5000;
const startServer = async () => {
  try {
    // Verify email connection
    const emailConnected = await verifyEmailConnection();
    if (!emailConnected) {
      console.warn('⚠️  Email service not configured. Verification emails will not be sent.');
    }

    app.listen(PORT, () => {
      console.log(`🚀 Server running on port http://localhost:${PORT}`);
      console.log(`📋 API Documentation: http://localhost:${PORT}/api-docs`);
      if (emailConnected) {
        console.log('✅ Email service: Ready to send verification emails');
      }
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
};

startServer();

export default app;
),
readme.md(
# Church
SMC Church WebSite
),
)
]




STRUCTURES(


FRONTEND
church/client
    church/client/src
        church/client/src/assets
        church/client/src/components         
            church/client/src/components/Footer.jsx
            church/client/src/components/Header.jsx 
            church/client/src/components/Loader.jsx
            church/client/src/components/SocialLoginButtons.jsx 
        church/client/src/constants  
            church/client/src/constants/API.js 
        church/client/src/contexts   
            church/client/src/contexts/SocialAuthContext.jsx
        church/client/src/hooks 
            church/client/src/hooks/useAdmin.js
            church/client/src/hooks/useAuth.jsx
            church/client/src/hooks/useForm.js
        church/client/src/models         
            church/client/src/models/API.js 
            church/client/src/models/BlogPost.js
            church/client/src/models/Donation.js
            church/client/src/models/Events.js
            church/client/src/models/Favorite.js 
            church/client/src/models/Ministry.js 
            church/client/src/models/PrayerRequest.js 
            church/client/src/models/RSVP.js 
            church/client/src/models/Sermon.js 
            church/client/src/models/Testimonial.js 
            church/client/src/models/User.js 
            church/client/src/models/Volunteer.js 
        church/client/src/pages
            church/client/src/pages/AdminPage.jsx 
            church/client/src/pages/BlogPage.jsx 
            church/client/src/pages/DonatePage.jsx 
            church/client/src/pages/EventsPage.jsx 
            church/client/src/pages/HomePage.jsx 
            church/client/src/pages/LoginPage.jsx 
            church/client/src/pages/MinistriesPage.jsx 
            church/client/src/pages/MyRsvpsPage.jsx 
            church/client/src/pages/NotFound.jsx 
            church/client/src/pages/PasswordPage.jsx 
            church/client/src/pages/PrayerPage.jsx 
            church/client/src/pages/ProfilePage.jsx 
            church/client/src/pages/SermonsPage.jsx 
            church/client/src/pages/TestimonialsPage.jsx 
            church/client/src/pages/UserPage.jsx 
            church/client/src/pages/VerifyEmail.jsx 
        church/client/src/routes
            church/client/src/routes/ProtectedRroute.jsx 
        church/client/src/services
            church/client/src/services/apiService.js 
        church/client/src/utils 
            church/client/src/utils/Alert.jsx 
            church/client/src/utils/api.js 
            church/client/src/utils/auth.js 
            church/client/src/utils/authUtils.js 
            church/client/src/utils/facebookAuth.jsx 
            church/client/src/utils/googleAuth.jsx
        church/client/src/.env 
        church/client/src/.env.production 
        church/client/src/App.jsx 
        church/client/src/index.css 
        church/client/src/main.jsx 
    church/client/.gitignore 
    church/client/eslint.config.js 
    church/client/index.html 
    church/client/package-lock.json 
    church/client/package.json 
    church/client/README.md 
    church/client/vite.config.js 



BACKEND
church/server
    church/server/src  
        church/server/src/config   
            church/server/src/config/cloudinary.mjs 
            church/server/src/config/constants.mjs 
            church/server/src/config/db.mjs 
            church/server/src/config/srtipe.mjs 
        
        church/server/src/controllers 
            church/server/src/controllers/adminController.mjs 
            church/server/src/controllers/analyticsController.mjs 
            church/server/src/controllers/authController.mjs 
            church/server/src/controllers/blogController.mjs 
            church/server/src/controllers/donationController.mjs 
            church/server/src/controllers/eventController.mjs 
            church/server/src/controllers/ministryController.mjs 
            church/server/src/controllers/prayerController.mjs 
            church/server/src/controllers/sermonController.mjs 
            church/server/src/controllers/settingController.mjs 
            church/server/src/controllers/testimonialController.mjs 
            church/server/src/controllers/userController.mjs 
            church/server/src/controllers/volunteerController.mjs 
            church/server/src/controllers/webhookController.mjs 
        church/server/src/middleware         
            church/server/src/middleware/adminCheck.mjs 
            church/server/src/middleware/auth.mjs 
            church/server/src/middleware/errorHandlers.mjs 
            church/server/src/middleware/rateLimit.mjs 
            church/server/src/middleware/upload.mjs 
            church/server/src/middleware/validation.mjs 
        church/server/src/models
            church/server/src/models/AdminCode.mjs 
            church/server/src/models/Analyitics.mjs 
            church/server/src/models/AuthAttempt.mjs 
            church/server/src/models/BlogPost.mjs 
            church/server/src/models/Donation.mjs
            church/server/src/models/Event.mjs 
            church/server/src/models/Favorite.mjs 
            church/server/src/models/Ministry.mjs 
            church/server/src/models/Prayer.mjs 
            church/server/src/models/RSVP.mjs 
            church/server/src/models/Sermon.mjs 
            church/server/src/models/Session.mjs 
            church/server/src/models/Setting.mjs 
            church/server/src/models/SocialAuth.mjs 
            church/server/src/models/Testimonial.mjs 
            church/server/src/models/User.mjs 
            church/server/src/models/Volunteer.mjs 
        church/server/src/routes         
            church/server/src/routes/admin.mjs 
            church/server/src/routes/analytics.mjs 
            church/server/src/routes/auth.mjs 
            church/server/src/routes/blogs.mjs 
            church/server/src/routes/donations.mjs 
            church/server/src/routes/events.mjs 
            church/server/src/routes/ministries.mjs 
            church/server/src/routes/prayers.mjs 
            church/server/src/routes/sermons.mjs 
            church/server/src/routes/settings.mjs 
            church/server/src/routes/socialAuth.mjs 
            church/server/src/routes/testimonials.mjs 
            church/server/src/routes/users.mjs 
            church/server/src/routes/volunteers.mjs 
            church/server/src/routes/webhooks.mjs 
        church/server/src/scripts             
            church/server/src/scripts/migrateUsers.js 
        church/server/src/utils      
            church/server/src/utils/emailService.mjs 
            church/server/src/utils/fileUpload.mjs 
            church/server/src/utils/generateToken.mjs 
            church/server/src/utils/helpers.mjs 
            church/server/src/utils/paymentService.mjs 
            church/server/src/utils/validators.mjs 
        church/server/src/.env 
        church/server/src/.env.example 
    church/server/.gitignore 
    church/server/package-lock.json 
    church/server/package.json 
    church/server/server.js 
    church/README.md

)